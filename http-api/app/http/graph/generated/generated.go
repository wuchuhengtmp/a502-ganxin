// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"http-api/app/http/graph/model"
	"http-api/app/models/codeinfo"
	"http-api/app/models/companies"
	"http-api/app/models/devices"
	"http-api/app/models/maintenance"
	"http-api/app/models/maintenance_record"
	"http-api/app/models/msg"
	"http-api/app/models/order_express"
	"http-api/app/models/order_specification"
	"http-api/app/models/order_specification_steel"
	"http-api/app/models/orders"
	"http-api/app/models/projects"
	"http-api/app/models/repositories"
	"http-api/app/models/roles"
	"http-api/app/models/specificationinfo"
	"http-api/app/models/steels"
	"http-api/app/models/users"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	CompanyItem() CompanyItemResolver
	DeviceItem() DeviceItemResolver
	MaintenanceItem() MaintenanceItemResolver
	MaintenanceRecordItem() MaintenanceRecordItemResolver
	Mutation() MutationResolver
	OrderExpressItem() OrderExpressItemResolver
	OrderItem() OrderItemResolver
	OrderSpecificationItem() OrderSpecificationItemResolver
	OrderSpecificationSteelItem() OrderSpecificationSteelItemResolver
	ProjectItem() ProjectItemResolver
	Query() QueryResolver
	RepositoryItem() RepositoryItemResolver
	SpecificationItem() SpecificationItemResolver
	SteelInProject() SteelInProjectResolver
	SteelItem() SteelItemResolver
	UserItem() UserItemResolver
}

type DirectiveRoot struct {
	HasRole      func(ctx context.Context, obj interface{}, next graphql.Resolver, role []roles.GraphqlRole) (res interface{}, err error)
	MustBeDevice func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	CompanyItem struct {
		AdminAvatar    func(childComplexity int) int
		AdminName      func(childComplexity int) int
		AdminPhone     func(childComplexity int) int
		AdminWechat    func(childComplexity int) int
		BackgroundFile func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		EndedAt        func(childComplexity int) int
		ID             func(childComplexity int) int
		IsAble         func(childComplexity int) int
		LogoFile       func(childComplexity int) int
		Name           func(childComplexity int) int
		Phone          func(childComplexity int) int
		PinYin         func(childComplexity int) int
		StartedAt      func(childComplexity int) int
		Symbol         func(childComplexity int) int
		Wechat         func(childComplexity int) int
	}

	DeviceItem struct {
		ID       func(childComplexity int) int
		IsAble   func(childComplexity int) int
		Mac      func(childComplexity int) int
		UserInfo func(childComplexity int) int
	}

	ErrCodes struct {
		Code func(childComplexity int) int
		Desc func(childComplexity int) int
	}

	ExpressCompanyItem struct {
		ID        func(childComplexity int) int
		IsDefault func(childComplexity int) int
		Name      func(childComplexity int) int
		Remark    func(childComplexity int) int
	}

	ExpressItem struct {
		ID        func(childComplexity int) int
		IsDefault func(childComplexity int) int
		Name      func(childComplexity int) int
		Remark    func(childComplexity int) int
	}

	FileItem struct {
		ID  func(childComplexity int) int
		URL func(childComplexity int) int
	}

	Get2BeChangedRepositorySteelDetailRes struct {
		List   func(childComplexity int) int
		Total  func(childComplexity int) int
		Weight func(childComplexity int) int
	}

	Get2BeScrapRepositorySteelDetailRes struct {
		List   func(childComplexity int) int
		Total  func(childComplexity int) int
		Weight func(childComplexity int) int
	}

	GetEnterMaintenanceSteelDetailRes struct {
		List   func(childComplexity int) int
		Total  func(childComplexity int) int
		Weight func(childComplexity int) int
	}

	GetEnterRepositorySteelDetailRes struct {
		OrderSteel     func(childComplexity int) int
		StoredTotal    func(childComplexity int) int
		ToBeStoreTotal func(childComplexity int) int
	}

	GetOutOfWorkshopProjectSteelDetailRes struct {
		OrderSteel     func(childComplexity int) int
		StoreTotal     func(childComplexity int) int
		ToBeStoreTotal func(childComplexity int) int
	}

	GetProjectOrder2WorkshopDetailRes struct {
		List        func(childComplexity int) int
		Total       func(childComplexity int) int
		TotalWeight func(childComplexity int) int
	}

	GetProjectSpecificationDetailRes struct {
		List   func(childComplexity int) int
		Total  func(childComplexity int) int
		Weight func(childComplexity int) int
	}

	GetProjectSteel2BeChangeDetailRes struct {
		List        func(childComplexity int) int
		Total       func(childComplexity int) int
		WeightTotal func(childComplexity int) int
	}

	GetProjectSteelDetailRes struct {
		List   func(childComplexity int) int
		Total  func(childComplexity int) int
		Weight func(childComplexity int) int
	}

	GetRepositoryOverviewRes struct {
		Total  func(childComplexity int) int
		Weight func(childComplexity int) int
	}

	GetRepositorySteelDetailRes struct {
		List   func(childComplexity int) int
		Total  func(childComplexity int) int
		Weight func(childComplexity int) int
	}

	GetRepositorySteelListItemRes struct {
		SpecificationInfo func(childComplexity int) int
		Total             func(childComplexity int) int
		Weight            func(childComplexity int) int
	}

	GetRepositorySteelRes struct {
		List   func(childComplexity int) int
		Total  func(childComplexity int) int
		Weight func(childComplexity int) int
	}

	GetSend2WorkshopOrderListDetailRes struct {
		List        func(childComplexity int) int
		Total       func(childComplexity int) int
		TotalWeight func(childComplexity int) int
	}

	GetSteelListRes struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	GraphDesc struct {
		Desc     func(childComplexity int) int
		ErrCodes func(childComplexity int) int
		Title    func(childComplexity int) int
	}

	LoginRes struct {
		AccessToken func(childComplexity int) int
		Expired     func(childComplexity int) int
		Role        func(childComplexity int) int
		RoleName    func(childComplexity int) int
	}

	MaintenanceItem struct {
		Address     func(childComplexity int) int
		Admin       func(childComplexity int) int
		Id          func(childComplexity int) int
		IsAble      func(childComplexity int) int
		Name        func(childComplexity int) int
		Remark      func(childComplexity int) int
		Total       func(childComplexity int) int
		WeightTotal func(childComplexity int) int
	}

	MaintenanceRecordItem struct {
		EnterRepositoryAt func(childComplexity int) int
		EnteredAt         func(childComplexity int) int
		Id                func(childComplexity int) int
		Maintenance       func(childComplexity int) int
		OutRepositoryAt   func(childComplexity int) int
		OutedAt           func(childComplexity int) int
		StateInfo         func(childComplexity int) int
		Steel             func(childComplexity int) int
		UseDays           func(childComplexity int) int
	}

	ManufacturerItem struct {
		ID        func(childComplexity int) int
		IsDefault func(childComplexity int) int
		Name      func(childComplexity int) int
		Remark    func(childComplexity int) int
	}

	MaterialManufacturerItem struct {
		ID        func(childComplexity int) int
		IsDefault func(childComplexity int) int
		Name      func(childComplexity int) int
		Remark    func(childComplexity int) int
	}

	MsgItem struct {
		Content   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Id        func(childComplexity int) int
		IsRead    func(childComplexity int) int
	}

	Mutation struct {
		ConfirmOrRejectOrder           func(childComplexity int, input model.ConfirmOrderInput) int
		CreateCompany                  func(childComplexity int, input model.CreateCompanyInput) int
		CreateCompanyUser              func(childComplexity int, input model.CreateCompanyUserInput) int
		CreateExpress                  func(childComplexity int, input model.CreateExpressInput) int
		CreateMaintenance              func(childComplexity int, input model.CreateMaintenanceInput) int
		CreateManufacturer             func(childComplexity int, input model.CreateManufacturerInput) int
		CreateMaterialManufacturer     func(childComplexity int, input model.CreateMaterialManufacturerInput) int
		CreateOrder                    func(childComplexity int, input model.CreateOrderInput) int
		CreateProject                  func(childComplexity int, input model.CreateProjectInput) int
		CreateRepository               func(childComplexity int, input model.CreateRepositoryInput) int
		CreateSpecification            func(childComplexity int, input model.CreateSpecificationInput) int
		CreateSteel                    func(childComplexity int, input model.CreateSteelInput) int
		DelMaintenance                 func(childComplexity int, input model.DelMaintenanceInput) int
		DeleteCompany                  func(childComplexity int, id int64) int
		DeleteCompanyUser              func(childComplexity int, uid int64) int
		DeleteExpress                  func(childComplexity int, id int64) int
		DeleteManufacturer             func(childComplexity int, id int64) int
		DeleteMaterialManufacturer     func(childComplexity int, id int64) int
		DeleteRepository               func(childComplexity int, repositoryID int64) int
		DeleteSpecification            func(childComplexity int, id int64) int
		EditCompany                    func(childComplexity int, input model.EditCompanyInput) int
		EditCompanyUser                func(childComplexity int, input *model.EditCompanyUserInput) int
		EditDevice                     func(childComplexity int, input model.EditDeviceInput) int
		EditExpress                    func(childComplexity int, input model.EditExpressInput) int
		EditMaintenance                func(childComplexity int, input model.EditMaintenanceInput) int
		EditManufacturer               func(childComplexity int, input model.EditManufacturerInput) int
		EditMaterialManufacturer       func(childComplexity int, input model.EditMaterialManufacturerInput) int
		EditPrice                      func(childComplexity int, price float64) int
		EditSpecification              func(childComplexity int, input model.EditSpecificationInput) int
		InstallSteel                   func(childComplexity int, input model.InstallLocationInput) int
		Login                          func(childComplexity int, phone string, password string, mac *string) int
		SetBatchOfMaintenanceSteel     func(childComplexity int, input model.SetBatchOfMaintenanceSteelInput) int
		SetBatchOfRepositorySteel      func(childComplexity int, input model.SetBatchOfRepositorySteelInput) int
		SetBatchOfRepositorySteelScrap func(childComplexity int, input model.SetBatchOfRepositorySteelScrapInput) int
		SetEnterMaintenance            func(childComplexity int, input model.SetMaintenanceInput) int
		SetPassword                    func(childComplexity int, input *model.SetPasswordInput) int
		SetProjectOrder2Workshop       func(childComplexity int, input model.ProjectOrder2WorkshopInput) int
		SetProjectSteelEnterRepository func(childComplexity int, input model.SetProjectSteelEnterRepositoryInput) int
		SetProjectSteelOutOfWorkshop   func(childComplexity int, input model.SetProjectSteelOutOfWorkshopInput) int
		SetProjectSteelState           func(childComplexity int, input model.SetProjectSteelInput) int
		SetSteelEnterWorkshop          func(childComplexity int, input model.SetSteelIntoWorkshopInput) int
		SingleUpload                   func(childComplexity int, file graphql.Upload) int
	}

	OrderExpressItem struct {
		CreatedAt      func(childComplexity int) int
		Direction      func(childComplexity int) int
		ExpressCompany func(childComplexity int) int
		ExpressNo      func(childComplexity int) int
		Id             func(childComplexity int) int
		ReceiveAt      func(childComplexity int) int
		Receiver       func(childComplexity int) int
		Sender         func(childComplexity int) int
	}

	OrderItem struct {
		ConfirmedAt            func(childComplexity int) int
		ConfirmedUser          func(childComplexity int) int
		CreateUser             func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		ExpectedReturnAt       func(childComplexity int) int
		ExpressList            func(childComplexity int) int
		Id                     func(childComplexity int) int
		OrderNo                func(childComplexity int) int
		OrderSpecificationList func(childComplexity int) int
		PartList               func(childComplexity int) int
		Project                func(childComplexity int) int
		Remark                 func(childComplexity int) int
		Repository             func(childComplexity int) int
		State                  func(childComplexity int) int
		Total                  func(childComplexity int) int
		Weight                 func(childComplexity int) int
	}

	OrderSpecificationItem struct {
		Id                   func(childComplexity int) int
		Order                func(childComplexity int) int
		Specification        func(childComplexity int) int
		SpecificationInfo    func(childComplexity int) int
		StoreTotal           func(childComplexity int) int
		Total                func(childComplexity int) int
		TotalSend            func(childComplexity int) int
		TotalToBeSend        func(childComplexity int) int
		Weight               func(childComplexity int) int
		WorkshopReceiveTotal func(childComplexity int) int
	}

	OrderSpecificationSteelItem struct {
		EnterRepositoryAt   func(childComplexity int) int
		EnterRepositoryUser func(childComplexity int) int
		EnterWorkshopAt     func(childComplexity int) int
		Id                  func(childComplexity int) int
		InstallationAt      func(childComplexity int) int
		LocationCode        func(childComplexity int) int
		OrderSpecification  func(childComplexity int) int
		OutRepositoryAt     func(childComplexity int) int
		OutWorkshopAt       func(childComplexity int) int
		StateInfo           func(childComplexity int) int
		Steel               func(childComplexity int) int
		ToRepositoryExpress func(childComplexity int) int
		ToWorkshopExpress   func(childComplexity int) int
	}

	ProjectItem struct {
		Address    func(childComplexity int) int
		City       func(childComplexity int) int
		Company    func(childComplexity int) int
		EndedAt    func(childComplexity int) int
		ID         func(childComplexity int) int
		LeaderList func(childComplexity int) int
		Name       func(childComplexity int) int
		Remark     func(childComplexity int) int
		StartedAt  func(childComplexity int) int
	}

	Query struct {
		ErrorCodeDesc                           func(childComplexity int) int
		Get2BeChangedRepositorySteel            func(childComplexity int, input model.Get2BeChangedRepositorySteelInput) int
		Get2BeChangedRepositorySteelDetail      func(childComplexity int, input model.Get2BeChangedRepositorySteelDetailInput) int
		Get2BeMaintainSteel                     func(childComplexity int, input model.Get2BeMaintainSteelInput) int
		Get2BeMaintainSteelDetail               func(childComplexity int, input model.Get2BeMaintainSteelDetailInput) int
		Get2BeScrapRepositorySteel              func(childComplexity int, input model.Get2BeScrapRepositorySteelInput) int
		Get2BeScrapRepositorySteelDetail        func(childComplexity int, input model.Get2BeScrapRepositorySteelDetailInput) int
		GetAllCompany                           func(childComplexity int) int
		GetAllStateList                         func(childComplexity int) int
		GetChangedMaintenanceSteel              func(childComplexity int, input model.GetChangedMaintenanceSteelInput) int
		GetCompanyUser                          func(childComplexity int, input *model.GetCompanyUserInput) int
		GetDeviceList                           func(childComplexity int) int
		GetEnterMaintenanceSteel                func(childComplexity int, input model.EnterMaintenanceInput) int
		GetEnterMaintenanceSteelDetail          func(childComplexity int, input model.GetEnterMaintenanceSteelDetailInput) int
		GetEnterRepositoryProjectList           func(childComplexity int) int
		GetEnterRepositorySteelDetail           func(childComplexity int, input model.GetEnterRepositorySteelDetailInput) int
		GetExpressList                          func(childComplexity int) int
		GetMaintenanceList                      func(childComplexity int) int
		GetMaintenanceStateForChanged           func(childComplexity int) int
		GetManufacturers                        func(childComplexity int) int
		GetMaterialManufacturers                func(childComplexity int) int
		GetMaxLocationCode                      func(childComplexity int, input model.GetMaxLocationCodeInput) int
		GetMsgList                              func(childComplexity int) int
		GetMultipleSteelDetail                  func(childComplexity int, input *model.GetMultipleSteelDetailInput) int
		GetMyInfo                               func(childComplexity int) int
		GetOneSteelDetail                       func(childComplexity int, input model.GetOneSteelDetailInput) int
		GetOrderDetail                          func(childComplexity int, input model.GetOrderDetailInput) int
		GetOrderList                            func(childComplexity int, input model.GetOrderListInput) int
		GetOrderSteelDetail                     func(childComplexity int, input model.GetOrderSteelDetailInput) int
		GetOutOfWorkshopProjectList             func(childComplexity int) int
		GetOutOfWorkshopProjectSteelDetail      func(childComplexity int, input model.GetOutOfWorkshopProjectSteelDetail) int
		GetPrice                                func(childComplexity int) int
		GetProjectLis                           func(childComplexity int) int
		GetProjectOrder2WorkshopDetail          func(childComplexity int, input model.ProjectOrder2WorkshopDetailInput) int
		GetProjectSpecificationDetail           func(childComplexity int, input model.GetProjectSpecificationDetailInput) int
		GetProjectStateListForChanged           func(childComplexity int) int
		GetProjectSteel2BeChange                func(childComplexity int, input model.GetProjectSteel2BeChangeInput) int
		GetProjectSteel2BeChangeDetail          func(childComplexity int, input model.ProjectSteel2BeChangeInput) int
		GetProjectSteelDetail                   func(childComplexity int, input model.GetProjectSteelDetailInput) int
		GetProjectSteelStateList                func(childComplexity int) int
		GetRepositoryList                       func(childComplexity int) int
		GetRepositoryOverview                   func(childComplexity int, input model.GetRepositoryOverviewInput) int
		GetRepositorySteel                      func(childComplexity int, input model.GetRepositorySteelInput) int
		GetRepositorySteelDetail                func(childComplexity int, input model.GetRepositorySteelInput) int
		GetRoleList                             func(childComplexity int) int
		GetSend2WorkshopOrderList               func(childComplexity int) int
		GetSend2WorkshopOrderListDetail         func(childComplexity int, input model.GetProjectOrder2WorkshopDetailInput) int
		GetSpecification                        func(childComplexity int) int
		GetSteelList                            func(childComplexity int, input model.PaginationInput) int
		GetToBeEnterRepositoryDetail            func(childComplexity int, input model.GetToBeEnterRepositoryDetailInput) int
		GetToBeEnterRepositorySpecificationList func(childComplexity int, input model.GetToBeEnterRepositorySpecificationListInput) int
		GetToBeEnterRepositoryStateList         func(childComplexity int) int
		GetTobeSendWorkshopOrderList            func(childComplexity int) int
		IsAccessLocationCode                    func(childComplexity int, input model.IsAccessLocationCodeInput) int
	}

	RepositoryItem struct {
		Address func(childComplexity int) int
		City    func(childComplexity int) int
		ID      func(childComplexity int) int
		IsAble  func(childComplexity int) int
		Leaders func(childComplexity int) int
		Name    func(childComplexity int) int
		PinYin  func(childComplexity int) int
		Remark  func(childComplexity int) int
		Total   func(childComplexity int) int
		Weight  func(childComplexity int) int
	}

	RepositoryLeaderItem struct {
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
		Phone  func(childComplexity int) int
		Wechat func(childComplexity int) int
	}

	RoleItem struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
		Tag  func(childComplexity int) int
	}

	SpecificationItem struct {
		ID            func(childComplexity int) int
		IsDefault     func(childComplexity int) int
		Length        func(childComplexity int) int
		Specification func(childComplexity int) int
		Type          func(childComplexity int) int
		Weight        func(childComplexity int) int
	}

	StateItem struct {
		Desc  func(childComplexity int) int
		State func(childComplexity int) int
	}

	SteelInProject struct {
		EnterRepositoryAt func(childComplexity int) int
		EnterWorkshopAt   func(childComplexity int) int
		Id                func(childComplexity int) int
		InstallationAt    func(childComplexity int) int
		LocationCode      func(childComplexity int) int
		Order             func(childComplexity int) int
		OutRepositoryAt   func(childComplexity int) int
		OutWorkshopAt     func(childComplexity int) int
		ProjectName       func(childComplexity int) int
		Steel             func(childComplexity int) int
		UseDays           func(childComplexity int) int
	}

	SteelItem struct {
		Code                 func(childComplexity int) int
		CompanyId            func(childComplexity int) int
		CreateUser           func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		ID                   func(childComplexity int) int
		Identifier           func(childComplexity int) int
		Manufacturer         func(childComplexity int) int
		MaterialManufacturer func(childComplexity int) int
		ProducedDate         func(childComplexity int) int
		Repository           func(childComplexity int) int
		Specifcation         func(childComplexity int) int
		State                func(childComplexity int) int
		StateInfo            func(childComplexity int) int
		SteelInMaintenance   func(childComplexity int) int
		SteelInProject       func(childComplexity int) int
		TotalUsageRate       func(childComplexity int) int
		Turnover             func(childComplexity int) int
		UsageYearRate        func(childComplexity int) int
	}

	User struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	UserItem struct {
		Avatar  func(childComplexity int) int
		Company func(childComplexity int) int
		Id      func(childComplexity int) int
		IsAble  func(childComplexity int) int
		Name    func(childComplexity int) int
		Phone   func(childComplexity int) int
		Role    func(childComplexity int) int
		Wechat  func(childComplexity int) int
	}
}

type CompanyItemResolver interface {
	LogoFile(ctx context.Context, obj *companies.Companies) (*model.FileItem, error)
	BackgroundFile(ctx context.Context, obj *companies.Companies) (*model.FileItem, error)

	AdminName(ctx context.Context, obj *companies.Companies) (string, error)
	AdminPhone(ctx context.Context, obj *companies.Companies) (string, error)
	AdminWechat(ctx context.Context, obj *companies.Companies) (string, error)
	AdminAvatar(ctx context.Context, obj *companies.Companies) (*model.FileItem, error)
}
type DeviceItemResolver interface {
	UserInfo(ctx context.Context, obj *devices.Device) (*users.Users, error)
}
type MaintenanceItemResolver interface {
	Admin(ctx context.Context, obj *maintenance.Maintenance) ([]*users.Users, error)
	Total(ctx context.Context, obj *maintenance.Maintenance) (int64, error)
	WeightTotal(ctx context.Context, obj *maintenance.Maintenance) (float64, error)
}
type MaintenanceRecordItemResolver interface {
	Maintenance(ctx context.Context, obj *maintenance_record.MaintenanceRecord) (*maintenance.Maintenance, error)
	Steel(ctx context.Context, obj *maintenance_record.MaintenanceRecord) (*steels.Steels, error)
	StateInfo(ctx context.Context, obj *maintenance_record.MaintenanceRecord) (*steels.StateItem, error)
	UseDays(ctx context.Context, obj *maintenance_record.MaintenanceRecord) (*int64, error)
}
type MutationResolver interface {
	Login(ctx context.Context, phone string, password string, mac *string) (*model.LoginRes, error)
	CreateCompany(ctx context.Context, input model.CreateCompanyInput) (*companies.Companies, error)
	EditCompany(ctx context.Context, input model.EditCompanyInput) (*companies.Companies, error)
	DeleteCompany(ctx context.Context, id int64) (bool, error)
	CreateCompanyUser(ctx context.Context, input model.CreateCompanyUserInput) (*users.Users, error)
	EditCompanyUser(ctx context.Context, input *model.EditCompanyUserInput) (*users.Users, error)
	DeleteCompanyUser(ctx context.Context, uid int64) (bool, error)
	EditDevice(ctx context.Context, input model.EditDeviceInput) (bool, error)
	CreateExpress(ctx context.Context, input model.CreateExpressInput) (*codeinfo.CodeInfo, error)
	EditExpress(ctx context.Context, input model.EditExpressInput) (*codeinfo.CodeInfo, error)
	DeleteExpress(ctx context.Context, id int64) (bool, error)
	CreateMaintenance(ctx context.Context, input model.CreateMaintenanceInput) (*maintenance.Maintenance, error)
	EditMaintenance(ctx context.Context, input model.EditMaintenanceInput) (*maintenance.Maintenance, error)
	DelMaintenance(ctx context.Context, input model.DelMaintenanceInput) (bool, error)
	SetEnterMaintenance(ctx context.Context, input model.SetMaintenanceInput) ([]*maintenance_record.MaintenanceRecord, error)
	CreateManufacturer(ctx context.Context, input model.CreateManufacturerInput) (*codeinfo.CodeInfo, error)
	EditManufacturer(ctx context.Context, input model.EditManufacturerInput) (*codeinfo.CodeInfo, error)
	DeleteManufacturer(ctx context.Context, id int64) (bool, error)
	CreateMaterialManufacturer(ctx context.Context, input model.CreateMaterialManufacturerInput) (*codeinfo.CodeInfo, error)
	EditMaterialManufacturer(ctx context.Context, input model.EditMaterialManufacturerInput) (*codeinfo.CodeInfo, error)
	DeleteMaterialManufacturer(ctx context.Context, id int64) (bool, error)
	SetPassword(ctx context.Context, input *model.SetPasswordInput) (bool, error)
	SetSteelEnterWorkshop(ctx context.Context, input model.SetSteelIntoWorkshopInput) ([]*order_specification_steel.OrderSpecificationSteel, error)
	CreateOrder(ctx context.Context, input model.CreateOrderInput) (*orders.Order, error)
	ConfirmOrRejectOrder(ctx context.Context, input model.ConfirmOrderInput) (*orders.Order, error)
	SetProjectOrder2Workshop(ctx context.Context, input model.ProjectOrder2WorkshopInput) (*orders.Order, error)
	EditPrice(ctx context.Context, price float64) (float64, error)
	CreateProject(ctx context.Context, input model.CreateProjectInput) (*projects.Projects, error)
	InstallSteel(ctx context.Context, input model.InstallLocationInput) (bool, error)
	SetProjectSteelState(ctx context.Context, input model.SetProjectSteelInput) (bool, error)
	SetProjectSteelOutOfWorkshop(ctx context.Context, input model.SetProjectSteelOutOfWorkshopInput) (bool, error)
	SetProjectSteelEnterRepository(ctx context.Context, input model.SetProjectSteelEnterRepositoryInput) (bool, error)
	CreateRepository(ctx context.Context, input model.CreateRepositoryInput) (*repositories.Repositories, error)
	DeleteRepository(ctx context.Context, repositoryID int64) (bool, error)
	SetBatchOfRepositorySteel(ctx context.Context, input model.SetBatchOfRepositorySteelInput) ([]*steels.Steels, error)
	SetBatchOfRepositorySteelScrap(ctx context.Context, input model.SetBatchOfRepositorySteelScrapInput) ([]*steels.Steels, error)
	SetBatchOfMaintenanceSteel(ctx context.Context, input model.SetBatchOfMaintenanceSteelInput) ([]*steels.Steels, error)
	CreateSpecification(ctx context.Context, input model.CreateSpecificationInput) (*specificationinfo.SpecificationInfo, error)
	EditSpecification(ctx context.Context, input model.EditSpecificationInput) (*specificationinfo.SpecificationInfo, error)
	DeleteSpecification(ctx context.Context, id int64) (bool, error)
	CreateSteel(ctx context.Context, input model.CreateSteelInput) ([]*steels.Steels, error)
	SingleUpload(ctx context.Context, file graphql.Upload) (*model.FileItem, error)
}
type OrderExpressItemResolver interface {
	ExpressCompany(ctx context.Context, obj *order_express.OrderExpress) (*codeinfo.CodeInfo, error)

	Sender(ctx context.Context, obj *order_express.OrderExpress) (*users.Users, error)
	Receiver(ctx context.Context, obj *order_express.OrderExpress) (*users.Users, error)
}
type OrderItemResolver interface {
	Project(ctx context.Context, obj *orders.Order) (*projects.Projects, error)

	CreateUser(ctx context.Context, obj *orders.Order) (*users.Users, error)
	ConfirmedUser(ctx context.Context, obj *orders.Order) (*users.Users, error)
	ExpressList(ctx context.Context, obj *orders.Order) ([]*order_express.OrderExpress, error)

	Total(ctx context.Context, obj *orders.Order) (int64, error)
	Weight(ctx context.Context, obj *orders.Order) (float64, error)
	Repository(ctx context.Context, obj *orders.Order) (*repositories.Repositories, error)
	OrderSpecificationList(ctx context.Context, obj *orders.Order) ([]*order_specification.OrderSpecification, error)
}
type OrderSpecificationItemResolver interface {
	Order(ctx context.Context, obj *order_specification.OrderSpecification) (*orders.Order, error)

	SpecificationInfo(ctx context.Context, obj *order_specification.OrderSpecification) (*specificationinfo.SpecificationInfo, error)

	TotalSend(ctx context.Context, obj *order_specification.OrderSpecification) (int64, error)
	TotalToBeSend(ctx context.Context, obj *order_specification.OrderSpecification) (int64, error)
	StoreTotal(ctx context.Context, obj *order_specification.OrderSpecification) (int64, error)
	WorkshopReceiveTotal(ctx context.Context, obj *order_specification.OrderSpecification) (int64, error)
	Weight(ctx context.Context, obj *order_specification.OrderSpecification) (float64, error)
}
type OrderSpecificationSteelItemResolver interface {
	StateInfo(ctx context.Context, obj *order_specification_steel.OrderSpecificationSteel) (*steels.StateItem, error)
	Steel(ctx context.Context, obj *order_specification_steel.OrderSpecificationSteel) (*steels.Steels, error)
	OrderSpecification(ctx context.Context, obj *order_specification_steel.OrderSpecificationSteel) (*order_specification.OrderSpecification, error)
	ToWorkshopExpress(ctx context.Context, obj *order_specification_steel.OrderSpecificationSteel) (*codeinfo.CodeInfo, error)
	ToRepositoryExpress(ctx context.Context, obj *order_specification_steel.OrderSpecificationSteel) (*codeinfo.CodeInfo, error)

	EnterRepositoryUser(ctx context.Context, obj *order_specification_steel.OrderSpecificationSteel) (*users.Users, error)
}
type ProjectItemResolver interface {
	LeaderList(ctx context.Context, obj *projects.Projects) ([]*users.Users, error)

	Company(ctx context.Context, obj *projects.Projects) (*companies.Companies, error)
}
type QueryResolver interface {
	ErrorCodeDesc(ctx context.Context) (*model.GraphDesc, error)
	GetAllCompany(ctx context.Context) ([]*companies.Companies, error)
	GetCompanyUser(ctx context.Context, input *model.GetCompanyUserInput) ([]*users.Users, error)
	GetDeviceList(ctx context.Context) ([]*devices.Device, error)
	GetExpressList(ctx context.Context) ([]*codeinfo.CodeInfo, error)
	GetMaintenanceList(ctx context.Context) ([]*maintenance.Maintenance, error)
	GetEnterMaintenanceSteel(ctx context.Context, input model.EnterMaintenanceInput) (*maintenance_record.MaintenanceRecord, error)
	GetEnterMaintenanceSteelDetail(ctx context.Context, input model.GetEnterMaintenanceSteelDetailInput) (*maintenance.GetEnterMaintenanceSteelDetailRes, error)
	GetMaintenanceStateForChanged(ctx context.Context) ([]*steels.StateItem, error)
	GetChangedMaintenanceSteel(ctx context.Context, input model.GetChangedMaintenanceSteelInput) (*maintenance_record.MaintenanceRecord, error)
	GetManufacturers(ctx context.Context) ([]*codeinfo.CodeInfo, error)
	GetMaterialManufacturers(ctx context.Context) ([]*codeinfo.CodeInfo, error)
	GetMyInfo(ctx context.Context) (*users.Users, error)
	GetMsgList(ctx context.Context) ([]*msg.Msg, error)
	GetOrderList(ctx context.Context, input model.GetOrderListInput) ([]*orders.Order, error)
	GetTobeSendWorkshopOrderList(ctx context.Context) ([]*orders.Order, error)
	GetOrderDetail(ctx context.Context, input model.GetOrderDetailInput) (*orders.Order, error)
	GetProjectOrder2WorkshopDetail(ctx context.Context, input model.ProjectOrder2WorkshopDetailInput) (*projects.GetProjectOrder2WorkshopDetailRes, error)
	GetSend2WorkshopOrderList(ctx context.Context) ([]*orders.Order, error)
	GetSend2WorkshopOrderListDetail(ctx context.Context, input model.GetProjectOrder2WorkshopDetailInput) (*projects.GetSend2WorkshopOrderListDetailRes, error)
	GetProjectSteelStateList(ctx context.Context) ([]*steels.StateItem, error)
	GetPrice(ctx context.Context) (float64, error)
	GetProjectLis(ctx context.Context) ([]*projects.Projects, error)
	GetProjectSpecificationDetail(ctx context.Context, input model.GetProjectSpecificationDetailInput) (*projects.GetProjectSpecificationDetailRes, error)
	GetProjectSteelDetail(ctx context.Context, input model.GetProjectSteelDetailInput) (*projects.GetProjectSteelDetailRes, error)
	GetMaxLocationCode(ctx context.Context, input model.GetMaxLocationCodeInput) (int64, error)
	IsAccessLocationCode(ctx context.Context, input model.IsAccessLocationCodeInput) (bool, error)
	GetProjectSteel2BeChangeDetail(ctx context.Context, input model.ProjectSteel2BeChangeInput) (*projects.GetProjectSteel2BeChangeDetailRes, error)
	GetProjectSteel2BeChange(ctx context.Context, input model.GetProjectSteel2BeChangeInput) (*order_specification_steel.OrderSpecificationSteel, error)
	GetOutOfWorkshopProjectList(ctx context.Context) ([]*projects.Projects, error)
	GetOutOfWorkshopProjectSteelDetail(ctx context.Context, input model.GetOutOfWorkshopProjectSteelDetail) (*projects.GetOutOfWorkshopProjectSteelDetailRes, error)
	GetOrderSteelDetail(ctx context.Context, input model.GetOrderSteelDetailInput) (*order_specification_steel.OrderSpecificationSteel, error)
	GetProjectStateListForChanged(ctx context.Context) ([]*steels.StateItem, error)
	GetEnterRepositoryProjectList(ctx context.Context) ([]*projects.Projects, error)
	GetEnterRepositorySteelDetail(ctx context.Context, input model.GetEnterRepositorySteelDetailInput) (*projects.GetEnterRepositorySteelDetailRes, error)
	GetToBeEnterRepositoryStateList(ctx context.Context) ([]*steels.StateItem, error)
	GetToBeEnterRepositorySpecificationList(ctx context.Context, input model.GetToBeEnterRepositorySpecificationListInput) ([]*specificationinfo.SpecificationInfo, error)
	GetToBeEnterRepositoryDetail(ctx context.Context, input model.GetToBeEnterRepositoryDetailInput) ([]*order_specification_steel.OrderSpecificationSteel, error)
	GetRepositoryList(ctx context.Context) ([]*repositories.Repositories, error)
	GetRepositoryOverview(ctx context.Context, input model.GetRepositoryOverviewInput) (*repositories.GetRepositoryOverviewRes, error)
	GetAllStateList(ctx context.Context) ([]*steels.StateItem, error)
	GetRepositorySteel(ctx context.Context, input model.GetRepositorySteelInput) (*repositories.GetRepositorySteelRes, error)
	GetRepositorySteelDetail(ctx context.Context, input model.GetRepositorySteelInput) (*steels.GetRepositorySteelDetailRes, error)
	Get2BeChangedRepositorySteel(ctx context.Context, input model.Get2BeChangedRepositorySteelInput) (*steels.Steels, error)
	Get2BeChangedRepositorySteelDetail(ctx context.Context, input model.Get2BeChangedRepositorySteelDetailInput) (*steels.Get2BeChangedRepositorySteelDetailRes, error)
	Get2BeScrapRepositorySteel(ctx context.Context, input model.Get2BeScrapRepositorySteelInput) (*steels.Steels, error)
	Get2BeScrapRepositorySteelDetail(ctx context.Context, input model.Get2BeScrapRepositorySteelDetailInput) (*steels.Get2BeScrapRepositorySteelDetailRes, error)
	Get2BeMaintainSteel(ctx context.Context, input model.Get2BeMaintainSteelInput) (*steels.Steels, error)
	Get2BeMaintainSteelDetail(ctx context.Context, input model.Get2BeMaintainSteelDetailInput) (*steels.Get2BeScrapRepositorySteelDetailRes, error)
	GetRoleList(ctx context.Context) ([]*roles.Role, error)
	GetSpecification(ctx context.Context) ([]*specificationinfo.SpecificationInfo, error)
	GetSteelList(ctx context.Context, input model.PaginationInput) (*steels.GetSteelListRes, error)
	GetOneSteelDetail(ctx context.Context, input model.GetOneSteelDetailInput) (*steels.Steels, error)
	GetMultipleSteelDetail(ctx context.Context, input *model.GetMultipleSteelDetailInput) ([]*steels.Steels, error)
}
type RepositoryItemResolver interface {
	Leaders(ctx context.Context, obj *repositories.Repositories) ([]*users.Users, error)
}
type SpecificationItemResolver interface {
	Specification(ctx context.Context, obj *specificationinfo.SpecificationInfo) (string, error)
}
type SteelInProjectResolver interface {
	Steel(ctx context.Context, obj *order_specification_steel.OrderSpecificationSteel) (*steels.Steels, error)

	Order(ctx context.Context, obj *order_specification_steel.OrderSpecificationSteel) (*orders.Order, error)

	UseDays(ctx context.Context, obj *order_specification_steel.OrderSpecificationSteel) (*int64, error)
	ProjectName(ctx context.Context, obj *order_specification_steel.OrderSpecificationSteel) (string, error)
}
type SteelItemResolver interface {
	CreateUser(ctx context.Context, obj *steels.Steels) (*users.Users, error)

	StateInfo(ctx context.Context, obj *steels.Steels) (*steels.StateItem, error)

	Repository(ctx context.Context, obj *steels.Steels) (*repositories.Repositories, error)
	MaterialManufacturer(ctx context.Context, obj *steels.Steels) (*codeinfo.CodeInfo, error)
	Manufacturer(ctx context.Context, obj *steels.Steels) (*codeinfo.CodeInfo, error)

	Specifcation(ctx context.Context, obj *steels.Steels) (*specificationinfo.SpecificationInfo, error)
	SteelInProject(ctx context.Context, obj *steels.Steels) ([]*order_specification_steel.OrderSpecificationSteel, error)
	SteelInMaintenance(ctx context.Context, obj *steels.Steels) ([]*maintenance_record.MaintenanceRecord, error)
}
type UserItemResolver interface {
	Role(ctx context.Context, obj *users.Users) (*roles.Role, error)

	Avatar(ctx context.Context, obj *users.Users) (*model.FileItem, error)

	Company(ctx context.Context, obj *users.Users) (*companies.Companies, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "CompanyItem.adminAvatar":
		if e.complexity.CompanyItem.AdminAvatar == nil {
			break
		}

		return e.complexity.CompanyItem.AdminAvatar(childComplexity), true

	case "CompanyItem.adminName":
		if e.complexity.CompanyItem.AdminName == nil {
			break
		}

		return e.complexity.CompanyItem.AdminName(childComplexity), true

	case "CompanyItem.adminPhone":
		if e.complexity.CompanyItem.AdminPhone == nil {
			break
		}

		return e.complexity.CompanyItem.AdminPhone(childComplexity), true

	case "CompanyItem.adminWechat":
		if e.complexity.CompanyItem.AdminWechat == nil {
			break
		}

		return e.complexity.CompanyItem.AdminWechat(childComplexity), true

	case "CompanyItem.backgroundFile":
		if e.complexity.CompanyItem.BackgroundFile == nil {
			break
		}

		return e.complexity.CompanyItem.BackgroundFile(childComplexity), true

	case "CompanyItem.createdAt":
		if e.complexity.CompanyItem.CreatedAt == nil {
			break
		}

		return e.complexity.CompanyItem.CreatedAt(childComplexity), true

	case "CompanyItem.endedAt":
		if e.complexity.CompanyItem.EndedAt == nil {
			break
		}

		return e.complexity.CompanyItem.EndedAt(childComplexity), true

	case "CompanyItem.id":
		if e.complexity.CompanyItem.ID == nil {
			break
		}

		return e.complexity.CompanyItem.ID(childComplexity), true

	case "CompanyItem.isAble":
		if e.complexity.CompanyItem.IsAble == nil {
			break
		}

		return e.complexity.CompanyItem.IsAble(childComplexity), true

	case "CompanyItem.logoFile":
		if e.complexity.CompanyItem.LogoFile == nil {
			break
		}

		return e.complexity.CompanyItem.LogoFile(childComplexity), true

	case "CompanyItem.name":
		if e.complexity.CompanyItem.Name == nil {
			break
		}

		return e.complexity.CompanyItem.Name(childComplexity), true

	case "CompanyItem.phone":
		if e.complexity.CompanyItem.Phone == nil {
			break
		}

		return e.complexity.CompanyItem.Phone(childComplexity), true

	case "CompanyItem.pinYin":
		if e.complexity.CompanyItem.PinYin == nil {
			break
		}

		return e.complexity.CompanyItem.PinYin(childComplexity), true

	case "CompanyItem.startedAt":
		if e.complexity.CompanyItem.StartedAt == nil {
			break
		}

		return e.complexity.CompanyItem.StartedAt(childComplexity), true

	case "CompanyItem.symbol":
		if e.complexity.CompanyItem.Symbol == nil {
			break
		}

		return e.complexity.CompanyItem.Symbol(childComplexity), true

	case "CompanyItem.wechat":
		if e.complexity.CompanyItem.Wechat == nil {
			break
		}

		return e.complexity.CompanyItem.Wechat(childComplexity), true

	case "DeviceItem.id":
		if e.complexity.DeviceItem.ID == nil {
			break
		}

		return e.complexity.DeviceItem.ID(childComplexity), true

	case "DeviceItem.isAble":
		if e.complexity.DeviceItem.IsAble == nil {
			break
		}

		return e.complexity.DeviceItem.IsAble(childComplexity), true

	case "DeviceItem.mac":
		if e.complexity.DeviceItem.Mac == nil {
			break
		}

		return e.complexity.DeviceItem.Mac(childComplexity), true

	case "DeviceItem.userInfo":
		if e.complexity.DeviceItem.UserInfo == nil {
			break
		}

		return e.complexity.DeviceItem.UserInfo(childComplexity), true

	case "ErrCodes.code":
		if e.complexity.ErrCodes.Code == nil {
			break
		}

		return e.complexity.ErrCodes.Code(childComplexity), true

	case "ErrCodes.desc":
		if e.complexity.ErrCodes.Desc == nil {
			break
		}

		return e.complexity.ErrCodes.Desc(childComplexity), true

	case "ExpressCompanyItem.id":
		if e.complexity.ExpressCompanyItem.ID == nil {
			break
		}

		return e.complexity.ExpressCompanyItem.ID(childComplexity), true

	case "ExpressCompanyItem.isDefault":
		if e.complexity.ExpressCompanyItem.IsDefault == nil {
			break
		}

		return e.complexity.ExpressCompanyItem.IsDefault(childComplexity), true

	case "ExpressCompanyItem.name":
		if e.complexity.ExpressCompanyItem.Name == nil {
			break
		}

		return e.complexity.ExpressCompanyItem.Name(childComplexity), true

	case "ExpressCompanyItem.remark":
		if e.complexity.ExpressCompanyItem.Remark == nil {
			break
		}

		return e.complexity.ExpressCompanyItem.Remark(childComplexity), true

	case "ExpressItem.id":
		if e.complexity.ExpressItem.ID == nil {
			break
		}

		return e.complexity.ExpressItem.ID(childComplexity), true

	case "ExpressItem.isDefault":
		if e.complexity.ExpressItem.IsDefault == nil {
			break
		}

		return e.complexity.ExpressItem.IsDefault(childComplexity), true

	case "ExpressItem.name":
		if e.complexity.ExpressItem.Name == nil {
			break
		}

		return e.complexity.ExpressItem.Name(childComplexity), true

	case "ExpressItem.remark":
		if e.complexity.ExpressItem.Remark == nil {
			break
		}

		return e.complexity.ExpressItem.Remark(childComplexity), true

	case "FileItem.id":
		if e.complexity.FileItem.ID == nil {
			break
		}

		return e.complexity.FileItem.ID(childComplexity), true

	case "FileItem.url":
		if e.complexity.FileItem.URL == nil {
			break
		}

		return e.complexity.FileItem.URL(childComplexity), true

	case "Get2BeChangedRepositorySteelDetailRes.list":
		if e.complexity.Get2BeChangedRepositorySteelDetailRes.List == nil {
			break
		}

		return e.complexity.Get2BeChangedRepositorySteelDetailRes.List(childComplexity), true

	case "Get2BeChangedRepositorySteelDetailRes.total":
		if e.complexity.Get2BeChangedRepositorySteelDetailRes.Total == nil {
			break
		}

		return e.complexity.Get2BeChangedRepositorySteelDetailRes.Total(childComplexity), true

	case "Get2BeChangedRepositorySteelDetailRes.weight":
		if e.complexity.Get2BeChangedRepositorySteelDetailRes.Weight == nil {
			break
		}

		return e.complexity.Get2BeChangedRepositorySteelDetailRes.Weight(childComplexity), true

	case "Get2BeScrapRepositorySteelDetailRes.list":
		if e.complexity.Get2BeScrapRepositorySteelDetailRes.List == nil {
			break
		}

		return e.complexity.Get2BeScrapRepositorySteelDetailRes.List(childComplexity), true

	case "Get2BeScrapRepositorySteelDetailRes.total":
		if e.complexity.Get2BeScrapRepositorySteelDetailRes.Total == nil {
			break
		}

		return e.complexity.Get2BeScrapRepositorySteelDetailRes.Total(childComplexity), true

	case "Get2BeScrapRepositorySteelDetailRes.weight":
		if e.complexity.Get2BeScrapRepositorySteelDetailRes.Weight == nil {
			break
		}

		return e.complexity.Get2BeScrapRepositorySteelDetailRes.Weight(childComplexity), true

	case "GetEnterMaintenanceSteelDetailRes.list":
		if e.complexity.GetEnterMaintenanceSteelDetailRes.List == nil {
			break
		}

		return e.complexity.GetEnterMaintenanceSteelDetailRes.List(childComplexity), true

	case "GetEnterMaintenanceSteelDetailRes.total":
		if e.complexity.GetEnterMaintenanceSteelDetailRes.Total == nil {
			break
		}

		return e.complexity.GetEnterMaintenanceSteelDetailRes.Total(childComplexity), true

	case "GetEnterMaintenanceSteelDetailRes.weight":
		if e.complexity.GetEnterMaintenanceSteelDetailRes.Weight == nil {
			break
		}

		return e.complexity.GetEnterMaintenanceSteelDetailRes.Weight(childComplexity), true

	case "GetEnterRepositorySteelDetailRes.orderSteel":
		if e.complexity.GetEnterRepositorySteelDetailRes.OrderSteel == nil {
			break
		}

		return e.complexity.GetEnterRepositorySteelDetailRes.OrderSteel(childComplexity), true

	case "GetEnterRepositorySteelDetailRes.storedTotal":
		if e.complexity.GetEnterRepositorySteelDetailRes.StoredTotal == nil {
			break
		}

		return e.complexity.GetEnterRepositorySteelDetailRes.StoredTotal(childComplexity), true

	case "GetEnterRepositorySteelDetailRes.toBeStoreTotal":
		if e.complexity.GetEnterRepositorySteelDetailRes.ToBeStoreTotal == nil {
			break
		}

		return e.complexity.GetEnterRepositorySteelDetailRes.ToBeStoreTotal(childComplexity), true

	case "GetOutOfWorkshopProjectSteelDetailRes.orderSteel":
		if e.complexity.GetOutOfWorkshopProjectSteelDetailRes.OrderSteel == nil {
			break
		}

		return e.complexity.GetOutOfWorkshopProjectSteelDetailRes.OrderSteel(childComplexity), true

	case "GetOutOfWorkshopProjectSteelDetailRes.storeTotal":
		if e.complexity.GetOutOfWorkshopProjectSteelDetailRes.StoreTotal == nil {
			break
		}

		return e.complexity.GetOutOfWorkshopProjectSteelDetailRes.StoreTotal(childComplexity), true

	case "GetOutOfWorkshopProjectSteelDetailRes.toBeStoreTotal":
		if e.complexity.GetOutOfWorkshopProjectSteelDetailRes.ToBeStoreTotal == nil {
			break
		}

		return e.complexity.GetOutOfWorkshopProjectSteelDetailRes.ToBeStoreTotal(childComplexity), true

	case "GetProjectOrder2WorkshopDetailRes.list":
		if e.complexity.GetProjectOrder2WorkshopDetailRes.List == nil {
			break
		}

		return e.complexity.GetProjectOrder2WorkshopDetailRes.List(childComplexity), true

	case "GetProjectOrder2WorkshopDetailRes.total":
		if e.complexity.GetProjectOrder2WorkshopDetailRes.Total == nil {
			break
		}

		return e.complexity.GetProjectOrder2WorkshopDetailRes.Total(childComplexity), true

	case "GetProjectOrder2WorkshopDetailRes.totalWeight":
		if e.complexity.GetProjectOrder2WorkshopDetailRes.TotalWeight == nil {
			break
		}

		return e.complexity.GetProjectOrder2WorkshopDetailRes.TotalWeight(childComplexity), true

	case "GetProjectSpecificationDetailRes.list":
		if e.complexity.GetProjectSpecificationDetailRes.List == nil {
			break
		}

		return e.complexity.GetProjectSpecificationDetailRes.List(childComplexity), true

	case "GetProjectSpecificationDetailRes.total":
		if e.complexity.GetProjectSpecificationDetailRes.Total == nil {
			break
		}

		return e.complexity.GetProjectSpecificationDetailRes.Total(childComplexity), true

	case "GetProjectSpecificationDetailRes.weight":
		if e.complexity.GetProjectSpecificationDetailRes.Weight == nil {
			break
		}

		return e.complexity.GetProjectSpecificationDetailRes.Weight(childComplexity), true

	case "GetProjectSteel2BeChangeDetailRes.list":
		if e.complexity.GetProjectSteel2BeChangeDetailRes.List == nil {
			break
		}

		return e.complexity.GetProjectSteel2BeChangeDetailRes.List(childComplexity), true

	case "GetProjectSteel2BeChangeDetailRes.total":
		if e.complexity.GetProjectSteel2BeChangeDetailRes.Total == nil {
			break
		}

		return e.complexity.GetProjectSteel2BeChangeDetailRes.Total(childComplexity), true

	case "GetProjectSteel2BeChangeDetailRes.weightTotal":
		if e.complexity.GetProjectSteel2BeChangeDetailRes.WeightTotal == nil {
			break
		}

		return e.complexity.GetProjectSteel2BeChangeDetailRes.WeightTotal(childComplexity), true

	case "GetProjectSteelDetailRes.list":
		if e.complexity.GetProjectSteelDetailRes.List == nil {
			break
		}

		return e.complexity.GetProjectSteelDetailRes.List(childComplexity), true

	case "GetProjectSteelDetailRes.total":
		if e.complexity.GetProjectSteelDetailRes.Total == nil {
			break
		}

		return e.complexity.GetProjectSteelDetailRes.Total(childComplexity), true

	case "GetProjectSteelDetailRes.weight":
		if e.complexity.GetProjectSteelDetailRes.Weight == nil {
			break
		}

		return e.complexity.GetProjectSteelDetailRes.Weight(childComplexity), true

	case "GetRepositoryOverviewRes.total":
		if e.complexity.GetRepositoryOverviewRes.Total == nil {
			break
		}

		return e.complexity.GetRepositoryOverviewRes.Total(childComplexity), true

	case "GetRepositoryOverviewRes.weight":
		if e.complexity.GetRepositoryOverviewRes.Weight == nil {
			break
		}

		return e.complexity.GetRepositoryOverviewRes.Weight(childComplexity), true

	case "GetRepositorySteelDetailRes.list":
		if e.complexity.GetRepositorySteelDetailRes.List == nil {
			break
		}

		return e.complexity.GetRepositorySteelDetailRes.List(childComplexity), true

	case "GetRepositorySteelDetailRes.total":
		if e.complexity.GetRepositorySteelDetailRes.Total == nil {
			break
		}

		return e.complexity.GetRepositorySteelDetailRes.Total(childComplexity), true

	case "GetRepositorySteelDetailRes.weight":
		if e.complexity.GetRepositorySteelDetailRes.Weight == nil {
			break
		}

		return e.complexity.GetRepositorySteelDetailRes.Weight(childComplexity), true

	case "GetRepositorySteelListItemRes.specificationInfo":
		if e.complexity.GetRepositorySteelListItemRes.SpecificationInfo == nil {
			break
		}

		return e.complexity.GetRepositorySteelListItemRes.SpecificationInfo(childComplexity), true

	case "GetRepositorySteelListItemRes.total":
		if e.complexity.GetRepositorySteelListItemRes.Total == nil {
			break
		}

		return e.complexity.GetRepositorySteelListItemRes.Total(childComplexity), true

	case "GetRepositorySteelListItemRes.weight":
		if e.complexity.GetRepositorySteelListItemRes.Weight == nil {
			break
		}

		return e.complexity.GetRepositorySteelListItemRes.Weight(childComplexity), true

	case "GetRepositorySteelRes.list":
		if e.complexity.GetRepositorySteelRes.List == nil {
			break
		}

		return e.complexity.GetRepositorySteelRes.List(childComplexity), true

	case "GetRepositorySteelRes.total":
		if e.complexity.GetRepositorySteelRes.Total == nil {
			break
		}

		return e.complexity.GetRepositorySteelRes.Total(childComplexity), true

	case "GetRepositorySteelRes.weight":
		if e.complexity.GetRepositorySteelRes.Weight == nil {
			break
		}

		return e.complexity.GetRepositorySteelRes.Weight(childComplexity), true

	case "GetSend2WorkshopOrderListDetailRes.list":
		if e.complexity.GetSend2WorkshopOrderListDetailRes.List == nil {
			break
		}

		return e.complexity.GetSend2WorkshopOrderListDetailRes.List(childComplexity), true

	case "GetSend2WorkshopOrderListDetailRes.total":
		if e.complexity.GetSend2WorkshopOrderListDetailRes.Total == nil {
			break
		}

		return e.complexity.GetSend2WorkshopOrderListDetailRes.Total(childComplexity), true

	case "GetSend2WorkshopOrderListDetailRes.totalWeight":
		if e.complexity.GetSend2WorkshopOrderListDetailRes.TotalWeight == nil {
			break
		}

		return e.complexity.GetSend2WorkshopOrderListDetailRes.TotalWeight(childComplexity), true

	case "GetSteelListRes.list":
		if e.complexity.GetSteelListRes.List == nil {
			break
		}

		return e.complexity.GetSteelListRes.List(childComplexity), true

	case "GetSteelListRes.total":
		if e.complexity.GetSteelListRes.Total == nil {
			break
		}

		return e.complexity.GetSteelListRes.Total(childComplexity), true

	case "GraphDesc.desc":
		if e.complexity.GraphDesc.Desc == nil {
			break
		}

		return e.complexity.GraphDesc.Desc(childComplexity), true

	case "GraphDesc.errCodes":
		if e.complexity.GraphDesc.ErrCodes == nil {
			break
		}

		return e.complexity.GraphDesc.ErrCodes(childComplexity), true

	case "GraphDesc.title":
		if e.complexity.GraphDesc.Title == nil {
			break
		}

		return e.complexity.GraphDesc.Title(childComplexity), true

	case "LoginRes.accessToken":
		if e.complexity.LoginRes.AccessToken == nil {
			break
		}

		return e.complexity.LoginRes.AccessToken(childComplexity), true

	case "LoginRes.expired":
		if e.complexity.LoginRes.Expired == nil {
			break
		}

		return e.complexity.LoginRes.Expired(childComplexity), true

	case "LoginRes.role":
		if e.complexity.LoginRes.Role == nil {
			break
		}

		return e.complexity.LoginRes.Role(childComplexity), true

	case "LoginRes.roleName":
		if e.complexity.LoginRes.RoleName == nil {
			break
		}

		return e.complexity.LoginRes.RoleName(childComplexity), true

	case "MaintenanceItem.address":
		if e.complexity.MaintenanceItem.Address == nil {
			break
		}

		return e.complexity.MaintenanceItem.Address(childComplexity), true

	case "MaintenanceItem.admin":
		if e.complexity.MaintenanceItem.Admin == nil {
			break
		}

		return e.complexity.MaintenanceItem.Admin(childComplexity), true

	case "MaintenanceItem.id":
		if e.complexity.MaintenanceItem.Id == nil {
			break
		}

		return e.complexity.MaintenanceItem.Id(childComplexity), true

	case "MaintenanceItem.isAble":
		if e.complexity.MaintenanceItem.IsAble == nil {
			break
		}

		return e.complexity.MaintenanceItem.IsAble(childComplexity), true

	case "MaintenanceItem.name":
		if e.complexity.MaintenanceItem.Name == nil {
			break
		}

		return e.complexity.MaintenanceItem.Name(childComplexity), true

	case "MaintenanceItem.remark":
		if e.complexity.MaintenanceItem.Remark == nil {
			break
		}

		return e.complexity.MaintenanceItem.Remark(childComplexity), true

	case "MaintenanceItem.total":
		if e.complexity.MaintenanceItem.Total == nil {
			break
		}

		return e.complexity.MaintenanceItem.Total(childComplexity), true

	case "MaintenanceItem.weightTotal":
		if e.complexity.MaintenanceItem.WeightTotal == nil {
			break
		}

		return e.complexity.MaintenanceItem.WeightTotal(childComplexity), true

	case "MaintenanceRecordItem.enterRepositoryAt":
		if e.complexity.MaintenanceRecordItem.EnterRepositoryAt == nil {
			break
		}

		return e.complexity.MaintenanceRecordItem.EnterRepositoryAt(childComplexity), true

	case "MaintenanceRecordItem.enteredAt":
		if e.complexity.MaintenanceRecordItem.EnteredAt == nil {
			break
		}

		return e.complexity.MaintenanceRecordItem.EnteredAt(childComplexity), true

	case "MaintenanceRecordItem.id":
		if e.complexity.MaintenanceRecordItem.Id == nil {
			break
		}

		return e.complexity.MaintenanceRecordItem.Id(childComplexity), true

	case "MaintenanceRecordItem.maintenance":
		if e.complexity.MaintenanceRecordItem.Maintenance == nil {
			break
		}

		return e.complexity.MaintenanceRecordItem.Maintenance(childComplexity), true

	case "MaintenanceRecordItem.outRepositoryAt":
		if e.complexity.MaintenanceRecordItem.OutRepositoryAt == nil {
			break
		}

		return e.complexity.MaintenanceRecordItem.OutRepositoryAt(childComplexity), true

	case "MaintenanceRecordItem.outedAt":
		if e.complexity.MaintenanceRecordItem.OutedAt == nil {
			break
		}

		return e.complexity.MaintenanceRecordItem.OutedAt(childComplexity), true

	case "MaintenanceRecordItem.stateInfo":
		if e.complexity.MaintenanceRecordItem.StateInfo == nil {
			break
		}

		return e.complexity.MaintenanceRecordItem.StateInfo(childComplexity), true

	case "MaintenanceRecordItem.steel":
		if e.complexity.MaintenanceRecordItem.Steel == nil {
			break
		}

		return e.complexity.MaintenanceRecordItem.Steel(childComplexity), true

	case "MaintenanceRecordItem.useDays":
		if e.complexity.MaintenanceRecordItem.UseDays == nil {
			break
		}

		return e.complexity.MaintenanceRecordItem.UseDays(childComplexity), true

	case "ManufacturerItem.id":
		if e.complexity.ManufacturerItem.ID == nil {
			break
		}

		return e.complexity.ManufacturerItem.ID(childComplexity), true

	case "ManufacturerItem.isDefault":
		if e.complexity.ManufacturerItem.IsDefault == nil {
			break
		}

		return e.complexity.ManufacturerItem.IsDefault(childComplexity), true

	case "ManufacturerItem.name":
		if e.complexity.ManufacturerItem.Name == nil {
			break
		}

		return e.complexity.ManufacturerItem.Name(childComplexity), true

	case "ManufacturerItem.remark":
		if e.complexity.ManufacturerItem.Remark == nil {
			break
		}

		return e.complexity.ManufacturerItem.Remark(childComplexity), true

	case "MaterialManufacturerItem.id":
		if e.complexity.MaterialManufacturerItem.ID == nil {
			break
		}

		return e.complexity.MaterialManufacturerItem.ID(childComplexity), true

	case "MaterialManufacturerItem.isDefault":
		if e.complexity.MaterialManufacturerItem.IsDefault == nil {
			break
		}

		return e.complexity.MaterialManufacturerItem.IsDefault(childComplexity), true

	case "MaterialManufacturerItem.name":
		if e.complexity.MaterialManufacturerItem.Name == nil {
			break
		}

		return e.complexity.MaterialManufacturerItem.Name(childComplexity), true

	case "MaterialManufacturerItem.remark":
		if e.complexity.MaterialManufacturerItem.Remark == nil {
			break
		}

		return e.complexity.MaterialManufacturerItem.Remark(childComplexity), true

	case "MsgItem.content":
		if e.complexity.MsgItem.Content == nil {
			break
		}

		return e.complexity.MsgItem.Content(childComplexity), true

	case "MsgItem.createdAt":
		if e.complexity.MsgItem.CreatedAt == nil {
			break
		}

		return e.complexity.MsgItem.CreatedAt(childComplexity), true

	case "MsgItem.id":
		if e.complexity.MsgItem.Id == nil {
			break
		}

		return e.complexity.MsgItem.Id(childComplexity), true

	case "MsgItem.isRead":
		if e.complexity.MsgItem.IsRead == nil {
			break
		}

		return e.complexity.MsgItem.IsRead(childComplexity), true

	case "Mutation.confirmOrRejectOrder":
		if e.complexity.Mutation.ConfirmOrRejectOrder == nil {
			break
		}

		args, err := ec.field_Mutation_confirmOrRejectOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfirmOrRejectOrder(childComplexity, args["input"].(model.ConfirmOrderInput)), true

	case "Mutation.createCompany":
		if e.complexity.Mutation.CreateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_createCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompany(childComplexity, args["input"].(model.CreateCompanyInput)), true

	case "Mutation.createCompanyUser":
		if e.complexity.Mutation.CreateCompanyUser == nil {
			break
		}

		args, err := ec.field_Mutation_createCompanyUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompanyUser(childComplexity, args["input"].(model.CreateCompanyUserInput)), true

	case "Mutation.createExpress":
		if e.complexity.Mutation.CreateExpress == nil {
			break
		}

		args, err := ec.field_Mutation_createExpress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateExpress(childComplexity, args["input"].(model.CreateExpressInput)), true

	case "Mutation.createMaintenance":
		if e.complexity.Mutation.CreateMaintenance == nil {
			break
		}

		args, err := ec.field_Mutation_createMaintenance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMaintenance(childComplexity, args["input"].(model.CreateMaintenanceInput)), true

	case "Mutation.createManufacturer":
		if e.complexity.Mutation.CreateManufacturer == nil {
			break
		}

		args, err := ec.field_Mutation_createManufacturer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateManufacturer(childComplexity, args["input"].(model.CreateManufacturerInput)), true

	case "Mutation.createMaterialManufacturer":
		if e.complexity.Mutation.CreateMaterialManufacturer == nil {
			break
		}

		args, err := ec.field_Mutation_createMaterialManufacturer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMaterialManufacturer(childComplexity, args["input"].(model.CreateMaterialManufacturerInput)), true

	case "Mutation.createOrder":
		if e.complexity.Mutation.CreateOrder == nil {
			break
		}

		args, err := ec.field_Mutation_createOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrder(childComplexity, args["input"].(model.CreateOrderInput)), true

	case "Mutation.createProject":
		if e.complexity.Mutation.CreateProject == nil {
			break
		}

		args, err := ec.field_Mutation_createProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProject(childComplexity, args["input"].(model.CreateProjectInput)), true

	case "Mutation.createRepository":
		if e.complexity.Mutation.CreateRepository == nil {
			break
		}

		args, err := ec.field_Mutation_createRepository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRepository(childComplexity, args["input"].(model.CreateRepositoryInput)), true

	case "Mutation.createSpecification":
		if e.complexity.Mutation.CreateSpecification == nil {
			break
		}

		args, err := ec.field_Mutation_createSpecification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSpecification(childComplexity, args["input"].(model.CreateSpecificationInput)), true

	case "Mutation.createSteel":
		if e.complexity.Mutation.CreateSteel == nil {
			break
		}

		args, err := ec.field_Mutation_createSteel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSteel(childComplexity, args["input"].(model.CreateSteelInput)), true

	case "Mutation.delMaintenance":
		if e.complexity.Mutation.DelMaintenance == nil {
			break
		}

		args, err := ec.field_Mutation_delMaintenance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelMaintenance(childComplexity, args["input"].(model.DelMaintenanceInput)), true

	case "Mutation.deleteCompany":
		if e.complexity.Mutation.DeleteCompany == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompany(childComplexity, args["id"].(int64)), true

	case "Mutation.deleteCompanyUser":
		if e.complexity.Mutation.DeleteCompanyUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompanyUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompanyUser(childComplexity, args["uid"].(int64)), true

	case "Mutation.deleteExpress":
		if e.complexity.Mutation.DeleteExpress == nil {
			break
		}

		args, err := ec.field_Mutation_deleteExpress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteExpress(childComplexity, args["id"].(int64)), true

	case "Mutation.deleteManufacturer":
		if e.complexity.Mutation.DeleteManufacturer == nil {
			break
		}

		args, err := ec.field_Mutation_deleteManufacturer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteManufacturer(childComplexity, args["id"].(int64)), true

	case "Mutation.deleteMaterialManufacturer":
		if e.complexity.Mutation.DeleteMaterialManufacturer == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMaterialManufacturer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMaterialManufacturer(childComplexity, args["id"].(int64)), true

	case "Mutation.deleteRepository":
		if e.complexity.Mutation.DeleteRepository == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRepository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRepository(childComplexity, args["repositoryId"].(int64)), true

	case "Mutation.deleteSpecification":
		if e.complexity.Mutation.DeleteSpecification == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSpecification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSpecification(childComplexity, args["id"].(int64)), true

	case "Mutation.editCompany":
		if e.complexity.Mutation.EditCompany == nil {
			break
		}

		args, err := ec.field_Mutation_editCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditCompany(childComplexity, args["input"].(model.EditCompanyInput)), true

	case "Mutation.editCompanyUser":
		if e.complexity.Mutation.EditCompanyUser == nil {
			break
		}

		args, err := ec.field_Mutation_editCompanyUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditCompanyUser(childComplexity, args["input"].(*model.EditCompanyUserInput)), true

	case "Mutation.editDevice":
		if e.complexity.Mutation.EditDevice == nil {
			break
		}

		args, err := ec.field_Mutation_editDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditDevice(childComplexity, args["input"].(model.EditDeviceInput)), true

	case "Mutation.editExpress":
		if e.complexity.Mutation.EditExpress == nil {
			break
		}

		args, err := ec.field_Mutation_editExpress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditExpress(childComplexity, args["input"].(model.EditExpressInput)), true

	case "Mutation.editMaintenance":
		if e.complexity.Mutation.EditMaintenance == nil {
			break
		}

		args, err := ec.field_Mutation_editMaintenance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditMaintenance(childComplexity, args["input"].(model.EditMaintenanceInput)), true

	case "Mutation.editManufacturer":
		if e.complexity.Mutation.EditManufacturer == nil {
			break
		}

		args, err := ec.field_Mutation_editManufacturer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditManufacturer(childComplexity, args["input"].(model.EditManufacturerInput)), true

	case "Mutation.editMaterialManufacturer":
		if e.complexity.Mutation.EditMaterialManufacturer == nil {
			break
		}

		args, err := ec.field_Mutation_editMaterialManufacturer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditMaterialManufacturer(childComplexity, args["input"].(model.EditMaterialManufacturerInput)), true

	case "Mutation.editPrice":
		if e.complexity.Mutation.EditPrice == nil {
			break
		}

		args, err := ec.field_Mutation_editPrice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditPrice(childComplexity, args["price"].(float64)), true

	case "Mutation.editSpecification":
		if e.complexity.Mutation.EditSpecification == nil {
			break
		}

		args, err := ec.field_Mutation_editSpecification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditSpecification(childComplexity, args["input"].(model.EditSpecificationInput)), true

	case "Mutation.installSteel":
		if e.complexity.Mutation.InstallSteel == nil {
			break
		}

		args, err := ec.field_Mutation_installSteel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InstallSteel(childComplexity, args["input"].(model.InstallLocationInput)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["phone"].(string), args["password"].(string), args["mac"].(*string)), true

	case "Mutation.setBatchOfMaintenanceSteel":
		if e.complexity.Mutation.SetBatchOfMaintenanceSteel == nil {
			break
		}

		args, err := ec.field_Mutation_setBatchOfMaintenanceSteel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetBatchOfMaintenanceSteel(childComplexity, args["input"].(model.SetBatchOfMaintenanceSteelInput)), true

	case "Mutation.setBatchOfRepositorySteel":
		if e.complexity.Mutation.SetBatchOfRepositorySteel == nil {
			break
		}

		args, err := ec.field_Mutation_setBatchOfRepositorySteel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetBatchOfRepositorySteel(childComplexity, args["input"].(model.SetBatchOfRepositorySteelInput)), true

	case "Mutation.setBatchOfRepositorySteelScrap":
		if e.complexity.Mutation.SetBatchOfRepositorySteelScrap == nil {
			break
		}

		args, err := ec.field_Mutation_setBatchOfRepositorySteelScrap_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetBatchOfRepositorySteelScrap(childComplexity, args["input"].(model.SetBatchOfRepositorySteelScrapInput)), true

	case "Mutation.setEnterMaintenance":
		if e.complexity.Mutation.SetEnterMaintenance == nil {
			break
		}

		args, err := ec.field_Mutation_setEnterMaintenance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetEnterMaintenance(childComplexity, args["input"].(model.SetMaintenanceInput)), true

	case "Mutation.setPassword":
		if e.complexity.Mutation.SetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_setPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetPassword(childComplexity, args["input"].(*model.SetPasswordInput)), true

	case "Mutation.setProjectOrder2Workshop":
		if e.complexity.Mutation.SetProjectOrder2Workshop == nil {
			break
		}

		args, err := ec.field_Mutation_setProjectOrder2Workshop_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetProjectOrder2Workshop(childComplexity, args["input"].(model.ProjectOrder2WorkshopInput)), true

	case "Mutation.setProjectSteelEnterRepository":
		if e.complexity.Mutation.SetProjectSteelEnterRepository == nil {
			break
		}

		args, err := ec.field_Mutation_setProjectSteelEnterRepository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetProjectSteelEnterRepository(childComplexity, args["input"].(model.SetProjectSteelEnterRepositoryInput)), true

	case "Mutation.setProjectSteelOutOfWorkshop":
		if e.complexity.Mutation.SetProjectSteelOutOfWorkshop == nil {
			break
		}

		args, err := ec.field_Mutation_setProjectSteelOutOfWorkshop_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetProjectSteelOutOfWorkshop(childComplexity, args["input"].(model.SetProjectSteelOutOfWorkshopInput)), true

	case "Mutation.setProjectSteelState":
		if e.complexity.Mutation.SetProjectSteelState == nil {
			break
		}

		args, err := ec.field_Mutation_setProjectSteelState_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetProjectSteelState(childComplexity, args["input"].(model.SetProjectSteelInput)), true

	case "Mutation.setSteelEnterWorkshop":
		if e.complexity.Mutation.SetSteelEnterWorkshop == nil {
			break
		}

		args, err := ec.field_Mutation_setSteelEnterWorkshop_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetSteelEnterWorkshop(childComplexity, args["input"].(model.SetSteelIntoWorkshopInput)), true

	case "Mutation.singleUpload":
		if e.complexity.Mutation.SingleUpload == nil {
			break
		}

		args, err := ec.field_Mutation_singleUpload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SingleUpload(childComplexity, args["file"].(graphql.Upload)), true

	case "OrderExpressItem.createdAt":
		if e.complexity.OrderExpressItem.CreatedAt == nil {
			break
		}

		return e.complexity.OrderExpressItem.CreatedAt(childComplexity), true

	case "OrderExpressItem.direction":
		if e.complexity.OrderExpressItem.Direction == nil {
			break
		}

		return e.complexity.OrderExpressItem.Direction(childComplexity), true

	case "OrderExpressItem.expressCompany":
		if e.complexity.OrderExpressItem.ExpressCompany == nil {
			break
		}

		return e.complexity.OrderExpressItem.ExpressCompany(childComplexity), true

	case "OrderExpressItem.expressNo":
		if e.complexity.OrderExpressItem.ExpressNo == nil {
			break
		}

		return e.complexity.OrderExpressItem.ExpressNo(childComplexity), true

	case "OrderExpressItem.id":
		if e.complexity.OrderExpressItem.Id == nil {
			break
		}

		return e.complexity.OrderExpressItem.Id(childComplexity), true

	case "OrderExpressItem.receiveAt":
		if e.complexity.OrderExpressItem.ReceiveAt == nil {
			break
		}

		return e.complexity.OrderExpressItem.ReceiveAt(childComplexity), true

	case "OrderExpressItem.receiver":
		if e.complexity.OrderExpressItem.Receiver == nil {
			break
		}

		return e.complexity.OrderExpressItem.Receiver(childComplexity), true

	case "OrderExpressItem.sender":
		if e.complexity.OrderExpressItem.Sender == nil {
			break
		}

		return e.complexity.OrderExpressItem.Sender(childComplexity), true

	case "OrderItem.confirmedAt":
		if e.complexity.OrderItem.ConfirmedAt == nil {
			break
		}

		return e.complexity.OrderItem.ConfirmedAt(childComplexity), true

	case "OrderItem.confirmedUser":
		if e.complexity.OrderItem.ConfirmedUser == nil {
			break
		}

		return e.complexity.OrderItem.ConfirmedUser(childComplexity), true

	case "OrderItem.createUser":
		if e.complexity.OrderItem.CreateUser == nil {
			break
		}

		return e.complexity.OrderItem.CreateUser(childComplexity), true

	case "OrderItem.createdAt":
		if e.complexity.OrderItem.CreatedAt == nil {
			break
		}

		return e.complexity.OrderItem.CreatedAt(childComplexity), true

	case "OrderItem.expectedReturnAt":
		if e.complexity.OrderItem.ExpectedReturnAt == nil {
			break
		}

		return e.complexity.OrderItem.ExpectedReturnAt(childComplexity), true

	case "OrderItem.expressList":
		if e.complexity.OrderItem.ExpressList == nil {
			break
		}

		return e.complexity.OrderItem.ExpressList(childComplexity), true

	case "OrderItem.id":
		if e.complexity.OrderItem.Id == nil {
			break
		}

		return e.complexity.OrderItem.Id(childComplexity), true

	case "OrderItem.orderNo":
		if e.complexity.OrderItem.OrderNo == nil {
			break
		}

		return e.complexity.OrderItem.OrderNo(childComplexity), true

	case "OrderItem.orderSpecificationList":
		if e.complexity.OrderItem.OrderSpecificationList == nil {
			break
		}

		return e.complexity.OrderItem.OrderSpecificationList(childComplexity), true

	case "OrderItem.partList":
		if e.complexity.OrderItem.PartList == nil {
			break
		}

		return e.complexity.OrderItem.PartList(childComplexity), true

	case "OrderItem.project":
		if e.complexity.OrderItem.Project == nil {
			break
		}

		return e.complexity.OrderItem.Project(childComplexity), true

	case "OrderItem.remark":
		if e.complexity.OrderItem.Remark == nil {
			break
		}

		return e.complexity.OrderItem.Remark(childComplexity), true

	case "OrderItem.repository":
		if e.complexity.OrderItem.Repository == nil {
			break
		}

		return e.complexity.OrderItem.Repository(childComplexity), true

	case "OrderItem.state":
		if e.complexity.OrderItem.State == nil {
			break
		}

		return e.complexity.OrderItem.State(childComplexity), true

	case "OrderItem.total":
		if e.complexity.OrderItem.Total == nil {
			break
		}

		return e.complexity.OrderItem.Total(childComplexity), true

	case "OrderItem.weight":
		if e.complexity.OrderItem.Weight == nil {
			break
		}

		return e.complexity.OrderItem.Weight(childComplexity), true

	case "OrderSpecificationItem.id":
		if e.complexity.OrderSpecificationItem.Id == nil {
			break
		}

		return e.complexity.OrderSpecificationItem.Id(childComplexity), true

	case "OrderSpecificationItem.order":
		if e.complexity.OrderSpecificationItem.Order == nil {
			break
		}

		return e.complexity.OrderSpecificationItem.Order(childComplexity), true

	case "OrderSpecificationItem.specification":
		if e.complexity.OrderSpecificationItem.Specification == nil {
			break
		}

		return e.complexity.OrderSpecificationItem.Specification(childComplexity), true

	case "OrderSpecificationItem.specificationInfo":
		if e.complexity.OrderSpecificationItem.SpecificationInfo == nil {
			break
		}

		return e.complexity.OrderSpecificationItem.SpecificationInfo(childComplexity), true

	case "OrderSpecificationItem.storeTotal":
		if e.complexity.OrderSpecificationItem.StoreTotal == nil {
			break
		}

		return e.complexity.OrderSpecificationItem.StoreTotal(childComplexity), true

	case "OrderSpecificationItem.total":
		if e.complexity.OrderSpecificationItem.Total == nil {
			break
		}

		return e.complexity.OrderSpecificationItem.Total(childComplexity), true

	case "OrderSpecificationItem.totalSend":
		if e.complexity.OrderSpecificationItem.TotalSend == nil {
			break
		}

		return e.complexity.OrderSpecificationItem.TotalSend(childComplexity), true

	case "OrderSpecificationItem.totalToBeSend":
		if e.complexity.OrderSpecificationItem.TotalToBeSend == nil {
			break
		}

		return e.complexity.OrderSpecificationItem.TotalToBeSend(childComplexity), true

	case "OrderSpecificationItem.weight":
		if e.complexity.OrderSpecificationItem.Weight == nil {
			break
		}

		return e.complexity.OrderSpecificationItem.Weight(childComplexity), true

	case "OrderSpecificationItem.workshopReceiveTotal":
		if e.complexity.OrderSpecificationItem.WorkshopReceiveTotal == nil {
			break
		}

		return e.complexity.OrderSpecificationItem.WorkshopReceiveTotal(childComplexity), true

	case "OrderSpecificationSteelItem.EnterRepositoryAt":
		if e.complexity.OrderSpecificationSteelItem.EnterRepositoryAt == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.EnterRepositoryAt(childComplexity), true

	case "OrderSpecificationSteelItem.enterRepositoryUser":
		if e.complexity.OrderSpecificationSteelItem.EnterRepositoryUser == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.EnterRepositoryUser(childComplexity), true

	case "OrderSpecificationSteelItem.enterWorkshopAt":
		if e.complexity.OrderSpecificationSteelItem.EnterWorkshopAt == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.EnterWorkshopAt(childComplexity), true

	case "OrderSpecificationSteelItem.id":
		if e.complexity.OrderSpecificationSteelItem.Id == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.Id(childComplexity), true

	case "OrderSpecificationSteelItem.installationAt":
		if e.complexity.OrderSpecificationSteelItem.InstallationAt == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.InstallationAt(childComplexity), true

	case "OrderSpecificationSteelItem.locationCode":
		if e.complexity.OrderSpecificationSteelItem.LocationCode == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.LocationCode(childComplexity), true

	case "OrderSpecificationSteelItem.orderSpecification":
		if e.complexity.OrderSpecificationSteelItem.OrderSpecification == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.OrderSpecification(childComplexity), true

	case "OrderSpecificationSteelItem.outRepositoryAt":
		if e.complexity.OrderSpecificationSteelItem.OutRepositoryAt == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.OutRepositoryAt(childComplexity), true

	case "OrderSpecificationSteelItem.outWorkshopAt":
		if e.complexity.OrderSpecificationSteelItem.OutWorkshopAt == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.OutWorkshopAt(childComplexity), true

	case "OrderSpecificationSteelItem.stateInfo":
		if e.complexity.OrderSpecificationSteelItem.StateInfo == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.StateInfo(childComplexity), true

	case "OrderSpecificationSteelItem.steel":
		if e.complexity.OrderSpecificationSteelItem.Steel == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.Steel(childComplexity), true

	case "OrderSpecificationSteelItem.toRepositoryExpress":
		if e.complexity.OrderSpecificationSteelItem.ToRepositoryExpress == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.ToRepositoryExpress(childComplexity), true

	case "OrderSpecificationSteelItem.toWorkshopExpress":
		if e.complexity.OrderSpecificationSteelItem.ToWorkshopExpress == nil {
			break
		}

		return e.complexity.OrderSpecificationSteelItem.ToWorkshopExpress(childComplexity), true

	case "ProjectItem.address":
		if e.complexity.ProjectItem.Address == nil {
			break
		}

		return e.complexity.ProjectItem.Address(childComplexity), true

	case "ProjectItem.city":
		if e.complexity.ProjectItem.City == nil {
			break
		}

		return e.complexity.ProjectItem.City(childComplexity), true

	case "ProjectItem.company":
		if e.complexity.ProjectItem.Company == nil {
			break
		}

		return e.complexity.ProjectItem.Company(childComplexity), true

	case "ProjectItem.endedAt":
		if e.complexity.ProjectItem.EndedAt == nil {
			break
		}

		return e.complexity.ProjectItem.EndedAt(childComplexity), true

	case "ProjectItem.id":
		if e.complexity.ProjectItem.ID == nil {
			break
		}

		return e.complexity.ProjectItem.ID(childComplexity), true

	case "ProjectItem.leaderList":
		if e.complexity.ProjectItem.LeaderList == nil {
			break
		}

		return e.complexity.ProjectItem.LeaderList(childComplexity), true

	case "ProjectItem.name":
		if e.complexity.ProjectItem.Name == nil {
			break
		}

		return e.complexity.ProjectItem.Name(childComplexity), true

	case "ProjectItem.remark":
		if e.complexity.ProjectItem.Remark == nil {
			break
		}

		return e.complexity.ProjectItem.Remark(childComplexity), true

	case "ProjectItem.startedAt":
		if e.complexity.ProjectItem.StartedAt == nil {
			break
		}

		return e.complexity.ProjectItem.StartedAt(childComplexity), true

	case "Query.errorCodeDesc":
		if e.complexity.Query.ErrorCodeDesc == nil {
			break
		}

		return e.complexity.Query.ErrorCodeDesc(childComplexity), true

	case "Query.get2BeChangedRepositorySteel":
		if e.complexity.Query.Get2BeChangedRepositorySteel == nil {
			break
		}

		args, err := ec.field_Query_get2BeChangedRepositorySteel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Get2BeChangedRepositorySteel(childComplexity, args["input"].(model.Get2BeChangedRepositorySteelInput)), true

	case "Query.get2BeChangedRepositorySteelDetail":
		if e.complexity.Query.Get2BeChangedRepositorySteelDetail == nil {
			break
		}

		args, err := ec.field_Query_get2BeChangedRepositorySteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Get2BeChangedRepositorySteelDetail(childComplexity, args["input"].(model.Get2BeChangedRepositorySteelDetailInput)), true

	case "Query.get2BeMaintainSteel":
		if e.complexity.Query.Get2BeMaintainSteel == nil {
			break
		}

		args, err := ec.field_Query_get2BeMaintainSteel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Get2BeMaintainSteel(childComplexity, args["input"].(model.Get2BeMaintainSteelInput)), true

	case "Query.get2BeMaintainSteelDetail":
		if e.complexity.Query.Get2BeMaintainSteelDetail == nil {
			break
		}

		args, err := ec.field_Query_get2BeMaintainSteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Get2BeMaintainSteelDetail(childComplexity, args["input"].(model.Get2BeMaintainSteelDetailInput)), true

	case "Query.get2BeScrapRepositorySteel":
		if e.complexity.Query.Get2BeScrapRepositorySteel == nil {
			break
		}

		args, err := ec.field_Query_get2BeScrapRepositorySteel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Get2BeScrapRepositorySteel(childComplexity, args["input"].(model.Get2BeScrapRepositorySteelInput)), true

	case "Query.get2BeScrapRepositorySteelDetail":
		if e.complexity.Query.Get2BeScrapRepositorySteelDetail == nil {
			break
		}

		args, err := ec.field_Query_get2BeScrapRepositorySteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Get2BeScrapRepositorySteelDetail(childComplexity, args["input"].(model.Get2BeScrapRepositorySteelDetailInput)), true

	case "Query.getAllCompany":
		if e.complexity.Query.GetAllCompany == nil {
			break
		}

		return e.complexity.Query.GetAllCompany(childComplexity), true

	case "Query.getAllStateList":
		if e.complexity.Query.GetAllStateList == nil {
			break
		}

		return e.complexity.Query.GetAllStateList(childComplexity), true

	case "Query.getChangedMaintenanceSteel":
		if e.complexity.Query.GetChangedMaintenanceSteel == nil {
			break
		}

		args, err := ec.field_Query_getChangedMaintenanceSteel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetChangedMaintenanceSteel(childComplexity, args["input"].(model.GetChangedMaintenanceSteelInput)), true

	case "Query.getCompanyUser":
		if e.complexity.Query.GetCompanyUser == nil {
			break
		}

		args, err := ec.field_Query_getCompanyUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompanyUser(childComplexity, args["input"].(*model.GetCompanyUserInput)), true

	case "Query.getDeviceList":
		if e.complexity.Query.GetDeviceList == nil {
			break
		}

		return e.complexity.Query.GetDeviceList(childComplexity), true

	case "Query.getEnterMaintenanceSteel":
		if e.complexity.Query.GetEnterMaintenanceSteel == nil {
			break
		}

		args, err := ec.field_Query_getEnterMaintenanceSteel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEnterMaintenanceSteel(childComplexity, args["input"].(model.EnterMaintenanceInput)), true

	case "Query.getEnterMaintenanceSteelDetail":
		if e.complexity.Query.GetEnterMaintenanceSteelDetail == nil {
			break
		}

		args, err := ec.field_Query_getEnterMaintenanceSteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEnterMaintenanceSteelDetail(childComplexity, args["input"].(model.GetEnterMaintenanceSteelDetailInput)), true

	case "Query.getEnterRepositoryProjectList":
		if e.complexity.Query.GetEnterRepositoryProjectList == nil {
			break
		}

		return e.complexity.Query.GetEnterRepositoryProjectList(childComplexity), true

	case "Query.getEnterRepositorySteelDetail":
		if e.complexity.Query.GetEnterRepositorySteelDetail == nil {
			break
		}

		args, err := ec.field_Query_getEnterRepositorySteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEnterRepositorySteelDetail(childComplexity, args["input"].(model.GetEnterRepositorySteelDetailInput)), true

	case "Query.getExpressList":
		if e.complexity.Query.GetExpressList == nil {
			break
		}

		return e.complexity.Query.GetExpressList(childComplexity), true

	case "Query.getMaintenanceList":
		if e.complexity.Query.GetMaintenanceList == nil {
			break
		}

		return e.complexity.Query.GetMaintenanceList(childComplexity), true

	case "Query.getMaintenanceStateForChanged":
		if e.complexity.Query.GetMaintenanceStateForChanged == nil {
			break
		}

		return e.complexity.Query.GetMaintenanceStateForChanged(childComplexity), true

	case "Query.getManufacturers":
		if e.complexity.Query.GetManufacturers == nil {
			break
		}

		return e.complexity.Query.GetManufacturers(childComplexity), true

	case "Query.getMaterialManufacturers":
		if e.complexity.Query.GetMaterialManufacturers == nil {
			break
		}

		return e.complexity.Query.GetMaterialManufacturers(childComplexity), true

	case "Query.getMaxLocationCode":
		if e.complexity.Query.GetMaxLocationCode == nil {
			break
		}

		args, err := ec.field_Query_getMaxLocationCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMaxLocationCode(childComplexity, args["input"].(model.GetMaxLocationCodeInput)), true

	case "Query.getMsgList":
		if e.complexity.Query.GetMsgList == nil {
			break
		}

		return e.complexity.Query.GetMsgList(childComplexity), true

	case "Query.getMultipleSteelDetail":
		if e.complexity.Query.GetMultipleSteelDetail == nil {
			break
		}

		args, err := ec.field_Query_getMultipleSteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMultipleSteelDetail(childComplexity, args["input"].(*model.GetMultipleSteelDetailInput)), true

	case "Query.getMyInfo":
		if e.complexity.Query.GetMyInfo == nil {
			break
		}

		return e.complexity.Query.GetMyInfo(childComplexity), true

	case "Query.getOneSteelDetail":
		if e.complexity.Query.GetOneSteelDetail == nil {
			break
		}

		args, err := ec.field_Query_getOneSteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOneSteelDetail(childComplexity, args["input"].(model.GetOneSteelDetailInput)), true

	case "Query.getOrderDetail":
		if e.complexity.Query.GetOrderDetail == nil {
			break
		}

		args, err := ec.field_Query_getOrderDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOrderDetail(childComplexity, args["input"].(model.GetOrderDetailInput)), true

	case "Query.getOrderList":
		if e.complexity.Query.GetOrderList == nil {
			break
		}

		args, err := ec.field_Query_getOrderList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOrderList(childComplexity, args["input"].(model.GetOrderListInput)), true

	case "Query.getOrderSteelDetail":
		if e.complexity.Query.GetOrderSteelDetail == nil {
			break
		}

		args, err := ec.field_Query_getOrderSteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOrderSteelDetail(childComplexity, args["input"].(model.GetOrderSteelDetailInput)), true

	case "Query.getOutOfWorkshopProjectList":
		if e.complexity.Query.GetOutOfWorkshopProjectList == nil {
			break
		}

		return e.complexity.Query.GetOutOfWorkshopProjectList(childComplexity), true

	case "Query.getOutOfWorkshopProjectSteelDetail":
		if e.complexity.Query.GetOutOfWorkshopProjectSteelDetail == nil {
			break
		}

		args, err := ec.field_Query_getOutOfWorkshopProjectSteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOutOfWorkshopProjectSteelDetail(childComplexity, args["input"].(model.GetOutOfWorkshopProjectSteelDetail)), true

	case "Query.getPrice":
		if e.complexity.Query.GetPrice == nil {
			break
		}

		return e.complexity.Query.GetPrice(childComplexity), true

	case "Query.getProjectLis":
		if e.complexity.Query.GetProjectLis == nil {
			break
		}

		return e.complexity.Query.GetProjectLis(childComplexity), true

	case "Query.getProjectOrder2WorkshopDetail":
		if e.complexity.Query.GetProjectOrder2WorkshopDetail == nil {
			break
		}

		args, err := ec.field_Query_getProjectOrder2WorkshopDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProjectOrder2WorkshopDetail(childComplexity, args["input"].(model.ProjectOrder2WorkshopDetailInput)), true

	case "Query.getProjectSpecificationDetail":
		if e.complexity.Query.GetProjectSpecificationDetail == nil {
			break
		}

		args, err := ec.field_Query_getProjectSpecificationDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProjectSpecificationDetail(childComplexity, args["input"].(model.GetProjectSpecificationDetailInput)), true

	case "Query.getProjectStateListForChanged":
		if e.complexity.Query.GetProjectStateListForChanged == nil {
			break
		}

		return e.complexity.Query.GetProjectStateListForChanged(childComplexity), true

	case "Query.getProjectSteel2BeChange":
		if e.complexity.Query.GetProjectSteel2BeChange == nil {
			break
		}

		args, err := ec.field_Query_getProjectSteel2BeChange_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProjectSteel2BeChange(childComplexity, args["input"].(model.GetProjectSteel2BeChangeInput)), true

	case "Query.getProjectSteel2BeChangeDetail":
		if e.complexity.Query.GetProjectSteel2BeChangeDetail == nil {
			break
		}

		args, err := ec.field_Query_getProjectSteel2BeChangeDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProjectSteel2BeChangeDetail(childComplexity, args["input"].(model.ProjectSteel2BeChangeInput)), true

	case "Query.getProjectSteelDetail":
		if e.complexity.Query.GetProjectSteelDetail == nil {
			break
		}

		args, err := ec.field_Query_getProjectSteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProjectSteelDetail(childComplexity, args["input"].(model.GetProjectSteelDetailInput)), true

	case "Query.getProjectSteelStateList":
		if e.complexity.Query.GetProjectSteelStateList == nil {
			break
		}

		return e.complexity.Query.GetProjectSteelStateList(childComplexity), true

	case "Query.getRepositoryList":
		if e.complexity.Query.GetRepositoryList == nil {
			break
		}

		return e.complexity.Query.GetRepositoryList(childComplexity), true

	case "Query.getRepositoryOverview":
		if e.complexity.Query.GetRepositoryOverview == nil {
			break
		}

		args, err := ec.field_Query_getRepositoryOverview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRepositoryOverview(childComplexity, args["input"].(model.GetRepositoryOverviewInput)), true

	case "Query.getRepositorySteel":
		if e.complexity.Query.GetRepositorySteel == nil {
			break
		}

		args, err := ec.field_Query_getRepositorySteel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRepositorySteel(childComplexity, args["input"].(model.GetRepositorySteelInput)), true

	case "Query.getRepositorySteelDetail":
		if e.complexity.Query.GetRepositorySteelDetail == nil {
			break
		}

		args, err := ec.field_Query_getRepositorySteelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRepositorySteelDetail(childComplexity, args["input"].(model.GetRepositorySteelInput)), true

	case "Query.getRoleList":
		if e.complexity.Query.GetRoleList == nil {
			break
		}

		return e.complexity.Query.GetRoleList(childComplexity), true

	case "Query.getSend2WorkshopOrderList":
		if e.complexity.Query.GetSend2WorkshopOrderList == nil {
			break
		}

		return e.complexity.Query.GetSend2WorkshopOrderList(childComplexity), true

	case "Query.getSend2WorkshopOrderListDetail":
		if e.complexity.Query.GetSend2WorkshopOrderListDetail == nil {
			break
		}

		args, err := ec.field_Query_getSend2WorkshopOrderListDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSend2WorkshopOrderListDetail(childComplexity, args["input"].(model.GetProjectOrder2WorkshopDetailInput)), true

	case "Query.getSpecification":
		if e.complexity.Query.GetSpecification == nil {
			break
		}

		return e.complexity.Query.GetSpecification(childComplexity), true

	case "Query.getSteelList":
		if e.complexity.Query.GetSteelList == nil {
			break
		}

		args, err := ec.field_Query_getSteelList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSteelList(childComplexity, args["input"].(model.PaginationInput)), true

	case "Query.getToBeEnterRepositoryDetail":
		if e.complexity.Query.GetToBeEnterRepositoryDetail == nil {
			break
		}

		args, err := ec.field_Query_getToBeEnterRepositoryDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetToBeEnterRepositoryDetail(childComplexity, args["input"].(model.GetToBeEnterRepositoryDetailInput)), true

	case "Query.getToBeEnterRepositorySpecificationList":
		if e.complexity.Query.GetToBeEnterRepositorySpecificationList == nil {
			break
		}

		args, err := ec.field_Query_getToBeEnterRepositorySpecificationList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetToBeEnterRepositorySpecificationList(childComplexity, args["input"].(model.GetToBeEnterRepositorySpecificationListInput)), true

	case "Query.getToBeEnterRepositoryStateList":
		if e.complexity.Query.GetToBeEnterRepositoryStateList == nil {
			break
		}

		return e.complexity.Query.GetToBeEnterRepositoryStateList(childComplexity), true

	case "Query.getTobeSendWorkshopOrderList":
		if e.complexity.Query.GetTobeSendWorkshopOrderList == nil {
			break
		}

		return e.complexity.Query.GetTobeSendWorkshopOrderList(childComplexity), true

	case "Query.isAccessLocationCode":
		if e.complexity.Query.IsAccessLocationCode == nil {
			break
		}

		args, err := ec.field_Query_isAccessLocationCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IsAccessLocationCode(childComplexity, args["input"].(model.IsAccessLocationCodeInput)), true

	case "RepositoryItem.address":
		if e.complexity.RepositoryItem.Address == nil {
			break
		}

		return e.complexity.RepositoryItem.Address(childComplexity), true

	case "RepositoryItem.city":
		if e.complexity.RepositoryItem.City == nil {
			break
		}

		return e.complexity.RepositoryItem.City(childComplexity), true

	case "RepositoryItem.id":
		if e.complexity.RepositoryItem.ID == nil {
			break
		}

		return e.complexity.RepositoryItem.ID(childComplexity), true

	case "RepositoryItem.isAble":
		if e.complexity.RepositoryItem.IsAble == nil {
			break
		}

		return e.complexity.RepositoryItem.IsAble(childComplexity), true

	case "RepositoryItem.leaders":
		if e.complexity.RepositoryItem.Leaders == nil {
			break
		}

		return e.complexity.RepositoryItem.Leaders(childComplexity), true

	case "RepositoryItem.name":
		if e.complexity.RepositoryItem.Name == nil {
			break
		}

		return e.complexity.RepositoryItem.Name(childComplexity), true

	case "RepositoryItem.pinYin":
		if e.complexity.RepositoryItem.PinYin == nil {
			break
		}

		return e.complexity.RepositoryItem.PinYin(childComplexity), true

	case "RepositoryItem.remark":
		if e.complexity.RepositoryItem.Remark == nil {
			break
		}

		return e.complexity.RepositoryItem.Remark(childComplexity), true

	case "RepositoryItem.total":
		if e.complexity.RepositoryItem.Total == nil {
			break
		}

		return e.complexity.RepositoryItem.Total(childComplexity), true

	case "RepositoryItem.weight":
		if e.complexity.RepositoryItem.Weight == nil {
			break
		}

		return e.complexity.RepositoryItem.Weight(childComplexity), true

	case "RepositoryLeaderItem.id":
		if e.complexity.RepositoryLeaderItem.ID == nil {
			break
		}

		return e.complexity.RepositoryLeaderItem.ID(childComplexity), true

	case "RepositoryLeaderItem.name":
		if e.complexity.RepositoryLeaderItem.Name == nil {
			break
		}

		return e.complexity.RepositoryLeaderItem.Name(childComplexity), true

	case "RepositoryLeaderItem.phone":
		if e.complexity.RepositoryLeaderItem.Phone == nil {
			break
		}

		return e.complexity.RepositoryLeaderItem.Phone(childComplexity), true

	case "RepositoryLeaderItem.wechat":
		if e.complexity.RepositoryLeaderItem.Wechat == nil {
			break
		}

		return e.complexity.RepositoryLeaderItem.Wechat(childComplexity), true

	case "RoleItem.id":
		if e.complexity.RoleItem.ID == nil {
			break
		}

		return e.complexity.RoleItem.ID(childComplexity), true

	case "RoleItem.name":
		if e.complexity.RoleItem.Name == nil {
			break
		}

		return e.complexity.RoleItem.Name(childComplexity), true

	case "RoleItem.tag":
		if e.complexity.RoleItem.Tag == nil {
			break
		}

		return e.complexity.RoleItem.Tag(childComplexity), true

	case "SpecificationItem.id":
		if e.complexity.SpecificationItem.ID == nil {
			break
		}

		return e.complexity.SpecificationItem.ID(childComplexity), true

	case "SpecificationItem.isDefault":
		if e.complexity.SpecificationItem.IsDefault == nil {
			break
		}

		return e.complexity.SpecificationItem.IsDefault(childComplexity), true

	case "SpecificationItem.length":
		if e.complexity.SpecificationItem.Length == nil {
			break
		}

		return e.complexity.SpecificationItem.Length(childComplexity), true

	case "SpecificationItem.specification":
		if e.complexity.SpecificationItem.Specification == nil {
			break
		}

		return e.complexity.SpecificationItem.Specification(childComplexity), true

	case "SpecificationItem.type":
		if e.complexity.SpecificationItem.Type == nil {
			break
		}

		return e.complexity.SpecificationItem.Type(childComplexity), true

	case "SpecificationItem.weight":
		if e.complexity.SpecificationItem.Weight == nil {
			break
		}

		return e.complexity.SpecificationItem.Weight(childComplexity), true

	case "StateItem.desc":
		if e.complexity.StateItem.Desc == nil {
			break
		}

		return e.complexity.StateItem.Desc(childComplexity), true

	case "StateItem.state":
		if e.complexity.StateItem.State == nil {
			break
		}

		return e.complexity.StateItem.State(childComplexity), true

	case "SteelInProject.enterRepositoryAt":
		if e.complexity.SteelInProject.EnterRepositoryAt == nil {
			break
		}

		return e.complexity.SteelInProject.EnterRepositoryAt(childComplexity), true

	case "SteelInProject.enterWorkshopAt":
		if e.complexity.SteelInProject.EnterWorkshopAt == nil {
			break
		}

		return e.complexity.SteelInProject.EnterWorkshopAt(childComplexity), true

	case "SteelInProject.id":
		if e.complexity.SteelInProject.Id == nil {
			break
		}

		return e.complexity.SteelInProject.Id(childComplexity), true

	case "SteelInProject.installationAt":
		if e.complexity.SteelInProject.InstallationAt == nil {
			break
		}

		return e.complexity.SteelInProject.InstallationAt(childComplexity), true

	case "SteelInProject.locationCode":
		if e.complexity.SteelInProject.LocationCode == nil {
			break
		}

		return e.complexity.SteelInProject.LocationCode(childComplexity), true

	case "SteelInProject.order":
		if e.complexity.SteelInProject.Order == nil {
			break
		}

		return e.complexity.SteelInProject.Order(childComplexity), true

	case "SteelInProject.outRepositoryAt":
		if e.complexity.SteelInProject.OutRepositoryAt == nil {
			break
		}

		return e.complexity.SteelInProject.OutRepositoryAt(childComplexity), true

	case "SteelInProject.outWorkshopAt":
		if e.complexity.SteelInProject.OutWorkshopAt == nil {
			break
		}

		return e.complexity.SteelInProject.OutWorkshopAt(childComplexity), true

	case "SteelInProject.projectName":
		if e.complexity.SteelInProject.ProjectName == nil {
			break
		}

		return e.complexity.SteelInProject.ProjectName(childComplexity), true

	case "SteelInProject.steel":
		if e.complexity.SteelInProject.Steel == nil {
			break
		}

		return e.complexity.SteelInProject.Steel(childComplexity), true

	case "SteelInProject.useDays":
		if e.complexity.SteelInProject.UseDays == nil {
			break
		}

		return e.complexity.SteelInProject.UseDays(childComplexity), true

	case "SteelItem.code":
		if e.complexity.SteelItem.Code == nil {
			break
		}

		return e.complexity.SteelItem.Code(childComplexity), true

	case "SteelItem.companyId":
		if e.complexity.SteelItem.CompanyId == nil {
			break
		}

		return e.complexity.SteelItem.CompanyId(childComplexity), true

	case "SteelItem.createUser":
		if e.complexity.SteelItem.CreateUser == nil {
			break
		}

		return e.complexity.SteelItem.CreateUser(childComplexity), true

	case "SteelItem.createdAt":
		if e.complexity.SteelItem.CreatedAt == nil {
			break
		}

		return e.complexity.SteelItem.CreatedAt(childComplexity), true

	case "SteelItem.id":
		if e.complexity.SteelItem.ID == nil {
			break
		}

		return e.complexity.SteelItem.ID(childComplexity), true

	case "SteelItem.identifier":
		if e.complexity.SteelItem.Identifier == nil {
			break
		}

		return e.complexity.SteelItem.Identifier(childComplexity), true

	case "SteelItem.manufacturer":
		if e.complexity.SteelItem.Manufacturer == nil {
			break
		}

		return e.complexity.SteelItem.Manufacturer(childComplexity), true

	case "SteelItem.materialManufacturer":
		if e.complexity.SteelItem.MaterialManufacturer == nil {
			break
		}

		return e.complexity.SteelItem.MaterialManufacturer(childComplexity), true

	case "SteelItem.producedDate":
		if e.complexity.SteelItem.ProducedDate == nil {
			break
		}

		return e.complexity.SteelItem.ProducedDate(childComplexity), true

	case "SteelItem.repository":
		if e.complexity.SteelItem.Repository == nil {
			break
		}

		return e.complexity.SteelItem.Repository(childComplexity), true

	case "SteelItem.specifcation":
		if e.complexity.SteelItem.Specifcation == nil {
			break
		}

		return e.complexity.SteelItem.Specifcation(childComplexity), true

	case "SteelItem.state":
		if e.complexity.SteelItem.State == nil {
			break
		}

		return e.complexity.SteelItem.State(childComplexity), true

	case "SteelItem.stateInfo":
		if e.complexity.SteelItem.StateInfo == nil {
			break
		}

		return e.complexity.SteelItem.StateInfo(childComplexity), true

	case "SteelItem.steelInMaintenance":
		if e.complexity.SteelItem.SteelInMaintenance == nil {
			break
		}

		return e.complexity.SteelItem.SteelInMaintenance(childComplexity), true

	case "SteelItem.steelInProject":
		if e.complexity.SteelItem.SteelInProject == nil {
			break
		}

		return e.complexity.SteelItem.SteelInProject(childComplexity), true

	case "SteelItem.totalUsageRate":
		if e.complexity.SteelItem.TotalUsageRate == nil {
			break
		}

		return e.complexity.SteelItem.TotalUsageRate(childComplexity), true

	case "SteelItem.turnover":
		if e.complexity.SteelItem.Turnover == nil {
			break
		}

		return e.complexity.SteelItem.Turnover(childComplexity), true

	case "SteelItem.usageYearRate":
		if e.complexity.SteelItem.UsageYearRate == nil {
			break
		}

		return e.complexity.SteelItem.UsageYearRate(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "UserItem.avatar":
		if e.complexity.UserItem.Avatar == nil {
			break
		}

		return e.complexity.UserItem.Avatar(childComplexity), true

	case "UserItem.company":
		if e.complexity.UserItem.Company == nil {
			break
		}

		return e.complexity.UserItem.Company(childComplexity), true

	case "UserItem.id":
		if e.complexity.UserItem.Id == nil {
			break
		}

		return e.complexity.UserItem.Id(childComplexity), true

	case "UserItem.isAble":
		if e.complexity.UserItem.IsAble == nil {
			break
		}

		return e.complexity.UserItem.IsAble(childComplexity), true

	case "UserItem.name":
		if e.complexity.UserItem.Name == nil {
			break
		}

		return e.complexity.UserItem.Name(childComplexity), true

	case "UserItem.phone":
		if e.complexity.UserItem.Phone == nil {
			break
		}

		return e.complexity.UserItem.Phone(childComplexity), true

	case "UserItem.role":
		if e.complexity.UserItem.Role == nil {
			break
		}

		return e.complexity.UserItem.Role(childComplexity), true

	case "UserItem.wechat":
		if e.complexity.UserItem.Wechat == nil {
			break
		}

		return e.complexity.UserItem.Wechat(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `scalar Time
type User {
  id: ID!
  name: String!
}
type ErrCodes {
  """ 错误码编号 """
  code: Int!
  """ 错误码用途说明 """
  desc: String!
}
type GraphDesc {
  """ 接口错码说明 """
  title: String!
  """ 详细说明 """
  desc: String!
  """ 错码列表 """
  errCodes: [ErrCodes]!
}

type Query {
  """ 接口错码说明 """
  errorCodeDesc: GraphDesc!
}
""" 分页参数  """
input PaginationInput {
  """ 每页数量 """
  pageSize: Int! = 10
  """ 指定哪个分页 """
  page: Int! = 12
  """ 指定规格 """
  specificationId: Int
  """ 指定仓库 """
  repositoryId: Int
}
type LoginRes {
  """ 授权token """    accessToken: String!
  """ 过期时间戳(秒 7天) """  expired: Int!
  """ 角色标识 """ role: Role!
  """ 角色名 """ roleName: String!
}
type Mutation {
  """ 登录 """
  login( """ 手机号 """ phone: String!, """ 密码 """ password: String!, """ 设备的mac地址 设备端登录必要 """ mac: String ): LoginRes!
}

schema {
  query: Query
  mutation: Mutation
}`, BuiltIn: false},
	{Name: "../company.graphql", Input: `# 公司相关的操作
type CompanyItem {
    id: Int!
    """ 公司名 """
    name:             String!
    """ 用于型钢编码生成 """
    pinYin:           String!
    """ APP 企业宗旨 """
    symbol:           String!
    """ logo文件 """
    logoFile:       FileItem!
    """ app背景文件 """
    backgroundFile: FileItem!
    """ 账号状态 """
    isAble: Boolean!
    """ 公司的电话 """
    phone:            String!
    """ 公司的微信 """
    wechat:           String!
    """ 开始时间 """
    startedAt: Time!
    """ 结束时间 """
    endedAt: Time!
    """ 创建时间 """
    createdAt: Time!
    """ 管理员名称 """
    adminName: String!
    """ 管理员手机 """
    adminPhone: String!
    """ 管理员微信 """
    adminWechat: String!
    """ 管理员头像 """
    adminAvatar: FileItem!
}
""" 创建公司参数 """
input CreateCompanyInput {
    """ 公司名 """
    name: String!
    """ 公司名称拼写简写 """
    pinYin: String!
    """  宗旨 """
    symbol:           String!
    """ logo 文件Id """
    logoFileId:       Int!
    """ App 背景图片Id """
    backgroundFileId: Int!
    """ 账号状态 """
    isAble: Boolean!
    """ 公司的电话 """
    phone:            String!
    """ 公司的微信 """
    wechat:           String!
    """ 开始时间 """
    startedAt:        String!
    """ 结束时间 """
    endedAt:          String!
    """ 管理员名称 """
    adminName: String!
    """ 管理员手机 """
    adminPhone: String!
    """ 管理员密码 """
    adminPassword: String!
    """ 管理员微信 """
    adminWechat: String!
    """ 管理员头像Id """
    adminAvatarFileId: Int!
}
""" 修改公司参数 """
input EditCompanyInput {
    """ 公司ID """
    id: Int!
    """ 公司名 """
    name: String!
    """ 公司名称拼写简写 """
    pinYin: String!
    """  宗旨 """
    symbol:           String!
    """ logo 文件Id """
    logoFileId:       Int!
    """ App 背景图片Id """
    backgroundFileId: Int!
    """ 账号状态 """
    isAble: Boolean!
    """ 公司的电话 """
    phone:            String!
    """ 公司的微信 """
    wechat:           String!
    """ 开始时间 """
    startedAt:        String!
    """ 结束时间 """
    endedAt:          String!
    """ 管理员名称 """
    adminName: String!
    """ 管理员手机 """
    adminPhone: String!
    """ 管理员密码 """
    adminPassword: String
    """ 管理员微信 """
    adminWechat: String!
    """ 管理员头像Id """
    adminAvatarFileId: Int!
}

extend type Mutation {
    """ 创建公司 (auth: admin) """
    createCompany(input: CreateCompanyInput!): CompanyItem! @hasRole(role: [admin])
    """ 修改公司 (auth: admin, companyAdmin) """
    editCompany(input: EditCompanyInput!): CompanyItem! @hasRole(role: [admin, companyAdmin])
    """ 删除公司 (auth: admin) """
    deleteCompany(id: Int!): Boolean! @hasRole(role: [admin])
}

extend type Query {
    """ 获取公司列表 (auth: admin, companyAdmin, repositoryAdmin, projectAdmin, maintenanceAdmin ) """
    getAllCompany: [CompanyItem]! @hasRole(role: [admin, companyAdmin, repositoryAdmin, projectAdmin, maintenanceAdmin ])
}
`, BuiltIn: false},
	{Name: "../company_users.graphql", Input: `#公司人员
""" 角色 """
enum CreateInputUserRole {
    """ 仓库管理员 """
    repositoryAdmin
    """ 项目管理员 """
    projectAdmin
    """ 维修管理员 """
    maintenanceAdmin
}
""" 角色信息 """
type RoleItem {
    id: Int!
    name: String!
    tag: Role!
}
""" 用户信息 """
type UserItem {
    id: Int!
    role: RoleItem!
    name: String!
    phone: String!
    wechat: String!
    avatar: FileItem!
    isAble: Boolean!
    company: CompanyItem!
}
""" 添加用户信息需要的信息 """
input CreateCompanyUserInput {
    name: String!
    phone: String!
    role: CreateInputUserRole!
    wechat: String!
    avatarId: Int!
    password: String!
}
""" 编辑公司人员需要的数据 """
input EditCompanyUserInput {
    id: Int!
    name: String!
    phone: String!
    roleId: Int!
    """" 是否启用 """
    isAble: Boolean!
}

extend type Mutation {
    """ 添加公司人员管理 (auth: companyAdmin) """
    createCompanyUser(input: CreateCompanyUserInput!): UserItem! @hasRole(role: [companyAdmin])
    """ 编辑公司人员 (auth: companyAdmin) """
    editCompanyUser(input: EditCompanyUserInput): UserItem! @hasRole(role: [companyAdmin])
    """ 删除公司人员 (auth: companyAdmin) """
    deleteCompanyUser(uid: Int!): Boolean! @hasRole(role: [companyAdmin])
}
input GetCompanyUserInput {
    """ 角色id """
    roleId: Int
}
extend type Query {
    """ 获取公司人员 (aunth: companyAdmin, repositoryAdmin, projectAdmin, maintenanceAdmin) """
    getCompanyUser(input: GetCompanyUserInput): [UserItem]! @hasRole(role: [companyAdmin, repositoryAdmin, projectAdmin, maintenanceAdmin])
}
`, BuiltIn: false},
	{Name: "../devices.graphql", Input: `type DeviceItem {
    id: Int!
    mac: String!
    userInfo: UserItem!
    isAble: Boolean!
}
extend type Query
{
    """ 获取设备列表 """
    getDeviceList: [DeviceItem]! @hasRole(role: [ companyAdmin repositoryAdmin projectAdmin maintenanceAdmin ])
}

input EditDeviceInput {
    id: Int!
    isAble: Boolean!
}
extend type Mutation {
    """ 修改设备状态 (auth: companyAdmin)"""
    editDevice(input: EditDeviceInput!): Boolean! @hasRole(role: [companyAdmin])
}`, BuiltIn: false},
	{Name: "../directive.graphql", Input: `""" 声明指令 """
enum Role {
    """ 超级管理员 """
    admin
    """ 公司管理员 """
    companyAdmin
    """ 仓库管理员 """
    repositoryAdmin
    """ 项目管理员 """
    projectAdmin
    """ 维修管理员 """
    maintenanceAdmin
}

""" 角色鉴权 """
directive @hasRole(role: [Role!]!) on FIELD_DEFINITION

""" 必须是设备才能访问 """
directive @mustBeDevice on FIELD_DEFINITION
`, BuiltIn: false},
	{Name: "../express.graphql", Input: `""" 添加物流商需要的参数 """
input CreateExpressInput {
    name: String!
    remark: String!
    isDefault: Boolean!
}
""" 编辑物流商需要的参数 """
input EditExpressInput {
    id: Int!
    name: String!
    remark: String!
    isDefault: Boolean!
}
"""" 物流商数据项 """
type ExpressItem {
    id: Int!
    name: String!
    remark: String!
    isDefault: Boolean!
}

extend type Mutation {
    """ 创建物流商 (auth: companyAdmin, repositoryAdmin) """
    createExpress(input: CreateExpressInput!): ExpressItem! @hasRole(role: [companyAdmin, repositoryAdmin])
    """ 编辑物流 (auth: companyAdmin, repositoryAdmin) """
    editExpress(input: EditExpressInput!): ExpressItem! @hasRole(role: [companyAdmin, repositoryAdmin])
    """ 删除物流 (auth: companyAdmin, repositoryAdmin)"""
    deleteExpress(id: Int!): Boolean! @hasRole(role: [companyAdmin, repositoryAdmin])
}

extend type Query {
    """ 获取物流公司列表 (auth:  admin companyAdmin repositoryAdmin projectAdmin maintenanceAdmin ) """
    getExpressList: [ExpressItem]! @hasRole(role: [ companyAdmin repositoryAdmin projectAdmin maintenanceAdmin ])
}
`, BuiltIn: false},
	{Name: "../maintenance.graphql", Input: `""" 维修详情记录 """
type MaintenanceRecordItem {
    """ 序号 """
    id: Int!
    """ 维修厂 """
    maintenance: MaintenanceItem!
    """ 型钢 """
    steel: SteelItem!
    """ 状态信息 """
    stateInfo: StateItem!
    """ 维修天数 """
    useDays: Int
    """ 出厂时间 """
    outedAt: Time
    """ 入厂时间 """
    enteredAt: Time
    """ 出库时间 """
    outRepositoryAt: Time!
    """ 入库时间 """
    enterRepositoryAt: Time
}

"""  维修厂 """
type MaintenanceItem {
    id: Int!
    """ 名称 """
    name: String!
    """ 地址 """
    address: String!
    """ 备注 """
    remark: String!
    """ 是否启用 """
    isAble: Boolean!
    """ 管理员列表 """
    admin:[UserItem]!
    """ 数量 """
    total: Int!
    """ 重量 """
    weightTotal: Float!
}

""" 创建维修厂参数 """
input CreateMaintenanceInput {
    """ 维修员id """
    uid: [Int!]!
    """ 维修厂名称 """
    name: String!
    """ 地址 """
    address: String!
    """ 备注 """
    remark: String
}
""" 编辑维修厂参数 """
input EditMaintenanceInput {
    id: Int!
    """ 维修厂名 """
    name: String!
    """ 地址 """
    address: String!
    """ 管理员id """
    adminIdList: [Int!]!
    """ 备注 """
    remark: String
    """ 是否启用 """
    isAble: Boolean
}
input DelMaintenanceInput {
    """ 工厂id """
    id: Int!
}
""" 型钢入厂输入 """
input EnterMaintenanceInput {
    """ 识别码 """
    identifier: String!
}
""" 待入厂详细信息参数 """
input GetEnterMaintenanceSteelDetailInput {
    """ 识别码 """
    identifierList: [String!]!
    """ 规格id """
    specificationId: Int
}
""" 获取待入厂详细信息参数 """
type GetEnterMaintenanceSteelDetailRes {
    """ 入厂型钢列表 """
    list: [MaintenanceRecordItem!]!
    """ 数量 """
    total: Int!
    """ 重量 """
    weight: Float!
}
"""" 型钢入厂参数 """
input SetMaintenanceInput {
    identifierList: [String!]!
}
extend type Mutation {
    """ 创建维修厂 """
    createMaintenance(input: CreateMaintenanceInput! ): MaintenanceItem! @hasRole(role: [companyAdmin])
    """  修改维修厂 """
    editMaintenance(input: EditMaintenanceInput! ): MaintenanceItem! @hasRole(role: [companyAdmin])
    """ 删除维修厂 """
    delMaintenance(input: DelMaintenanceInput!): Boolean! @hasRole(role: [companyAdmin])
    """" 型钢入厂 """
    setEnterMaintenance(input: SetMaintenanceInput!): [MaintenanceRecordItem!]!@hasRole(role: [maintenanceAdmin])

}
""" 修改维修型钢状态查询参数 """
input GetChangedMaintenanceSteelInput {
    """ 识别码 """
    identifier: String!
}
extend type Query {
    """ 获取维修厂列表 """
    getMaintenanceList: [MaintenanceItem]! @hasRole(role: [ companyAdmin repositoryAdmin projectAdmin maintenanceAdmin])
    """ 型钢入厂查询 """
    getEnterMaintenanceSteel(input: EnterMaintenanceInput!): MaintenanceRecordItem ! @hasRole(role: [maintenanceAdmin]) @mustBeDevice
    """ 获取待入厂详细信息 """
    getEnterMaintenanceSteelDetail(input: GetEnterMaintenanceSteelDetailInput!): GetEnterMaintenanceSteelDetailRes! @hasRole(role: [maintenanceAdmin]) @mustBeDevice
    """ 获取用于修改维修型钢状态的状态列表"""
    getMaintenanceStateForChanged: [StateItem!]! @hasRole(role: [maintenanceAdmin]) @mustBeDevice
    """ 修改维修型钢状态查询 """
    getChangedMaintenanceSteel(input: GetChangedMaintenanceSteelInput!): MaintenanceRecordItem ! @hasRole(role: [maintenanceAdmin]) @mustBeDevice
}`, BuiltIn: false},
	{Name: "../manufacturer.graphql", Input: `# 制作商接口相关
""" 添加制造商参数 """
input CreateManufacturerInput {
    name: String!
    remark: String!
    isDefault: Boolean!
}
"""" 制造商数据项 """
type ManufacturerItem {
    id: Int!
    name: String!
    remark: String!
    isDefault: Boolean!
}
""" 编辑制作商需要的参数 """
input EditManufacturerInput {
    id: Int!
    name: String!
    remark: String!
    isDefault: Boolean!
}
extend type Mutation {
    """ 创建制造商 (auth: companyAdmin, repositoryAdmin) """
    createManufacturer(input: CreateManufacturerInput!): ManufacturerItem! @hasRole(role: [companyAdmin, repositoryAdmin])
    """ 编辑材料商 (auth: companyAdmin, repositoryAdmin) """
    editManufacturer(input: EditManufacturerInput!): ManufacturerItem! @hasRole(role: [companyAdmin, repositoryAdmin])
    """ 删除材料商 (auth: companyAdmin, repositoryAdmin) """
    deleteManufacturer(id: Int!): Boolean! @hasRole(role: [companyAdmin, repositoryAdmin])
}

extend type Query {
    """ 获取制造商列表 (auth: companyAdmin, repositoryAdmin projectAdmin maintenanceAdmin ) """
    getManufacturers: [ManufacturerItem]! @hasRole(role: [companyAdmin, repositoryAdmin projectAdmin maintenanceAdmin ])
}

`, BuiltIn: false},
	{Name: "../materialManufacturer.graphql", Input: `""" 添加材料商参数 """
input CreateMaterialManufacturerInput {
    name: String!
    remark: String!
    isDefault: Boolean!
}
"""" 材料商数据项 """
type MaterialManufacturerItem {
    id: Int!
    name: String!
    remark: String!
    isDefault: Boolean!
}
""" 编辑材料商需要的参数 """
input EditMaterialManufacturerInput {
    id: Int!
    name: String!
    remark: String!
    isDefault: Boolean!
}
extend type Mutation {
    """ 创建材料商 (auth: companyAdmin, repositoryAdmin) """
    createMaterialManufacturer(input: CreateMaterialManufacturerInput!): MaterialManufacturerItem! @hasRole(role: [companyAdmin, repositoryAdmin])
    """ 编辑材料商 (auth: companyAdmin, repositoryAdmin) """
    editMaterialManufacturer(input: EditMaterialManufacturerInput!): MaterialManufacturerItem! @hasRole(role: [companyAdmin, repositoryAdmin])
    """ 删除材料商 (auth: companyAdmin, repositoryAdmin) """
    deleteMaterialManufacturer(id: Int!): Boolean! @hasRole(role: [companyAdmin, repositoryAdmin])
}

extend type Query {
    """ 获取材料商列表 (auth: companyAdmin, repositoryAdmin projectAdmin maintenanceAdmin ) """
    getMaterialManufacturers: [MaterialManufacturerItem]! @hasRole(role: [companyAdmin, repositoryAdmin projectAdmin maintenanceAdmin ])
}

`, BuiltIn: false},
	{Name: "../me.graphql", Input: `""" 设置密码的参数 """
input SetPasswordInput {
    password: String!
}
extend type Query {
    """ 获取我的信息(auth: repositoryAdmin projectAdmin maintenanceAdmin) """
    getMyInfo: UserItem! @hasRole(role: [repositoryAdmin projectAdmin maintenanceAdmin])
}
extend type  Mutation {
    """ 设置密码 (auth: repositoryAdmin projectAdmin maintenanceAdmin) """
    setPassword(input: SetPasswordInput): Boolean! @hasRole(role: [repositoryAdmin projectAdmin maintenanceAdmin admin companyAdmin])
}
`, BuiltIn: false},
	{Name: "../msg.graphql", Input: `type MsgItem {
    id: Int!
    """ 是否已读 """
    isRead: Boolean!
    """ 内容 """
    content: String!
    """ 创建时间 """
    createdAt: Time!
}
extend type Query {
    """ 获取消息列表 """
    getMsgList: [MsgItem]! @hasRole(role: [projectAdmin, repositoryAdmin,maintenanceAdmin]) @mustBeDevice

}`, BuiltIn: false},
	{Name: "../order.graphql", Input: `""" 订单规格 """
type OrderSpecificationItem {
    id: Int!
    """ 归属的订单 """
    order: OrderItem!
    """ 规格 """
    specification: String!
    """ 规格信息合集 """
    specificationInfo: SpecificationItem!
    """ 数量 """
    total: Int!
    """ 已出库 """
    totalSend: Int!
    """ 未来出库 """
    totalToBeSend: Int!
    """ 已归库(出场并已保存到仓库中) """
    storeTotal: Int!
    """ （场地）已接收"""
    workshopReceiveTotal: Int!
    """ 重量 """
    weight: Float!
}
""" 订单中规格列表中的一个型钢 """
type OrderSpecificationSteelItem {
    id: Int!
   """ 状态项 """
    stateInfo: StateItem!
    """ 型钢基本信息 """
    steel: SteelItem!
    """订单规格"""
    orderSpecification: OrderSpecificationItem!
    """ 出库去场地的物流单 """
    toWorkshopExpress: ExpressItem
    """ 去场地归库的物流单id """
    toRepositoryExpress: ExpressItem
    """ 安装位置编码 """
    locationCode: Int!
    """ 出库用户 """
    enterRepositoryUser: UserItem
    """ 安装时间 """
    installationAt: Time
    """入场时间 """
    enterWorkshopAt: Time
    """ 出场时间 """
    outWorkshopAt: Time
    """ 出库时间 """
    outRepositoryAt: Time!
    """ 归库时间 """
    EnterRepositoryAt: Time
}

""" 运输公司 """
type ExpressCompanyItem {
    id: Int!
    """ 公司名 """
    name: String!
    """ 是否默认 """
    isDefault: Boolean!
    """ 备注 """
    remark: String!
}
""" 物流方向 """
enum OrderExpressDirection {
    """ 去工场方向 """
    toWorkshop
    """ 归库方向 """
    toRepository
}
""" 订单物流 """
type OrderExpressItem {
    id: Int!
    """物流公司 """
    expressCompany: ExpressCompanyItem!
    """ 物流订单 """
    expressNo        :String!
    """ 发货人 """
    sender: UserItem!
    """ 收货人 """
    receiver: UserItem!
    """ 物流方向 """
    direction: OrderExpressDirection!
    """ 收货时间 """
    receiveAt: Time
    """ 发货时间 """
    createdAt: Time!
}
""" 型钢订单 """
type OrderItem {
    id: Int!
    """ 项目 """
    project: ProjectItem!
    """订单状态 待确认200 已确认300 已拒绝400 已发货500 待收货600 已收货(部分)700 已收货全部800 已归库900"""
    state: Int!
    """ 配件列表 """
    partList: String !
    """ 创建人 """
    createUser: UserItem!
    """ 确认人 """
    confirmedUser: UserItem
    """ 物流单信"""
    expressList: [OrderExpressItem]
    """ 备注 """
    remark: String!
    """ 订单编号 """
    orderNo: String!
    """ 数量 """
    total: Int!
    """ 重量 """
    weight: Float!
    """ 出货仓库 """
    repository: RepositoryItem!
    """ 规格列表 """
    orderSpecificationList: [OrderSpecificationItem!]!
    """ 创建时间 """
    createdAt: Time!
    """ 确认时间 """
    confirmedAt: Time
    """ 预计归还时间 """
    expectedReturnAt: Time!
}

""" 创建需求单的指定型钢单项参数 """
input CreateOrderSteelInput {
    """ 数量 """
    total: Int!
    """ 规格ID """
    specificationId: Int!
}

"""  创建需求单 """
input CreateOrderInput {
    """ 项目ID """
    projectId: Int!
    """ 出货仓库ID """
    repositoryId: Int!
    """ 预计归还时间 """
    expectedReturnAt: Time!
    """ 备注 """
    remark: String!
    """ 配件清单 """
    partList: String!
    """ 型钢列表 """
    steelList: [CreateOrderSteelInput!]!
}
enum  GetOrderListInputType {
    """ 确认订单 """
    confirmOrder
    """ 待确认订单 """
    toBeConfirm
}
input GetOrderListInput {
    queryType: GetOrderListInputType
}

input getOrderDetailInput{
    """ 订单id """
    id: Int!
}

""" 确认订单或打拒绝 """
input ConfirmOrderInput {
    """ 订单id """
    id: Int!
    """ 是否通过 """
    isAccess: Boolean!
}
input ProjectOrder2WorkshopDetailInput {
    """ 识别码列表 """
    identifierList: [String!]!
    """ 规格id """
    specificationId: Int
    """ 订单id """
    orderId: Int!
}
""" 获取项目订单出库到场地详情 """
type GetProjectOrder2WorkshopDetailRes {
    """  数量列表 """
    list: [SteelItem!]!
    """ 数量 """
    total: Int!
    """ 重置吨 """
    totalWeight: Float!
}
""" 获取要入场的订单需要的请求参数 """
input GetProjectOrder2WorkshopDetailInput {
    """ 规格id """
    specificationId: Int
    """ 订单id """
    orderId: Int!
}

input ProjectOrder2WorkshopInput {
    """ 识别码列表 """
    identifierList: [String!]!
    """ 订单id """
    orderId: Int!
    """ 物流公司id """
    expressCompanyId: Int!
    """ 物流编号 """
    expressNo: String!
}
""" 获取送往场地的型钢订单列表详情响应格式 """
type GetSend2WorkshopOrderListDetailRes {
    """  数量列表 """
    list: [OrderSpecificationSteelItem!]!
    """ 数量 """
    total: Int!
    """ 重置吨 """
    totalWeight: Float!
}
input SetSteelIntoWorkshopInput {
    """ 型钢标识码列表 """
    identifierList: [String!]!
    """ 订单ID """
    orderId: Int!
}
""" 状态项 """
type StateItem {
    """ 状态码 """
    state: Int!
    """  说明 """
    desc: String!
}
extend type Mutation {
    """ 型钢入场 """
    setSteelEnterWorkshop(input: SetSteelIntoWorkshopInput!): [OrderSpecificationSteelItem!]! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 创建需求单 (auth: projectAdmin) """
    createOrder(input: CreateOrderInput!): OrderItem! @hasRole(role: [projectAdmin])
    """ 确认订单 """
    confirmOrRejectOrder(input: ConfirmOrderInput!): OrderItem! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 型钢出库到场地 """
    setProjectOrder2Workshop(input: ProjectOrder2WorkshopInput!): OrderItem! @hasRole(role: [repositoryAdmin]) @mustBeDevice
}
extend type Query {
    """ 获取需求单列表 """
    getOrderList(input: GetOrderListInput!): [OrderItem]! @hasRole(role: [projectAdmin companyAdmin repositoryAdmin maintenanceAdmin])
    """ 获取要出库到场地的订单列表-手持机 auth(repositoryAdmin) """
    getTobeSendWorkshopOrderList: [OrderItem]! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 获取订单详情-手持机 auth(projectAdmin)  """
    getOrderDetail(input: getOrderDetailInput!): OrderItem! @hasRole(role: [projectAdmin repositoryAdmin]) @mustBeDevice
    """ 获取项目订单出库到场地详情 """
    getProjectOrder2WorkshopDetail(input: ProjectOrder2WorkshopDetailInput!): GetProjectOrder2WorkshopDetailRes! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 获取送往场地的型钢订单列表 auth(role: projectAdmin) """
    getSend2WorkshopOrderList: [OrderItem]! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 获取送往场地的型钢订单列表详情 auth(role: project) """
    getSend2WorkshopOrderListDetail(input: GetProjectOrder2WorkshopDetailInput!): GetSend2WorkshopOrderListDetailRes! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 获取项目型钢状态列表 """
    getProjectSteelStateList: [StateItem!]!
    #    """ 获取最大的安装位置 """
    #    getMaxLocationCode(): Int!
}
`, BuiltIn: false},
	{Name: "../price.graphql", Input: `extend type Query {
    """  获取价格 """
    getPrice: Float!
}

extend type Mutation {
    """ 编辑价格 (auth:  companyadmin )"""
    editPrice(price: Float!): Float! @hasRole(role: [companyAdmin])
}
`, BuiltIn: false},
	{Name: "../project.graphql", Input: `type ProjectItem {
    id: Int!
    """ 项目名"""
    name: String!
    """ 城市名"""
    city: String!
    """ 负责人合集 """
    leaderList: [UserItem!]!
    """ 地址 """
    address: String!
    """ 开始时间 """
    startedAt: Time!
    """ 结束时间 """
    endedAt: Time
    """ 备注 """
    remark: String!
    """ 公司 """
    company:  CompanyItem!
}
""" 创建项目需要的参数 """
input CreateProjectInput {
    """ 城市 """
    city: String!
    """ 项目名 """
    name: String!
    """ 地址  """
    address: String!
    """ 多个负责人ids """
    leaderIdS: [Int!]!
    """ 备注 """
    remark: String!
    """ 开始时间 """
    startAt: Time!
}
"""  设备获取项目管理响应数据 """
type GetProjectSpecificationDetailRes {
    """ 订单规格列表 """
    list: [OrderSpecificationItem]!
    """ 已经扫描数量 """
    total: Int!
    """ 已经扫描重量 """
    weight: Float!
}
""" 获取项目规格列表需要的请求参数 """
input GetProjectSpecificationDetailInput {
    """ 项目id """
    projectId: Int!
}
""" 获取项目型钢详情  """
type GetProjectSteelDetailRes {
    """ 订单规格列表 """
    list: [OrderSpecificationSteelItem]!
    """ 已经扫描数量 """
    total: Int !
    """ 已经扫描重量 """
    weight: Float!
}
""" 获取项目型钢详情需要的参数 """
input GetProjectSteelDetailInput {
    """ 项目id """
    projectId: Int!
    """ 规格id """
    specificationId: Int
    """ 型钢状态 """
    state: Int
}
""" 获取项目最大安装码需要的参数 """
input GetMaxLocationCodeInput {
    """ 型钢识别码 """
    identifier: String!
}
""" 安装码是否可用请求参数 """
input IsAccessLocationCodeInput {
    """ 型钢识别码 """
    identifier: String!
    """ 安装编码 """
    locationCode: Int!
}
""" 安装型钢需要的参数 """
input InstallLocationInput {
    """ 安装编码 """
    locationCode: Int!
    """ 识别码 """
    identifier: String!
}
"""" 待修改武钢详细信息请求参数 """
input ProjectSteel2BeChangeInput {
    """ 识别码列表 """
    identifierList: [String!]!
    """ 规格尺寸id """
    specificationId: Int
    """ 状态 """
    state: Int
}
"""" 待修改武钢详细信息响应数据 """
type GetProjectSteel2BeChangeDetailRes {
    """ 型钢列表 """
    list :[OrderSpecificationSteelItem]!
    """ 数量 """
    total: Int!
    """ 重量 """
    weightTotal: Float!
}
""" 待修改武钢信息请求参数 """
input GetProjectSteel2BeChangeInput {
    """ 识别码 """
    identifier: String!
}
""" 修改项目型钢需要的参数 """
input SetProjectSteelInput {
    """ 标识码列表 """
    identifierList: [String!]
    """ 型钢状态 """
    state: Int!
}
""" 获取型钢单根型钢出场详情参数 """
input GetOutOfWorkshopProjectSteelDetail {
    """ 标识码 """
    identifier: String!
    """ 项目id """
    projectId: Int!
}
""" 获取型钢单根型钢出场详情响应格式 """
type GetOutOfWorkshopProjectSteelDetailRes {
    """" 订单型钢信息 """
    orderSteel: OrderSpecificationSteelItem!
    """ 待归库数量 """
    toBeStoreTotal: Int!
    """ 已归库数量 """
    storeTotal: Int!
}
""" 型钢出场请求参数 """
input SetProjectSteelOutOfWorkshopInput {
    """ 识别码列表 """
    identifierList: [String!]!
    """ 项目id """
    projectId: Int!
}
""" 获取订单型钢详情需要的参数 """
input GetOrderSteelDetailInput {
    """ 识别码 """
    identifier: String!
}
""" 项目归库的型钢查询参数 """
input GetEnterRepositorySteelDetailInput{
    """ 识别码 """
    identifier: String!
    """ 项目列表 """
    projectId: Int!
}
""" 项目归库的型钢查询响应 """
type GetEnterRepositorySteelDetailRes {
    """ 型钢订单 """
    orderSteel: OrderSpecificationSteelItem!
    """ 已归库  """
    storedTotal: Int!
    """ 待定归库 """
    toBeStoreTotal: Int
}
""" 获取待归库的尺寸列表请求参数  """
input GetToBeEnterRepositorySpecificationListInput {
    """ 项目id """
    projectId: Int!
}
""" 获取待归库详情参数 """
input GetToBeEnterRepositoryDetailInput {
    """ 规格id """
    specificationId: Int
    """ 型钢状态 """
    state: Int
    """ 项目ID """
    projectId: Int!
}
""" 型钢归库参数 """
input SetProjectSteelEnterRepositoryInput {
    """ 识别码列表 """
    identifierList: [String!]!
    """ 项目id """
    projectId: Int!

}
extend type Mutation {
    """ 创建项目 (auth: admin)"""
    createProject(input:CreateProjectInput!): ProjectItem! @hasRole(role: [companyAdmin])
    """ 安装型钢 """
    installSteel(input: InstallLocationInput!): Boolean! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 修改项目的型钢状态 """
    setProjectSteelState(input: SetProjectSteelInput!): Boolean! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 型钢出场 """
    setProjectSteelOutOfWorkshop(input: SetProjectSteelOutOfWorkshopInput!): Boolean! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 型钢归库 """
    setProjectSteelEnterRepository(input: SetProjectSteelEnterRepositoryInput!):Boolean! @hasRole(role: [repositoryAdmin]) @mustBeDevice
}
extend type Query {
    """ 获取项目管理列表 """
    getProjectLis: [ProjectItem]! @hasRole(role: [companyAdmin repositoryAdmin projectAdmin maintenanceAdmin ])
    """ 获取项目规格列表-手持  """
    getProjectSpecificationDetail(input: GetProjectSpecificationDetailInput!): GetProjectSpecificationDetailRes! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 获取项目型钢详情-设备 """
    getProjectSteelDetail(input: GetProjectSteelDetailInput!):GetProjectSteelDetailRes! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 获取项目最大安装码 """
    getMaxLocationCode(input: GetMaxLocationCodeInput!): Int! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 安装码是否可用 """
    isAccessLocationCode(input: IsAccessLocationCodeInput!): Boolean! @hasRole(role: [projectAdmin]) @mustBeDevice
    """" 获取待修改武钢详细信息 """
    getProjectSteel2BeChangeDetail(input: ProjectSteel2BeChangeInput!): GetProjectSteel2BeChangeDetailRes! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 获取待修改武钢信息 """
    getProjectSteel2BeChange(input: GetProjectSteel2BeChangeInput!): OrderSpecificationSteelItem! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 获取型钢出场的项目列表 """
    getOutOfWorkshopProjectList: [ProjectItem]! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 获取型钢单根型钢出场详情 """
    getOutOfWorkshopProjectSteelDetail(input: GetOutOfWorkshopProjectSteelDetail!): GetOutOfWorkshopProjectSteelDetailRes! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 获取订单型钢详情 """
    getOrderSteelDetail(input: GetOrderSteelDetailInput!): OrderSpecificationSteelItem! @mustBeDevice @hasRole(role: [projectAdmin])
    """ 获取修改型钢状态码的列表 """
    getProjectStateListForChanged: [StateItem!]! @hasRole(role: [projectAdmin]) @mustBeDevice
    """ 获取可归库的项目列表 """
    getEnterRepositoryProjectList: [ProjectItem!]! @mustBeDevice @hasRole(role: [repositoryAdmin])
    """ 项目归库的型钢查询 """
    getEnterRepositorySteelDetail(input: GetEnterRepositorySteelDetailInput!): GetEnterRepositorySteelDetailRes! @mustBeDevice @hasRole(role: [repositoryAdmin])
    """ 获取待归库的状态列表 """
    getToBeEnterRepositoryStateList: [StateItem!]! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 获取待归库的尺寸列表  """
    getToBeEnterRepositorySpecificationList(input: GetToBeEnterRepositorySpecificationListInput!): [SpecificationItem!]! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 获取待归库详情 """
    getToBeEnterRepositoryDetail(input: GetToBeEnterRepositoryDetailInput!): [OrderSpecificationSteelItem!]! @hasRole(role: [repositoryAdmin]) @mustBeDevice
}
`, BuiltIn: false},
	{Name: "../repository.graphql", Input: `type RepositoryLeaderItem {
    id: Int!
    name: String!
    phone: String!
    wechat: String!
}
""" 仓库信息 """
type RepositoryItem {
    id: Int!
    name: String!
    pinYin: String!
    city: String!
    address: String!
    total: Int!
    weight: Float!
    remark: String!
    isAble: Boolean!
    leaders:[UserItem!]!
}
"""  创建仓库需要提交的参数"""
input CreateRepositoryInput {
    """ 名称 """
    name: String!
    """ 地址 """
    address: String!
    """ 管理员id """
    repositoryAdminId: [Int!]!
    """ 备注 """
    remark: String!
    """ 拼音 """
    pinYin: String!
}
type GetRepositoryOverviewRes {
    """ 总量 """
    total: Int!
    """ 重量 (t/吨) """
    weight: Float!
}
input GetRepositoryOverviewInput {
    """ 仓库id """
    id: Int!
    """ 规格ID """
    specificationId: Int
}
""" 获取仓库型钢信息参数 """
input GetRepositorySteelInput {
    """ 仓库id """
    reposirotyId: Int!
    """ 规格尺寸"""
    specificationId: Int
    """ 当前状态 """
    state: Int
}
type GetRepositorySteelListItemRes {
    """ 数量 """
    total: Int!
    """ 重量 """
    weight: Float!
    """ 规格 """
    specificationInfo: SpecificationItem!
}
""" 获取仓库型钢信息响应 """
type GetRepositorySteelRes {
    """ 型钢规格列表 """
    list:[GetRepositorySteelListItemRes!]!
    """ 数量 """
    total: Int!
    """ 重量 """
    weight: Float!
}
type GetRepositorySteelDetailRes {
    """ 型钢列表 """
    list: [SteelItem]!
    """  数量 """
    total: Int!
    """  重量 """
    weight: Float!
}
""" 获取用于修改的仓库型钢参数 """
input Get2BeChangedRepositorySteelInput {
    """ 识别码 """
    identifier: String!
}

""" 获取待修改的仓库型钢详情参数 """
input Get2BeChangedRepositorySteelDetailInput {
    """ 识别码列表 """
    identifierList: [String!]!
    """ 规格id """
    specificationId: Int
}

""" 获取用于报废的仓库型钢参数 """
input  Get2BeScrapRepositorySteelInput {
    """ 型钢标识码 """
    identifier: String!
}
input SetBatchOfRepositorySteelInput {
    """ 识别码列表 """
    identifierList: [String!]!
    """ 规格id """
    specificationId: Int!
    """ 材料商id """
    materialManufacturersId: Int!
    """ 生产商id """
    manufacturerId: Int!
    """ 生产日期 """
    producedAt: Time!
}

""" 获取用于报废的仓库型钢详情响应数据 """
type Get2BeScrapRepositorySteelDetailRes {
    list: [SteelItem!]!
    """ 数量 """
    total: Int!
    """ 重量 """
    weight: Float!
}

""" 获取用于报废的仓库型钢详情参数 """
input Get2BeScrapRepositorySteelDetailInput {
    """ 识别码列表 """
    identifierList: [String!]!
    """ 规格id """
    specificationId: Int
}
""" 获取待修改型钢详情 """
type Get2BeChangedRepositorySteelDetailRes {
    """ 型钢列表 """
    list: [SteelItem!]!
    """ 数量 """
    total: Int!
    """ 重量 """
    weight: Float!
}
""" 获取型钢维修出库参数 """
input Get2BeMaintainSteelInput {
    """ 识别码 """
    identifier: String!
}

""" 获取型钢维修出库详情参数 """
input Get2BeMaintainSteelDetailInput {
    """ 识别码 """
    identifierList: [String!]!
    """ 规格 ID """
    specificationId: Int
}

extend type Query {
    """ 获取仓库列表 (auth: repositoryAdmin, companyAdmin, projectAdmin, maintenanceAdmin) """
    getRepositoryList: [RepositoryItem]! @hasRole(role: [repositoryAdmin, companyAdmin, projectAdmin, maintenanceAdmin])
    """ 获取仓库概览(auth:projectAdmin) """
    getRepositoryOverview(input: GetRepositoryOverviewInput!): GetRepositoryOverviewRes! @hasRole(role: [ projectAdmin ])
    """ 获取全部状态列表 """
    getAllStateList: [StateItem!]! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 获取仓库型钢信息 """
    getRepositorySteel(input: GetRepositorySteelInput!): GetRepositorySteelRes! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 获取仓库型钢信息详情 """
    getRepositorySteelDetail(input: GetRepositorySteelInput!): GetRepositorySteelDetailRes! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 获取用于修改的仓库型钢 """
    get2BeChangedRepositorySteel(input: Get2BeChangedRepositorySteelInput!): SteelItem! @hasRole(role: [repositoryAdmin] ) @mustBeDevice
    """ 获取待修改的仓库型钢详情 """
    get2BeChangedRepositorySteelDetail(input: Get2BeChangedRepositorySteelDetailInput!): Get2BeChangedRepositorySteelDetailRes! @hasRole(role: [repositoryAdmin] ) @mustBeDevice
    """ 获取用于报废的仓库型钢 """
    get2BeScrapRepositorySteel(input: Get2BeScrapRepositorySteelInput!): SteelItem! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 获取用于报废的仓库型钢详情 """
    get2BeScrapRepositorySteelDetail(input: Get2BeScrapRepositorySteelDetailInput!): Get2BeScrapRepositorySteelDetailRes! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 获取出库维修的型钢 """
    get2BeMaintainSteel(input: Get2BeMaintainSteelInput!): SteelItem! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 获取出库维修的型钢详情 """
    get2BeMaintainSteelDetail(input: Get2BeMaintainSteelDetailInput!): Get2BeScrapRepositorySteelDetailRes! @hasRole(role: [repositoryAdmin]) @mustBeDevice
}

""" 批量报废型钢参数 """
input SetBatchOfRepositorySteelScrapInput {
    """ 识别码列表 """
    identifierList: [String!]!
}

""" 批量维修出库参数 """
input SetBatchOfMaintenanceSteelInput {
    """ 识别码列表 """
    identifierList: [String!]!
    """ 维修厂 id """
    maintenanceId: Int!
}
extend type Mutation {
    """ 添加仓库 (auth: companyAdmin)"""
    createRepository(input: CreateRepositoryInput!): RepositoryItem! @hasRole(role: [companyAdmin])
    """ 删除仓库 """
    deleteRepository(repositoryId: Int!): Boolean! @hasRole(role: [companyAdmin])
    """ 批量修改型钢 """
    setBatchOfRepositorySteel(input: SetBatchOfRepositorySteelInput!): [SteelItem!]! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 批量报废型钢 """
    setBatchOfRepositorySteelScrap(input: SetBatchOfRepositorySteelScrapInput!): [SteelItem!]! @hasRole(role: [repositoryAdmin]) @mustBeDevice
    """ 批量维修出库 """
    setBatchOfMaintenanceSteel(input: SetBatchOfMaintenanceSteelInput!): [SteelItem!]! @hasRole(role: [repositoryAdmin]) @mustBeDevice
}
`, BuiltIn: false},
	{Name: "../roles.graphql", Input: `extend type Query {
    """ 获取角色列表 """
    getRoleList: [RoleItem]!
}`, BuiltIn: false},
	{Name: "../specification.graphql", Input: `# 规格相关的接口
""" 创建规格需要提交的参数 """
input CreateSpecificationInput {
    type: String!
    length: Float!
    weight: Float!
    isDefault: Boolean!
}
""" 修改规格需要提交的参数 """
input EditSpecificationInput {
    id: Int!
    type: String!
    length: Float!
    weight: Float!
    isDefault: Boolean!
}
""" 规格参数 """
type SpecificationItem {
    id: Int!
    type: String!
    """ 长度 """
    length: Float!
    """ 重量 """
    weight: Float!
    """ 是不是默认的规格参数 """
    isDefault: Boolean!
    """ 规格参数字符串 """
    specification: String!
}
extend type Query {
    """ 获取公司规格列表 (auth:  companyAdmin repositoryAdmin projectAdmin maintenanceAdmin ) """
    getSpecification: [SpecificationItem]! @hasRole(role: [ companyAdmin repositoryAdmin projectAdmin maintenanceAdmin ])
}
extend type Mutation {
    """ 创建规格 (auth:  companyAdmin, repositoryAdmin ) """
    createSpecification(input: CreateSpecificationInput!): SpecificationItem! @hasRole(role: [ companyAdmin, repositoryAdmin ])
    """ 修改规格 (auth:  companyAdmin, repositoryAdmin ) """
    editSpecification(input: EditSpecificationInput!): SpecificationItem! @hasRole(role: [ companyAdmin, repositoryAdmin ])
    """ 删除规格 (auth:  companyAdmin, repositoryAdmin ) """
    deleteSpecification(id: Int!): Boolean! @hasRole(role: [ companyAdmin, repositoryAdmin ])
}
`, BuiltIn: false},
	{Name: "../steels.graphql", Input: `"""  型钢在项目的记录详情 """
type SteelInProject {
    """ 序号 """
    id: Int!
    """ 型钢 """
    steel: SteelItem!
    """ 安装序号 """
    locationCode: Int
    """ 订单详情 """
    order: OrderItem!
    """ 安装时间 """
    installationAt: Time
    """ 进场时间 """
    enterWorkshopAt: Time
    """ 出场时间 """
    outWorkshopAt: Time
    """ 出库时间 """
    outRepositoryAt: Time
    """ 归库时间 """
    enterRepositoryAt: Time
    """ 使用天数 """
    useDays: Int
    """ 项目名 """
    projectName: String!
}

""" 型钢数据项 """
type SteelItem {
    id: Int!
    """ 识别码列表 """
    identifier: String!
    """首次入库用户 """
    createUser: UserItem!
    """
    100【仓库】-在库
    101【仓库】-运送至项目途中
    102【仓库】-运送至维修厂途中
    200【项目】-待使用
    201【项目】-使用中
    202【项目】-异常
    203【项目】-闲置
    204【项目】-准备归库
    205【项目】-归库途中
    300【维修】-待维修
    301【维修】-维修中
    302【维修】-准备归库
    303【维修】-归库途中
    400丢失
    500报废
    """
    state: Int!
    """ 状态信息 """
    stateInfo: StateItem!
    """ 所属的公司id """
    companyId: Int!
    """ 当前存放的仓库 """
    repository: RepositoryItem!
    """ 材料商 """
    materialManufacturer: MaterialManufacturerItem!
    """ 制造商(生产商) """
    manufacturer: ManufacturerItem!
    """ 周转次数 """
    turnover: Int!
    """ 年使用率 """
    usageYearRate:Float!
    """ 总使用率 """
    totalUsageRate:Float!
    """ 生产时间 """
    producedDate: Time!
    """ 规格参数 """
    specifcation: SpecificationItem!
    """ 项目经历 """
    steelInProject: [SteelInProject]!
    """ 维修经历 """
    steelInMaintenance: [MaintenanceRecordItem]!
    """ 型钢编码 """
    code: String!
    """ 首次入库时间 """
    createdAt: Time!
}

""" 型钢入库需要的参数 """
input CreateSteelInput {
    """ 识别码 """
    identifierList: [String!]!
    """ 当前存放的仓库id """
    repositoryId: Int!
    """ 规格表id """
    specificationId: Int!
    """ 料商类型id """
    materialManufacturerId: Int!
    """ 制造商(生产商)id """
    manufacturerId: Int!
    """ 生产时间 """
    producedDate: Time!
}
type GetSteelListRes {
    total: Int!
    list: [SteelItem]!
}
""" 获取一个型钢详情请求参数 """
input GetOneSteelDetailInput {
    identifier: String!
}
""" 获取多个型钢详情的请求参数 """
input GetMultipleSteelDetailInput {
    """ 识别码列表 """
    identifierList: [String!]!
}
extend type Mutation {
    """ 型钢入库 """
    createSteel(input: CreateSteelInput!): [SteelItem!]! @hasRole(role: [repositoryAdmin])
}
extend type Query {
    """ 获取型钢列表 """
    getSteelList(input: PaginationInput!):GetSteelListRes! @hasRole(role: [ companyAdmin repositoryAdmin projectAdmin maintenanceAdmin ])
    """ 获取一个型钢详情 """
    getOneSteelDetail(input: GetOneSteelDetailInput!): SteelItem! @hasRole(role: [projectAdmin, maintenanceAdmin, repositoryAdmin]) @mustBeDevice
    """ 获取多个型钢详情列表 """
    getMultipleSteelDetail(input: GetMultipleSteelDetailInput): [SteelItem!]! @hasRole(role: [projectAdmin, maintenanceAdmin, repositoryAdmin]) @mustBeDevice
}
`, BuiltIn: false},
	{Name: "../upload.graphql", Input: `scalar Upload

type FileItem {
    """ 文件ID """
    id: Int!
    """ 文访问链接 """
    url: String!
}

extend type Mutation {
    """ 单文件上传 """
    singleUpload(file: Upload!): FileItem!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []roles.GraphqlRole
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_confirmOrRejectOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConfirmOrderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNConfirmOrderInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐConfirmOrderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCompanyUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCompanyUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateCompanyUserInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateCompanyUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCompanyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateCompanyInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateCompanyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createExpress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateExpressInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateExpressInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateExpressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMaintenance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateMaintenanceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateMaintenanceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateMaintenanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createManufacturer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateManufacturerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateManufacturerInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateManufacturerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMaterialManufacturer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateMaterialManufacturerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateMaterialManufacturerInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateMaterialManufacturerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateOrderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateOrderInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateOrderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateProjectInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateProjectInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateProjectInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRepository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateRepositoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateRepositoryInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateRepositoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSpecification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateSpecificationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateSpecificationInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateSpecificationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSteel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateSteelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateSteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateSteelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delMaintenance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DelMaintenanceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDelMaintenanceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐDelMaintenanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCompanyUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["uid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uid"))
		arg0, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["uid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteExpress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteManufacturer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMaterialManufacturer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRepository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["repositoryId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositoryId"))
		arg0, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["repositoryId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSpecification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editCompanyUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EditCompanyUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOEditCompanyUserInput2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditCompanyUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EditCompanyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEditCompanyInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditCompanyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editDevice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EditDeviceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEditDeviceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditDeviceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editExpress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EditExpressInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEditExpressInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditExpressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editMaintenance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EditMaintenanceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEditMaintenanceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditMaintenanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editManufacturer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EditManufacturerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEditManufacturerInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditManufacturerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editMaterialManufacturer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EditMaterialManufacturerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEditMaterialManufacturerInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditMaterialManufacturerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editPrice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 float64
	if tmp, ok := rawArgs["price"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
		arg0, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["price"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editSpecification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EditSpecificationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEditSpecificationInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditSpecificationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_installSteel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InstallLocationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInstallLocationInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐInstallLocationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["mac"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mac"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mac"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_setBatchOfMaintenanceSteel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SetBatchOfMaintenanceSteelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSetBatchOfMaintenanceSteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetBatchOfMaintenanceSteelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setBatchOfRepositorySteelScrap_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SetBatchOfRepositorySteelScrapInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSetBatchOfRepositorySteelScrapInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetBatchOfRepositorySteelScrapInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setBatchOfRepositorySteel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SetBatchOfRepositorySteelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSetBatchOfRepositorySteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetBatchOfRepositorySteelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setEnterMaintenance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SetMaintenanceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSetMaintenanceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetMaintenanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SetPasswordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOSetPasswordInput2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetPasswordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setProjectOrder2Workshop_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProjectOrder2WorkshopInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNProjectOrder2WorkshopInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐProjectOrder2WorkshopInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setProjectSteelEnterRepository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SetProjectSteelEnterRepositoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSetProjectSteelEnterRepositoryInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetProjectSteelEnterRepositoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setProjectSteelOutOfWorkshop_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SetProjectSteelOutOfWorkshopInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSetProjectSteelOutOfWorkshopInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetProjectSteelOutOfWorkshopInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setProjectSteelState_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SetProjectSteelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSetProjectSteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetProjectSteelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setSteelEnterWorkshop_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SetSteelIntoWorkshopInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSetSteelIntoWorkshopInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetSteelIntoWorkshopInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_singleUpload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 graphql.Upload
	if tmp, ok := rawArgs["file"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
		arg0, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get2BeChangedRepositorySteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Get2BeChangedRepositorySteelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGet2BeChangedRepositorySteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeChangedRepositorySteelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get2BeChangedRepositorySteel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Get2BeChangedRepositorySteelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGet2BeChangedRepositorySteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeChangedRepositorySteelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get2BeMaintainSteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Get2BeMaintainSteelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGet2BeMaintainSteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeMaintainSteelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get2BeMaintainSteel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Get2BeMaintainSteelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGet2BeMaintainSteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeMaintainSteelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get2BeScrapRepositorySteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Get2BeScrapRepositorySteelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGet2BeScrapRepositorySteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeScrapRepositorySteelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_get2BeScrapRepositorySteel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Get2BeScrapRepositorySteelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGet2BeScrapRepositorySteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeScrapRepositorySteelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getChangedMaintenanceSteel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetChangedMaintenanceSteelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetChangedMaintenanceSteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetChangedMaintenanceSteelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getCompanyUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetCompanyUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOGetCompanyUserInput2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetCompanyUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getEnterMaintenanceSteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetEnterMaintenanceSteelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetEnterMaintenanceSteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetEnterMaintenanceSteelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getEnterMaintenanceSteel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterMaintenanceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEnterMaintenanceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEnterMaintenanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getEnterRepositorySteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetEnterRepositorySteelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetEnterRepositorySteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetEnterRepositorySteelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMaxLocationCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetMaxLocationCodeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetMaxLocationCodeInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetMaxLocationCodeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMultipleSteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetMultipleSteelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOGetMultipleSteelDetailInput2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetMultipleSteelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOneSteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetOneSteelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetOneSteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOneSteelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOrderDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetOrderDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNgetOrderDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOrderDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOrderList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetOrderListInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetOrderListInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOrderListInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOrderSteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetOrderSteelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetOrderSteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOrderSteelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOutOfWorkshopProjectSteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetOutOfWorkshopProjectSteelDetail
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetOutOfWorkshopProjectSteelDetail2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOutOfWorkshopProjectSteelDetail(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getProjectOrder2WorkshopDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProjectOrder2WorkshopDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNProjectOrder2WorkshopDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐProjectOrder2WorkshopDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getProjectSpecificationDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetProjectSpecificationDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetProjectSpecificationDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetProjectSpecificationDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getProjectSteel2BeChangeDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProjectSteel2BeChangeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNProjectSteel2BeChangeInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐProjectSteel2BeChangeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getProjectSteel2BeChange_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetProjectSteel2BeChangeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetProjectSteel2BeChangeInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetProjectSteel2BeChangeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getProjectSteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetProjectSteelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetProjectSteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetProjectSteelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRepositoryOverview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetRepositoryOverviewInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetRepositoryOverviewInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetRepositoryOverviewInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRepositorySteelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetRepositorySteelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetRepositorySteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetRepositorySteelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRepositorySteel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetRepositorySteelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetRepositorySteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetRepositorySteelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSend2WorkshopOrderListDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetProjectOrder2WorkshopDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetProjectOrder2WorkshopDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetProjectOrder2WorkshopDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSteelList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PaginationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPaginationInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getToBeEnterRepositoryDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetToBeEnterRepositoryDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetToBeEnterRepositoryDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetToBeEnterRepositoryDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getToBeEnterRepositorySpecificationList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetToBeEnterRepositorySpecificationListInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetToBeEnterRepositorySpecificationListInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetToBeEnterRepositorySpecificationListInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_isAccessLocationCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.IsAccessLocationCodeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIsAccessLocationCodeInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐIsAccessLocationCodeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CompanyItem_id(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_name(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_pinYin(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PinYin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_symbol(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Symbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_logoFile(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompanyItem().LogoFile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileItem)
	fc.Result = res
	return ec.marshalNFileItem2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐFileItem(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_backgroundFile(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompanyItem().BackgroundFile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileItem)
	fc.Result = res
	return ec.marshalNFileItem2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐFileItem(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_isAble(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAble, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_phone(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_wechat(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wechat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_startedAt(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_endedAt(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_createdAt(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_adminName(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompanyItem().AdminName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_adminPhone(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompanyItem().AdminPhone(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_adminWechat(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompanyItem().AdminWechat(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyItem_adminAvatar(ctx context.Context, field graphql.CollectedField, obj *companies.Companies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompanyItem().AdminAvatar(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileItem)
	fc.Result = res
	return ec.marshalNFileItem2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐFileItem(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceItem_id(ctx context.Context, field graphql.CollectedField, obj *devices.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceItem_mac(ctx context.Context, field graphql.CollectedField, obj *devices.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mac, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceItem_userInfo(ctx context.Context, field graphql.CollectedField, obj *devices.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeviceItem().UserInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _DeviceItem_isAble(ctx context.Context, field graphql.CollectedField, obj *devices.Device) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeviceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAble, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ErrCodes_code(ctx context.Context, field graphql.CollectedField, obj *model.ErrCodes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ErrCodes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ErrCodes_desc(ctx context.Context, field graphql.CollectedField, obj *model.ErrCodes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ErrCodes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpressCompanyItem_id(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpressCompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpressCompanyItem_name(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpressCompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpressCompanyItem_isDefault(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpressCompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpressCompanyItem_remark(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpressCompanyItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpressItem_id(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpressItem_name(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpressItem_remark(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpressItem_isDefault(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FileItem_id(ctx context.Context, field graphql.CollectedField, obj *model.FileItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FileItem_url(ctx context.Context, field graphql.CollectedField, obj *model.FileItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Get2BeChangedRepositorySteelDetailRes_list(ctx context.Context, field graphql.CollectedField, obj *steels.Get2BeChangedRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Get2BeChangedRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteelsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Get2BeChangedRepositorySteelDetailRes_total(ctx context.Context, field graphql.CollectedField, obj *steels.Get2BeChangedRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Get2BeChangedRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Get2BeChangedRepositorySteelDetailRes_weight(ctx context.Context, field graphql.CollectedField, obj *steels.Get2BeChangedRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Get2BeChangedRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Get2BeScrapRepositorySteelDetailRes_list(ctx context.Context, field graphql.CollectedField, obj *steels.Get2BeScrapRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Get2BeScrapRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteelsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Get2BeScrapRepositorySteelDetailRes_total(ctx context.Context, field graphql.CollectedField, obj *steels.Get2BeScrapRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Get2BeScrapRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Get2BeScrapRepositorySteelDetailRes_weight(ctx context.Context, field graphql.CollectedField, obj *steels.Get2BeScrapRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Get2BeScrapRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetEnterMaintenanceSteelDetailRes_list(ctx context.Context, field graphql.CollectedField, obj *maintenance.GetEnterMaintenanceSteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetEnterMaintenanceSteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*maintenance_record.MaintenanceRecord)
	fc.Result = res
	return ec.marshalNMaintenanceRecordItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetEnterMaintenanceSteelDetailRes_total(ctx context.Context, field graphql.CollectedField, obj *maintenance.GetEnterMaintenanceSteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetEnterMaintenanceSteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetEnterMaintenanceSteelDetailRes_weight(ctx context.Context, field graphql.CollectedField, obj *maintenance.GetEnterMaintenanceSteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetEnterMaintenanceSteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetEnterRepositorySteelDetailRes_orderSteel(ctx context.Context, field graphql.CollectedField, obj *projects.GetEnterRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetEnterRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderSteel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(order_specification_steel.OrderSpecificationSteel)
	fc.Result = res
	return ec.marshalNOrderSpecificationSteelItem2httpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, field.Selections, res)
}

func (ec *executionContext) _GetEnterRepositorySteelDetailRes_storedTotal(ctx context.Context, field graphql.CollectedField, obj *projects.GetEnterRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetEnterRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoredTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetEnterRepositorySteelDetailRes_toBeStoreTotal(ctx context.Context, field graphql.CollectedField, obj *projects.GetEnterRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetEnterRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToBeStoreTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetOutOfWorkshopProjectSteelDetailRes_orderSteel(ctx context.Context, field graphql.CollectedField, obj *projects.GetOutOfWorkshopProjectSteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetOutOfWorkshopProjectSteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderSteel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(order_specification_steel.OrderSpecificationSteel)
	fc.Result = res
	return ec.marshalNOrderSpecificationSteelItem2httpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, field.Selections, res)
}

func (ec *executionContext) _GetOutOfWorkshopProjectSteelDetailRes_toBeStoreTotal(ctx context.Context, field graphql.CollectedField, obj *projects.GetOutOfWorkshopProjectSteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetOutOfWorkshopProjectSteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToBeStoreTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetOutOfWorkshopProjectSteelDetailRes_storeTotal(ctx context.Context, field graphql.CollectedField, obj *projects.GetOutOfWorkshopProjectSteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetOutOfWorkshopProjectSteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoreTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectOrder2WorkshopDetailRes_list(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectOrder2WorkshopDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectOrder2WorkshopDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteelsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectOrder2WorkshopDetailRes_total(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectOrder2WorkshopDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectOrder2WorkshopDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectOrder2WorkshopDetailRes_totalWeight(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectOrder2WorkshopDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectOrder2WorkshopDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectSpecificationDetailRes_list(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectSpecificationDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectSpecificationDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*order_specification.OrderSpecification)
	fc.Result = res
	return ec.marshalNOrderSpecificationItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specificationᚐOrderSpecification(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectSpecificationDetailRes_total(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectSpecificationDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectSpecificationDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectSpecificationDetailRes_weight(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectSpecificationDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectSpecificationDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectSteel2BeChangeDetailRes_list(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectSteel2BeChangeDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectSteel2BeChangeDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*order_specification_steel.OrderSpecificationSteel)
	fc.Result = res
	return ec.marshalNOrderSpecificationSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectSteel2BeChangeDetailRes_total(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectSteel2BeChangeDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectSteel2BeChangeDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectSteel2BeChangeDetailRes_weightTotal(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectSteel2BeChangeDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectSteel2BeChangeDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeightTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectSteelDetailRes_list(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectSteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectSteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*order_specification_steel.OrderSpecificationSteel)
	fc.Result = res
	return ec.marshalNOrderSpecificationSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectSteelDetailRes_total(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectSteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectSteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetProjectSteelDetailRes_weight(ctx context.Context, field graphql.CollectedField, obj *projects.GetProjectSteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetProjectSteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositoryOverviewRes_total(ctx context.Context, field graphql.CollectedField, obj *repositories.GetRepositoryOverviewRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositoryOverviewRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositoryOverviewRes_weight(ctx context.Context, field graphql.CollectedField, obj *repositories.GetRepositoryOverviewRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositoryOverviewRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositorySteelDetailRes_list(ctx context.Context, field graphql.CollectedField, obj *steels.GetRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositorySteelDetailRes_total(ctx context.Context, field graphql.CollectedField, obj *steels.GetRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositorySteelDetailRes_weight(ctx context.Context, field graphql.CollectedField, obj *steels.GetRepositorySteelDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositorySteelDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositorySteelListItemRes_total(ctx context.Context, field graphql.CollectedField, obj *repositories.GetRepositorySteelListItemRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositorySteelListItemRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositorySteelListItemRes_weight(ctx context.Context, field graphql.CollectedField, obj *repositories.GetRepositorySteelListItemRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositorySteelListItemRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositorySteelListItemRes_specificationInfo(ctx context.Context, field graphql.CollectedField, obj *repositories.GetRepositorySteelListItemRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositorySteelListItemRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecificationInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(specificationinfo.SpecificationInfo)
	fc.Result = res
	return ec.marshalNSpecificationItem2httpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositorySteelRes_list(ctx context.Context, field graphql.CollectedField, obj *repositories.GetRepositorySteelRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositorySteelRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*repositories.GetRepositorySteelListItemRes)
	fc.Result = res
	return ec.marshalNGetRepositorySteelListItemRes2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐGetRepositorySteelListItemResᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositorySteelRes_total(ctx context.Context, field graphql.CollectedField, obj *repositories.GetRepositorySteelRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositorySteelRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetRepositorySteelRes_weight(ctx context.Context, field graphql.CollectedField, obj *repositories.GetRepositorySteelRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetRepositorySteelRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetSend2WorkshopOrderListDetailRes_list(ctx context.Context, field graphql.CollectedField, obj *projects.GetSend2WorkshopOrderListDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetSend2WorkshopOrderListDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]order_specification_steel.OrderSpecificationSteel)
	fc.Result = res
	return ec.marshalNOrderSpecificationSteelItem2ᚕhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetSend2WorkshopOrderListDetailRes_total(ctx context.Context, field graphql.CollectedField, obj *projects.GetSend2WorkshopOrderListDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetSend2WorkshopOrderListDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetSend2WorkshopOrderListDetailRes_totalWeight(ctx context.Context, field graphql.CollectedField, obj *projects.GetSend2WorkshopOrderListDetailRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetSend2WorkshopOrderListDetailRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetSteelListRes_total(ctx context.Context, field graphql.CollectedField, obj *steels.GetSteelListRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetSteelListRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetSteelListRes_list(ctx context.Context, field graphql.CollectedField, obj *steels.GetSteelListRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetSteelListRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, field.Selections, res)
}

func (ec *executionContext) _GraphDesc_title(ctx context.Context, field graphql.CollectedField, obj *model.GraphDesc) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GraphDesc",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GraphDesc_desc(ctx context.Context, field graphql.CollectedField, obj *model.GraphDesc) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GraphDesc",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GraphDesc_errCodes(ctx context.Context, field graphql.CollectedField, obj *model.GraphDesc) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GraphDesc",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrCodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrCodes)
	fc.Result = res
	return ec.marshalNErrCodes2ᚕᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐErrCodes(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginRes_accessToken(ctx context.Context, field graphql.CollectedField, obj *model.LoginRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LoginRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginRes_expired(ctx context.Context, field graphql.CollectedField, obj *model.LoginRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LoginRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginRes_role(ctx context.Context, field graphql.CollectedField, obj *model.LoginRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LoginRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(roles.GraphqlRole)
	fc.Result = res
	return ec.marshalNRole2httpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRole(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginRes_roleName(ctx context.Context, field graphql.CollectedField, obj *model.LoginRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LoginRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceItem_id(ctx context.Context, field graphql.CollectedField, obj *maintenance.Maintenance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceItem_name(ctx context.Context, field graphql.CollectedField, obj *maintenance.Maintenance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceItem_address(ctx context.Context, field graphql.CollectedField, obj *maintenance.Maintenance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceItem_remark(ctx context.Context, field graphql.CollectedField, obj *maintenance.Maintenance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceItem_isAble(ctx context.Context, field graphql.CollectedField, obj *maintenance.Maintenance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAble, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceItem_admin(ctx context.Context, field graphql.CollectedField, obj *maintenance.Maintenance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MaintenanceItem().Admin(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceItem_total(ctx context.Context, field graphql.CollectedField, obj *maintenance.Maintenance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MaintenanceItem().Total(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceItem_weightTotal(ctx context.Context, field graphql.CollectedField, obj *maintenance.Maintenance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MaintenanceItem().WeightTotal(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceRecordItem_id(ctx context.Context, field graphql.CollectedField, obj *maintenance_record.MaintenanceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceRecordItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceRecordItem_maintenance(ctx context.Context, field graphql.CollectedField, obj *maintenance_record.MaintenanceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceRecordItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MaintenanceRecordItem().Maintenance(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*maintenance.Maintenance)
	fc.Result = res
	return ec.marshalNMaintenanceItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenanceᚐMaintenance(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceRecordItem_steel(ctx context.Context, field graphql.CollectedField, obj *maintenance_record.MaintenanceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceRecordItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MaintenanceRecordItem().Steel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceRecordItem_stateInfo(ctx context.Context, field graphql.CollectedField, obj *maintenance_record.MaintenanceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceRecordItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MaintenanceRecordItem().StateInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.StateItem)
	fc.Result = res
	return ec.marshalNStateItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItem(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceRecordItem_useDays(ctx context.Context, field graphql.CollectedField, obj *maintenance_record.MaintenanceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceRecordItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MaintenanceRecordItem().UseDays(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceRecordItem_outedAt(ctx context.Context, field graphql.CollectedField, obj *maintenance_record.MaintenanceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceRecordItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceRecordItem_enteredAt(ctx context.Context, field graphql.CollectedField, obj *maintenance_record.MaintenanceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceRecordItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnteredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceRecordItem_outRepositoryAt(ctx context.Context, field graphql.CollectedField, obj *maintenance_record.MaintenanceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceRecordItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutRepositoryAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MaintenanceRecordItem_enterRepositoryAt(ctx context.Context, field graphql.CollectedField, obj *maintenance_record.MaintenanceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaintenanceRecordItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterRepositoryAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ManufacturerItem_id(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManufacturerItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ManufacturerItem_name(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManufacturerItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ManufacturerItem_remark(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManufacturerItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ManufacturerItem_isDefault(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ManufacturerItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MaterialManufacturerItem_id(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaterialManufacturerItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _MaterialManufacturerItem_name(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaterialManufacturerItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MaterialManufacturerItem_remark(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaterialManufacturerItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MaterialManufacturerItem_isDefault(ctx context.Context, field graphql.CollectedField, obj *codeinfo.CodeInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MaterialManufacturerItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgItem_id(ctx context.Context, field graphql.CollectedField, obj *msg.Msg) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgItem_isRead(ctx context.Context, field graphql.CollectedField, obj *msg.Msg) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgItem_content(ctx context.Context, field graphql.CollectedField, obj *msg.Msg) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MsgItem_createdAt(ctx context.Context, field graphql.CollectedField, obj *msg.Msg) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MsgItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_login_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, args["phone"].(string), args["password"].(string), args["mac"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LoginRes)
	fc.Result = res
	return ec.marshalNLoginRes2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐLoginRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateCompany(rctx, args["input"].(model.CreateCompanyInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"admin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*companies.Companies); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/companies.Companies`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*companies.Companies)
	fc.Result = res
	return ec.marshalNCompanyItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcompaniesᚐCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EditCompany(rctx, args["input"].(model.EditCompanyInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"admin", "companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*companies.Companies); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/companies.Companies`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*companies.Companies)
	fc.Result = res
	return ec.marshalNCompanyItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcompaniesᚐCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteCompany(rctx, args["id"].(int64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"admin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCompanyUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCompanyUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateCompanyUser(rctx, args["input"].(model.CreateCompanyUserInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*users.Users); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/users.Users`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editCompanyUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editCompanyUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EditCompanyUser(rctx, args["input"].(*model.EditCompanyUserInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*users.Users); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/users.Users`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCompanyUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCompanyUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteCompanyUser(rctx, args["uid"].(int64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editDevice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EditDevice(rctx, args["input"].(model.EditDeviceInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createExpress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createExpress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateExpress(rctx, args["input"].(model.CreateExpressInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*codeinfo.CodeInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/codeinfo.CodeInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNExpressItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editExpress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editExpress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EditExpress(rctx, args["input"].(model.EditExpressInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*codeinfo.CodeInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/codeinfo.CodeInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNExpressItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteExpress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteExpress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteExpress(rctx, args["id"].(int64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createMaintenance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createMaintenance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateMaintenance(rctx, args["input"].(model.CreateMaintenanceInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*maintenance.Maintenance); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/maintenance.Maintenance`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*maintenance.Maintenance)
	fc.Result = res
	return ec.marshalNMaintenanceItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenanceᚐMaintenance(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editMaintenance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editMaintenance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EditMaintenance(rctx, args["input"].(model.EditMaintenanceInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*maintenance.Maintenance); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/maintenance.Maintenance`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*maintenance.Maintenance)
	fc.Result = res
	return ec.marshalNMaintenanceItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenanceᚐMaintenance(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delMaintenance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delMaintenance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DelMaintenance(rctx, args["input"].(model.DelMaintenanceInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setEnterMaintenance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setEnterMaintenance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetEnterMaintenance(rctx, args["input"].(model.SetMaintenanceInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*maintenance_record.MaintenanceRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/maintenance_record.MaintenanceRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*maintenance_record.MaintenanceRecord)
	fc.Result = res
	return ec.marshalNMaintenanceRecordItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createManufacturer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createManufacturer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateManufacturer(rctx, args["input"].(model.CreateManufacturerInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*codeinfo.CodeInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/codeinfo.CodeInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editManufacturer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editManufacturer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EditManufacturer(rctx, args["input"].(model.EditManufacturerInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*codeinfo.CodeInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/codeinfo.CodeInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteManufacturer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteManufacturer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteManufacturer(rctx, args["id"].(int64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createMaterialManufacturer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createMaterialManufacturer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateMaterialManufacturer(rctx, args["input"].(model.CreateMaterialManufacturerInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*codeinfo.CodeInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/codeinfo.CodeInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNMaterialManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editMaterialManufacturer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editMaterialManufacturer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EditMaterialManufacturer(rctx, args["input"].(model.EditMaterialManufacturerInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*codeinfo.CodeInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/codeinfo.CodeInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNMaterialManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteMaterialManufacturer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteMaterialManufacturer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteMaterialManufacturer(rctx, args["id"].(int64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetPassword(rctx, args["input"].(*model.SetPasswordInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin", "projectAdmin", "maintenanceAdmin", "admin", "companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setSteelEnterWorkshop(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setSteelEnterWorkshop_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetSteelEnterWorkshop(rctx, args["input"].(model.SetSteelIntoWorkshopInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*order_specification_steel.OrderSpecificationSteel); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/order_specification_steel.OrderSpecificationSteel`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*order_specification_steel.OrderSpecificationSteel)
	fc.Result = res
	return ec.marshalNOrderSpecificationSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createOrder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateOrder(rctx, args["input"].(model.CreateOrderInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*orders.Order); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/orders.Order`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*orders.Order)
	fc.Result = res
	return ec.marshalNOrderItem2ᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_confirmOrRejectOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_confirmOrRejectOrder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ConfirmOrRejectOrder(rctx, args["input"].(model.ConfirmOrderInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*orders.Order); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/orders.Order`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*orders.Order)
	fc.Result = res
	return ec.marshalNOrderItem2ᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setProjectOrder2Workshop(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setProjectOrder2Workshop_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetProjectOrder2Workshop(rctx, args["input"].(model.ProjectOrder2WorkshopInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*orders.Order); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/orders.Order`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*orders.Order)
	fc.Result = res
	return ec.marshalNOrderItem2ᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editPrice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editPrice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EditPrice(rctx, args["price"].(float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProject_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateProject(rctx, args["input"].(model.CreateProjectInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*projects.Projects); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/projects.Projects`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*projects.Projects)
	fc.Result = res
	return ec.marshalNProjectItem2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjects(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_installSteel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_installSteel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().InstallSteel(rctx, args["input"].(model.InstallLocationInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setProjectSteelState(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setProjectSteelState_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetProjectSteelState(rctx, args["input"].(model.SetProjectSteelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setProjectSteelOutOfWorkshop(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setProjectSteelOutOfWorkshop_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetProjectSteelOutOfWorkshop(rctx, args["input"].(model.SetProjectSteelOutOfWorkshopInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setProjectSteelEnterRepository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setProjectSteelEnterRepository_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetProjectSteelEnterRepository(rctx, args["input"].(model.SetProjectSteelEnterRepositoryInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRepository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRepository_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRepository(rctx, args["input"].(model.CreateRepositoryInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*repositories.Repositories); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/repositories.Repositories`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*repositories.Repositories)
	fc.Result = res
	return ec.marshalNRepositoryItem2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐRepositories(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRepository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRepository_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRepository(rctx, args["repositoryId"].(int64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setBatchOfRepositorySteel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setBatchOfRepositorySteel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetBatchOfRepositorySteel(rctx, args["input"].(model.SetBatchOfRepositorySteelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*steels.Steels); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/steels.Steels`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteelsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setBatchOfRepositorySteelScrap(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setBatchOfRepositorySteelScrap_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetBatchOfRepositorySteelScrap(rctx, args["input"].(model.SetBatchOfRepositorySteelScrapInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*steels.Steels); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/steels.Steels`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteelsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setBatchOfMaintenanceSteel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setBatchOfMaintenanceSteel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetBatchOfMaintenanceSteel(rctx, args["input"].(model.SetBatchOfMaintenanceSteelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*steels.Steels); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/steels.Steels`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteelsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSpecification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSpecification_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSpecification(rctx, args["input"].(model.CreateSpecificationInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*specificationinfo.SpecificationInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/specificationinfo.SpecificationInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*specificationinfo.SpecificationInfo)
	fc.Result = res
	return ec.marshalNSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editSpecification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editSpecification_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EditSpecification(rctx, args["input"].(model.EditSpecificationInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*specificationinfo.SpecificationInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/specificationinfo.SpecificationInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*specificationinfo.SpecificationInfo)
	fc.Result = res
	return ec.marshalNSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteSpecification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteSpecification_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteSpecification(rctx, args["id"].(int64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSteel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSteel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSteel(rctx, args["input"].(model.CreateSteelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*steels.Steels); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/steels.Steels`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteelsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_singleUpload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_singleUpload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SingleUpload(rctx, args["file"].(graphql.Upload))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileItem)
	fc.Result = res
	return ec.marshalNFileItem2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐFileItem(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderExpressItem_id(ctx context.Context, field graphql.CollectedField, obj *order_express.OrderExpress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderExpressItem_expressCompany(ctx context.Context, field graphql.CollectedField, obj *order_express.OrderExpress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderExpressItem().ExpressCompany(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNExpressCompanyItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderExpressItem_expressNo(ctx context.Context, field graphql.CollectedField, obj *order_express.OrderExpress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpressNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderExpressItem_sender(ctx context.Context, field graphql.CollectedField, obj *order_express.OrderExpress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderExpressItem().Sender(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderExpressItem_receiver(ctx context.Context, field graphql.CollectedField, obj *order_express.OrderExpress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderExpressItem().Receiver(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderExpressItem_direction(ctx context.Context, field graphql.CollectedField, obj *order_express.OrderExpress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(order_express.OrderExpressDirection)
	fc.Result = res
	return ec.marshalNOrderExpressDirection2httpᚑapiᚋappᚋmodelsᚋorder_expressᚐOrderExpressDirection(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderExpressItem_receiveAt(ctx context.Context, field graphql.CollectedField, obj *order_express.OrderExpress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiveAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderExpressItem_createdAt(ctx context.Context, field graphql.CollectedField, obj *order_express.OrderExpress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderExpressItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_id(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_project(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderItem().Project(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*projects.Projects)
	fc.Result = res
	return ec.marshalNProjectItem2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjects(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_state(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_partList(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_createUser(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderItem().CreateUser(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_confirmedUser(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderItem().ConfirmedUser(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*users.Users)
	fc.Result = res
	return ec.marshalOUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_expressList(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderItem().ExpressList(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*order_express.OrderExpress)
	fc.Result = res
	return ec.marshalOOrderExpressItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_expressᚐOrderExpress(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_remark(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_orderNo(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_total(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderItem().Total(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_weight(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderItem().Weight(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_repository(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderItem().Repository(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*repositories.Repositories)
	fc.Result = res
	return ec.marshalNRepositoryItem2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐRepositories(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_orderSpecificationList(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderItem().OrderSpecificationList(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*order_specification.OrderSpecification)
	fc.Result = res
	return ec.marshalNOrderSpecificationItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specificationᚐOrderSpecificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_createdAt(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_confirmedAt(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderItem_expectedReturnAt(ctx context.Context, field graphql.CollectedField, obj *orders.Order) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedReturnAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationItem_id(ctx context.Context, field graphql.CollectedField, obj *order_specification.OrderSpecification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationItem_order(ctx context.Context, field graphql.CollectedField, obj *order_specification.OrderSpecification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationItem().Order(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*orders.Order)
	fc.Result = res
	return ec.marshalNOrderItem2ᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationItem_specification(ctx context.Context, field graphql.CollectedField, obj *order_specification.OrderSpecification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Specification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationItem_specificationInfo(ctx context.Context, field graphql.CollectedField, obj *order_specification.OrderSpecification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationItem().SpecificationInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*specificationinfo.SpecificationInfo)
	fc.Result = res
	return ec.marshalNSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationItem_total(ctx context.Context, field graphql.CollectedField, obj *order_specification.OrderSpecification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationItem_totalSend(ctx context.Context, field graphql.CollectedField, obj *order_specification.OrderSpecification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationItem().TotalSend(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationItem_totalToBeSend(ctx context.Context, field graphql.CollectedField, obj *order_specification.OrderSpecification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationItem().TotalToBeSend(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationItem_storeTotal(ctx context.Context, field graphql.CollectedField, obj *order_specification.OrderSpecification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationItem().StoreTotal(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationItem_workshopReceiveTotal(ctx context.Context, field graphql.CollectedField, obj *order_specification.OrderSpecification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationItem().WorkshopReceiveTotal(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationItem_weight(ctx context.Context, field graphql.CollectedField, obj *order_specification.OrderSpecification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationItem().Weight(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_id(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_stateInfo(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationSteelItem().StateInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.StateItem)
	fc.Result = res
	return ec.marshalNStateItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItem(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_steel(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationSteelItem().Steel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_orderSpecification(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationSteelItem().OrderSpecification(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*order_specification.OrderSpecification)
	fc.Result = res
	return ec.marshalNOrderSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specificationᚐOrderSpecification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_toWorkshopExpress(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationSteelItem().ToWorkshopExpress(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalOExpressItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_toRepositoryExpress(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationSteelItem().ToRepositoryExpress(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalOExpressItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_locationCode(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_enterRepositoryUser(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrderSpecificationSteelItem().EnterRepositoryUser(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*users.Users)
	fc.Result = res
	return ec.marshalOUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_installationAt(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallationAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_enterWorkshopAt(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterWorkshopAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_outWorkshopAt(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutWorkshopAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_outRepositoryAt(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutRepositoryAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSpecificationSteelItem_EnterRepositoryAt(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrderSpecificationSteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterRepositoryAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectItem_id(ctx context.Context, field graphql.CollectedField, obj *projects.Projects) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectItem_name(ctx context.Context, field graphql.CollectedField, obj *projects.Projects) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectItem_city(ctx context.Context, field graphql.CollectedField, obj *projects.Projects) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectItem_leaderList(ctx context.Context, field graphql.CollectedField, obj *projects.Projects) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProjectItem().LeaderList(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsersᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectItem_address(ctx context.Context, field graphql.CollectedField, obj *projects.Projects) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectItem_startedAt(ctx context.Context, field graphql.CollectedField, obj *projects.Projects) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectItem_endedAt(ctx context.Context, field graphql.CollectedField, obj *projects.Projects) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectItem_remark(ctx context.Context, field graphql.CollectedField, obj *projects.Projects) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProjectItem_company(ctx context.Context, field graphql.CollectedField, obj *projects.Projects) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProjectItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProjectItem().Company(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*companies.Companies)
	fc.Result = res
	return ec.marshalNCompanyItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcompaniesᚐCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_errorCodeDesc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ErrorCodeDesc(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GraphDesc)
	fc.Result = res
	return ec.marshalNGraphDesc2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGraphDesc(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetAllCompany(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"admin", "companyAdmin", "repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*companies.Companies); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/companies.Companies`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*companies.Companies)
	fc.Result = res
	return ec.marshalNCompanyItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋcompaniesᚐCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCompanyUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getCompanyUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetCompanyUser(rctx, args["input"].(*model.GetCompanyUserInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*users.Users); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/users.Users`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDeviceList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetDeviceList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*devices.Device); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/devices.Device`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*devices.Device)
	fc.Result = res
	return ec.marshalNDeviceItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋdevicesᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getExpressList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetExpressList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*codeinfo.CodeInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/codeinfo.CodeInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNExpressItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMaintenanceList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetMaintenanceList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*maintenance.Maintenance); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/maintenance.Maintenance`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*maintenance.Maintenance)
	fc.Result = res
	return ec.marshalNMaintenanceItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋmaintenanceᚐMaintenance(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getEnterMaintenanceSteel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getEnterMaintenanceSteel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetEnterMaintenanceSteel(rctx, args["input"].(model.EnterMaintenanceInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*maintenance_record.MaintenanceRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/maintenance_record.MaintenanceRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*maintenance_record.MaintenanceRecord)
	fc.Result = res
	return ec.marshalNMaintenanceRecordItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getEnterMaintenanceSteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getEnterMaintenanceSteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetEnterMaintenanceSteelDetail(rctx, args["input"].(model.GetEnterMaintenanceSteelDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*maintenance.GetEnterMaintenanceSteelDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/maintenance.GetEnterMaintenanceSteelDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*maintenance.GetEnterMaintenanceSteelDetailRes)
	fc.Result = res
	return ec.marshalNGetEnterMaintenanceSteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenanceᚐGetEnterMaintenanceSteelDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMaintenanceStateForChanged(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetMaintenanceStateForChanged(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*steels.StateItem); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/steels.StateItem`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.StateItem)
	fc.Result = res
	return ec.marshalNStateItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getChangedMaintenanceSteel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getChangedMaintenanceSteel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetChangedMaintenanceSteel(rctx, args["input"].(model.GetChangedMaintenanceSteelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*maintenance_record.MaintenanceRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/maintenance_record.MaintenanceRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*maintenance_record.MaintenanceRecord)
	fc.Result = res
	return ec.marshalNMaintenanceRecordItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getManufacturers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetManufacturers(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*codeinfo.CodeInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/codeinfo.CodeInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNManufacturerItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMaterialManufacturers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetMaterialManufacturers(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*codeinfo.CodeInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/codeinfo.CodeInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNMaterialManufacturerItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMyInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetMyInfo(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*users.Users); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/users.Users`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMsgList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetMsgList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin", "repositoryAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*msg.Msg); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/msg.Msg`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*msg.Msg)
	fc.Result = res
	return ec.marshalNMsgItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋmsgᚐMsg(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOrderList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getOrderList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetOrderList(rctx, args["input"].(model.GetOrderListInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin", "companyAdmin", "repositoryAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*orders.Order); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/orders.Order`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*orders.Order)
	fc.Result = res
	return ec.marshalNOrderItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getTobeSendWorkshopOrderList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetTobeSendWorkshopOrderList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*orders.Order); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/orders.Order`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*orders.Order)
	fc.Result = res
	return ec.marshalNOrderItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOrderDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getOrderDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetOrderDetail(rctx, args["input"].(model.GetOrderDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*orders.Order); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/orders.Order`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*orders.Order)
	fc.Result = res
	return ec.marshalNOrderItem2ᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getProjectOrder2WorkshopDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getProjectOrder2WorkshopDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetProjectOrder2WorkshopDetail(rctx, args["input"].(model.ProjectOrder2WorkshopDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*projects.GetProjectOrder2WorkshopDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/projects.GetProjectOrder2WorkshopDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*projects.GetProjectOrder2WorkshopDetailRes)
	fc.Result = res
	return ec.marshalNGetProjectOrder2WorkshopDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectOrder2WorkshopDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSend2WorkshopOrderList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetSend2WorkshopOrderList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*orders.Order); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/orders.Order`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*orders.Order)
	fc.Result = res
	return ec.marshalNOrderItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSend2WorkshopOrderListDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSend2WorkshopOrderListDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetSend2WorkshopOrderListDetail(rctx, args["input"].(model.GetProjectOrder2WorkshopDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*projects.GetSend2WorkshopOrderListDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/projects.GetSend2WorkshopOrderListDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*projects.GetSend2WorkshopOrderListDetailRes)
	fc.Result = res
	return ec.marshalNGetSend2WorkshopOrderListDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetSend2WorkshopOrderListDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getProjectSteelStateList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetProjectSteelStateList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.StateItem)
	fc.Result = res
	return ec.marshalNStateItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPrice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPrice(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getProjectLis(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetProjectLis(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*projects.Projects); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/projects.Projects`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*projects.Projects)
	fc.Result = res
	return ec.marshalNProjectItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjects(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getProjectSpecificationDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getProjectSpecificationDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetProjectSpecificationDetail(rctx, args["input"].(model.GetProjectSpecificationDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*projects.GetProjectSpecificationDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/projects.GetProjectSpecificationDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*projects.GetProjectSpecificationDetailRes)
	fc.Result = res
	return ec.marshalNGetProjectSpecificationDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectSpecificationDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getProjectSteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getProjectSteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetProjectSteelDetail(rctx, args["input"].(model.GetProjectSteelDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*projects.GetProjectSteelDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/projects.GetProjectSteelDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*projects.GetProjectSteelDetailRes)
	fc.Result = res
	return ec.marshalNGetProjectSteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectSteelDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMaxLocationCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getMaxLocationCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetMaxLocationCode(rctx, args["input"].(model.GetMaxLocationCodeInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(int64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be int64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_isAccessLocationCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_isAccessLocationCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().IsAccessLocationCode(rctx, args["input"].(model.IsAccessLocationCodeInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getProjectSteel2BeChangeDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getProjectSteel2BeChangeDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetProjectSteel2BeChangeDetail(rctx, args["input"].(model.ProjectSteel2BeChangeInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*projects.GetProjectSteel2BeChangeDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/projects.GetProjectSteel2BeChangeDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*projects.GetProjectSteel2BeChangeDetailRes)
	fc.Result = res
	return ec.marshalNGetProjectSteel2BeChangeDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectSteel2BeChangeDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getProjectSteel2BeChange(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getProjectSteel2BeChange_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetProjectSteel2BeChange(rctx, args["input"].(model.GetProjectSteel2BeChangeInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*order_specification_steel.OrderSpecificationSteel); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/order_specification_steel.OrderSpecificationSteel`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*order_specification_steel.OrderSpecificationSteel)
	fc.Result = res
	return ec.marshalNOrderSpecificationSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOutOfWorkshopProjectList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetOutOfWorkshopProjectList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*projects.Projects); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/projects.Projects`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*projects.Projects)
	fc.Result = res
	return ec.marshalNProjectItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjects(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOutOfWorkshopProjectSteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getOutOfWorkshopProjectSteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetOutOfWorkshopProjectSteelDetail(rctx, args["input"].(model.GetOutOfWorkshopProjectSteelDetail))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*projects.GetOutOfWorkshopProjectSteelDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/projects.GetOutOfWorkshopProjectSteelDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*projects.GetOutOfWorkshopProjectSteelDetailRes)
	fc.Result = res
	return ec.marshalNGetOutOfWorkshopProjectSteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetOutOfWorkshopProjectSteelDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOrderSteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getOrderSteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetOrderSteelDetail(rctx, args["input"].(model.GetOrderSteelDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive1, role)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*order_specification_steel.OrderSpecificationSteel); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/order_specification_steel.OrderSpecificationSteel`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*order_specification_steel.OrderSpecificationSteel)
	fc.Result = res
	return ec.marshalNOrderSpecificationSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getProjectStateListForChanged(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetProjectStateListForChanged(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*steels.StateItem); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/steels.StateItem`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.StateItem)
	fc.Result = res
	return ec.marshalNStateItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getEnterRepositoryProjectList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetEnterRepositoryProjectList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive1, role)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*projects.Projects); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/projects.Projects`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*projects.Projects)
	fc.Result = res
	return ec.marshalNProjectItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjectsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getEnterRepositorySteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getEnterRepositorySteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetEnterRepositorySteelDetail(rctx, args["input"].(model.GetEnterRepositorySteelDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive1, role)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*projects.GetEnterRepositorySteelDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/projects.GetEnterRepositorySteelDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*projects.GetEnterRepositorySteelDetailRes)
	fc.Result = res
	return ec.marshalNGetEnterRepositorySteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetEnterRepositorySteelDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getToBeEnterRepositoryStateList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetToBeEnterRepositoryStateList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*steels.StateItem); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/steels.StateItem`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.StateItem)
	fc.Result = res
	return ec.marshalNStateItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getToBeEnterRepositorySpecificationList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getToBeEnterRepositorySpecificationList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetToBeEnterRepositorySpecificationList(rctx, args["input"].(model.GetToBeEnterRepositorySpecificationListInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*specificationinfo.SpecificationInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/specificationinfo.SpecificationInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*specificationinfo.SpecificationInfo)
	fc.Result = res
	return ec.marshalNSpecificationItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getToBeEnterRepositoryDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getToBeEnterRepositoryDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetToBeEnterRepositoryDetail(rctx, args["input"].(model.GetToBeEnterRepositoryDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*order_specification_steel.OrderSpecificationSteel); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/order_specification_steel.OrderSpecificationSteel`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*order_specification_steel.OrderSpecificationSteel)
	fc.Result = res
	return ec.marshalNOrderSpecificationSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getRepositoryList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetRepositoryList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin", "companyAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*repositories.Repositories); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/repositories.Repositories`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*repositories.Repositories)
	fc.Result = res
	return ec.marshalNRepositoryItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐRepositories(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getRepositoryOverview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getRepositoryOverview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetRepositoryOverview(rctx, args["input"].(model.GetRepositoryOverviewInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*repositories.GetRepositoryOverviewRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/repositories.GetRepositoryOverviewRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*repositories.GetRepositoryOverviewRes)
	fc.Result = res
	return ec.marshalNGetRepositoryOverviewRes2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐGetRepositoryOverviewRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllStateList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetAllStateList(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*steels.StateItem); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/steels.StateItem`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.StateItem)
	fc.Result = res
	return ec.marshalNStateItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getRepositorySteel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getRepositorySteel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetRepositorySteel(rctx, args["input"].(model.GetRepositorySteelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*repositories.GetRepositorySteelRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/repositories.GetRepositorySteelRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*repositories.GetRepositorySteelRes)
	fc.Result = res
	return ec.marshalNGetRepositorySteelRes2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐGetRepositorySteelRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getRepositorySteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getRepositorySteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetRepositorySteelDetail(rctx, args["input"].(model.GetRepositorySteelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*steels.GetRepositorySteelDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/steels.GetRepositorySteelDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.GetRepositorySteelDetailRes)
	fc.Result = res
	return ec.marshalNGetRepositorySteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐGetRepositorySteelDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get2BeChangedRepositorySteel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get2BeChangedRepositorySteel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Get2BeChangedRepositorySteel(rctx, args["input"].(model.Get2BeChangedRepositorySteelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*steels.Steels); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/steels.Steels`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get2BeChangedRepositorySteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get2BeChangedRepositorySteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Get2BeChangedRepositorySteelDetail(rctx, args["input"].(model.Get2BeChangedRepositorySteelDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*steels.Get2BeChangedRepositorySteelDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/steels.Get2BeChangedRepositorySteelDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.Get2BeChangedRepositorySteelDetailRes)
	fc.Result = res
	return ec.marshalNGet2BeChangedRepositorySteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐGet2BeChangedRepositorySteelDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get2BeScrapRepositorySteel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get2BeScrapRepositorySteel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Get2BeScrapRepositorySteel(rctx, args["input"].(model.Get2BeScrapRepositorySteelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*steels.Steels); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/steels.Steels`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get2BeScrapRepositorySteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get2BeScrapRepositorySteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Get2BeScrapRepositorySteelDetail(rctx, args["input"].(model.Get2BeScrapRepositorySteelDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*steels.Get2BeScrapRepositorySteelDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/steels.Get2BeScrapRepositorySteelDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.Get2BeScrapRepositorySteelDetailRes)
	fc.Result = res
	return ec.marshalNGet2BeScrapRepositorySteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐGet2BeScrapRepositorySteelDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get2BeMaintainSteel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get2BeMaintainSteel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Get2BeMaintainSteel(rctx, args["input"].(model.Get2BeMaintainSteelInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*steels.Steels); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/steels.Steels`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_get2BeMaintainSteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_get2BeMaintainSteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Get2BeMaintainSteelDetail(rctx, args["input"].(model.Get2BeMaintainSteelDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*steels.Get2BeScrapRepositorySteelDetailRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/steels.Get2BeScrapRepositorySteelDetailRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.Get2BeScrapRepositorySteelDetailRes)
	fc.Result = res
	return ec.marshalNGet2BeScrapRepositorySteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐGet2BeScrapRepositorySteelDetailRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getRoleList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRoleList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*roles.Role)
	fc.Result = res
	return ec.marshalNRoleItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋrolesᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSpecification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetSpecification(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*specificationinfo.SpecificationInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/specificationinfo.SpecificationInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*specificationinfo.SpecificationInfo)
	fc.Result = res
	return ec.marshalNSpecificationItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSteelList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSteelList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetSteelList(rctx, args["input"].(model.PaginationInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"companyAdmin", "repositoryAdmin", "projectAdmin", "maintenanceAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*steels.GetSteelListRes); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/steels.GetSteelListRes`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.GetSteelListRes)
	fc.Result = res
	return ec.marshalNGetSteelListRes2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐGetSteelListRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOneSteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getOneSteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetOneSteelDetail(rctx, args["input"].(model.GetOneSteelDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin", "maintenanceAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*steels.Steels); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *http-api/app/models/steels.Steels`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMultipleSteelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getMultipleSteelDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetMultipleSteelDetail(rctx, args["input"].(*model.GetMultipleSteelDetailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx, []interface{}{"projectAdmin", "maintenanceAdmin", "repositoryAdmin"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.MustBeDevice == nil {
				return nil, errors.New("directive mustBeDevice is not implemented")
			}
			return ec.directives.MustBeDevice(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*steels.Steels); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*http-api/app/models/steels.Steels`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteelsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryItem_id(ctx context.Context, field graphql.CollectedField, obj *repositories.Repositories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryItem_name(ctx context.Context, field graphql.CollectedField, obj *repositories.Repositories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryItem_pinYin(ctx context.Context, field graphql.CollectedField, obj *repositories.Repositories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PinYin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryItem_city(ctx context.Context, field graphql.CollectedField, obj *repositories.Repositories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryItem_address(ctx context.Context, field graphql.CollectedField, obj *repositories.Repositories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryItem_total(ctx context.Context, field graphql.CollectedField, obj *repositories.Repositories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryItem_weight(ctx context.Context, field graphql.CollectedField, obj *repositories.Repositories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryItem_remark(ctx context.Context, field graphql.CollectedField, obj *repositories.Repositories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryItem_isAble(ctx context.Context, field graphql.CollectedField, obj *repositories.Repositories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAble, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryItem_leaders(ctx context.Context, field graphql.CollectedField, obj *repositories.Repositories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RepositoryItem().Leaders(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsersᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryLeaderItem_id(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryLeaderItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryLeaderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryLeaderItem_name(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryLeaderItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryLeaderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryLeaderItem_phone(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryLeaderItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryLeaderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryLeaderItem_wechat(ctx context.Context, field graphql.CollectedField, obj *model.RepositoryLeaderItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryLeaderItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wechat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleItem_id(ctx context.Context, field graphql.CollectedField, obj *roles.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleItem_name(ctx context.Context, field graphql.CollectedField, obj *roles.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleItem_tag(ctx context.Context, field graphql.CollectedField, obj *roles.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(roles.GraphqlRole)
	fc.Result = res
	return ec.marshalNRole2httpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRole(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecificationItem_id(ctx context.Context, field graphql.CollectedField, obj *specificationinfo.SpecificationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecificationItem_type(ctx context.Context, field graphql.CollectedField, obj *specificationinfo.SpecificationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecificationItem_length(ctx context.Context, field graphql.CollectedField, obj *specificationinfo.SpecificationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Length, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecificationItem_weight(ctx context.Context, field graphql.CollectedField, obj *specificationinfo.SpecificationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecificationItem_isDefault(ctx context.Context, field graphql.CollectedField, obj *specificationinfo.SpecificationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecificationItem_specification(ctx context.Context, field graphql.CollectedField, obj *specificationinfo.SpecificationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecificationItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpecificationItem().Specification(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StateItem_state(ctx context.Context, field graphql.CollectedField, obj *steels.StateItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StateItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _StateItem_desc(ctx context.Context, field graphql.CollectedField, obj *steels.StateItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StateItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_id(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_steel(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelInProject().Steel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.Steels)
	fc.Result = res
	return ec.marshalNSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_locationCode(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_order(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelInProject().Order(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*orders.Order)
	fc.Result = res
	return ec.marshalNOrderItem2ᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_installationAt(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallationAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_enterWorkshopAt(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterWorkshopAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_outWorkshopAt(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutWorkshopAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_outRepositoryAt(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutRepositoryAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_enterRepositoryAt(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterRepositoryAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_useDays(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelInProject().UseDays(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelInProject_projectName(ctx context.Context, field graphql.CollectedField, obj *order_specification_steel.OrderSpecificationSteel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelInProject",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelInProject().ProjectName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_id(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_identifier(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_createUser(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelItem().CreateUser(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*users.Users)
	fc.Result = res
	return ec.marshalNUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_state(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_stateInfo(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelItem().StateInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*steels.StateItem)
	fc.Result = res
	return ec.marshalNStateItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItem(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_companyId(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_repository(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelItem().Repository(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*repositories.Repositories)
	fc.Result = res
	return ec.marshalNRepositoryItem2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐRepositories(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_materialManufacturer(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelItem().MaterialManufacturer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNMaterialManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_manufacturer(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelItem().Manufacturer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*codeinfo.CodeInfo)
	fc.Result = res
	return ec.marshalNManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_turnover(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Turnover, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_usageYearRate(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsageYearRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_totalUsageRate(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalUsageRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_producedDate(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProducedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_specifcation(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelItem().Specifcation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*specificationinfo.SpecificationInfo)
	fc.Result = res
	return ec.marshalNSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_steelInProject(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelItem().SteelInProject(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*order_specification_steel.OrderSpecificationSteel)
	fc.Result = res
	return ec.marshalNSteelInProject2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_steelInMaintenance(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SteelItem().SteelInMaintenance(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*maintenance_record.MaintenanceRecord)
	fc.Result = res
	return ec.marshalNMaintenanceRecordItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_code(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SteelItem_createdAt(ctx context.Context, field graphql.CollectedField, obj *steels.Steels) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SteelItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserItem_id(ctx context.Context, field graphql.CollectedField, obj *users.Users) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserItem_role(ctx context.Context, field graphql.CollectedField, obj *users.Users) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserItem().Role(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*roles.Role)
	fc.Result = res
	return ec.marshalNRoleItem2ᚖhttpᚑapiᚋappᚋmodelsᚋrolesᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _UserItem_name(ctx context.Context, field graphql.CollectedField, obj *users.Users) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserItem_phone(ctx context.Context, field graphql.CollectedField, obj *users.Users) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserItem_wechat(ctx context.Context, field graphql.CollectedField, obj *users.Users) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wechat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserItem_avatar(ctx context.Context, field graphql.CollectedField, obj *users.Users) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserItem().Avatar(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FileItem)
	fc.Result = res
	return ec.marshalNFileItem2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐFileItem(ctx, field.Selections, res)
}

func (ec *executionContext) _UserItem_isAble(ctx context.Context, field graphql.CollectedField, obj *users.Users) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAble, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserItem_company(ctx context.Context, field graphql.CollectedField, obj *users.Users) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserItem",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserItem().Company(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*companies.Companies)
	fc.Result = res
	return ec.marshalNCompanyItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcompaniesᚐCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputConfirmOrderInput(ctx context.Context, obj interface{}) (model.ConfirmOrderInput, error) {
	var it model.ConfirmOrderInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAccess":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAccess"))
			it.IsAccess, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCompanyInput(ctx context.Context, obj interface{}) (model.CreateCompanyInput, error) {
	var it model.CreateCompanyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pinYin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinYin"))
			it.PinYin, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "symbol":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("symbol"))
			it.Symbol, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "logoFileId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoFileId"))
			it.LogoFileID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "backgroundFileId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backgroundFileId"))
			it.BackgroundFileID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAble":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAble"))
			it.IsAble, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "wechat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wechat"))
			it.Wechat, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			it.StartedAt, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "endedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAt"))
			it.EndedAt, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminName"))
			it.AdminName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminPhone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminPhone"))
			it.AdminPhone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminPassword"))
			it.AdminPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminWechat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminWechat"))
			it.AdminWechat, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminAvatarFileId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminAvatarFileId"))
			it.AdminAvatarFileID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCompanyUserInput(ctx context.Context, obj interface{}) (model.CreateCompanyUserInput, error) {
	var it model.CreateCompanyUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalNCreateInputUserRole2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateInputUserRole(ctx, v)
			if err != nil {
				return it, err
			}
		case "wechat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wechat"))
			it.Wechat, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarId"))
			it.AvatarID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateExpressInput(ctx context.Context, obj interface{}) (model.CreateExpressInput, error) {
	var it model.CreateExpressInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDefault"))
			it.IsDefault, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMaintenanceInput(ctx context.Context, obj interface{}) (model.CreateMaintenanceInput, error) {
	var it model.CreateMaintenanceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "uid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uid"))
			it.UID, err = ec.unmarshalNInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateManufacturerInput(ctx context.Context, obj interface{}) (model.CreateManufacturerInput, error) {
	var it model.CreateManufacturerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDefault"))
			it.IsDefault, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMaterialManufacturerInput(ctx context.Context, obj interface{}) (model.CreateMaterialManufacturerInput, error) {
	var it model.CreateMaterialManufacturerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDefault"))
			it.IsDefault, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateOrderInput(ctx context.Context, obj interface{}) (model.CreateOrderInput, error) {
	var it model.CreateOrderInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositoryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositoryId"))
			it.RepositoryID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expectedReturnAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedReturnAt"))
			it.ExpectedReturnAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "partList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partList"))
			it.PartList, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "steelList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("steelList"))
			it.SteelList, err = ec.unmarshalNCreateOrderSteelInput2ᚕᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateOrderSteelInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateOrderSteelInput(ctx context.Context, obj interface{}) (model.CreateOrderSteelInput, error) {
	var it model.CreateOrderSteelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "total":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total"))
			it.Total, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectInput(ctx context.Context, obj interface{}) (model.CreateProjectInput, error) {
	var it model.CreateProjectInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "leaderIdS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIdS"))
			it.LeaderIDS, err = ec.unmarshalNInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt"))
			it.StartAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateRepositoryInput(ctx context.Context, obj interface{}) (model.CreateRepositoryInput, error) {
	var it model.CreateRepositoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositoryAdminId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositoryAdminId"))
			it.RepositoryAdminID, err = ec.unmarshalNInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pinYin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinYin"))
			it.PinYin, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSpecificationInput(ctx context.Context, obj interface{}) (model.CreateSpecificationInput, error) {
	var it model.CreateSpecificationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("length"))
			it.Length, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDefault"))
			it.IsDefault, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSteelInput(ctx context.Context, obj interface{}) (model.CreateSteelInput, error) {
	var it model.CreateSteelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositoryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositoryId"))
			it.RepositoryID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "materialManufacturerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialManufacturerId"))
			it.MaterialManufacturerID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "manufacturerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manufacturerId"))
			it.ManufacturerID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "producedDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("producedDate"))
			it.ProducedDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDelMaintenanceInput(ctx context.Context, obj interface{}) (model.DelMaintenanceInput, error) {
	var it model.DelMaintenanceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditCompanyInput(ctx context.Context, obj interface{}) (model.EditCompanyInput, error) {
	var it model.EditCompanyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pinYin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinYin"))
			it.PinYin, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "symbol":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("symbol"))
			it.Symbol, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "logoFileId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoFileId"))
			it.LogoFileID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "backgroundFileId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backgroundFileId"))
			it.BackgroundFileID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAble":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAble"))
			it.IsAble, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "wechat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wechat"))
			it.Wechat, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			it.StartedAt, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "endedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAt"))
			it.EndedAt, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminName"))
			it.AdminName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminPhone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminPhone"))
			it.AdminPhone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminPassword"))
			it.AdminPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminWechat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminWechat"))
			it.AdminWechat, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminAvatarFileId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminAvatarFileId"))
			it.AdminAvatarFileID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditCompanyUserInput(ctx context.Context, obj interface{}) (model.EditCompanyUserInput, error) {
	var it model.EditCompanyUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "roleId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
			it.RoleID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAble":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAble"))
			it.IsAble, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditDeviceInput(ctx context.Context, obj interface{}) (model.EditDeviceInput, error) {
	var it model.EditDeviceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAble":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAble"))
			it.IsAble, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditExpressInput(ctx context.Context, obj interface{}) (model.EditExpressInput, error) {
	var it model.EditExpressInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDefault"))
			it.IsDefault, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditMaintenanceInput(ctx context.Context, obj interface{}) (model.EditMaintenanceInput, error) {
	var it model.EditMaintenanceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminIdList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminIdList"))
			it.AdminIDList, err = ec.unmarshalNInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAble":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAble"))
			it.IsAble, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditManufacturerInput(ctx context.Context, obj interface{}) (model.EditManufacturerInput, error) {
	var it model.EditManufacturerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDefault"))
			it.IsDefault, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditMaterialManufacturerInput(ctx context.Context, obj interface{}) (model.EditMaterialManufacturerInput, error) {
	var it model.EditMaterialManufacturerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDefault"))
			it.IsDefault, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditSpecificationInput(ctx context.Context, obj interface{}) (model.EditSpecificationInput, error) {
	var it model.EditSpecificationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("length"))
			it.Length, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDefault"))
			it.IsDefault, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterMaintenanceInput(ctx context.Context, obj interface{}) (model.EnterMaintenanceInput, error) {
	var it model.EnterMaintenanceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGet2BeChangedRepositorySteelDetailInput(ctx context.Context, obj interface{}) (model.Get2BeChangedRepositorySteelDetailInput, error) {
	var it model.Get2BeChangedRepositorySteelDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGet2BeChangedRepositorySteelInput(ctx context.Context, obj interface{}) (model.Get2BeChangedRepositorySteelInput, error) {
	var it model.Get2BeChangedRepositorySteelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGet2BeMaintainSteelDetailInput(ctx context.Context, obj interface{}) (model.Get2BeMaintainSteelDetailInput, error) {
	var it model.Get2BeMaintainSteelDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGet2BeMaintainSteelInput(ctx context.Context, obj interface{}) (model.Get2BeMaintainSteelInput, error) {
	var it model.Get2BeMaintainSteelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGet2BeScrapRepositorySteelDetailInput(ctx context.Context, obj interface{}) (model.Get2BeScrapRepositorySteelDetailInput, error) {
	var it model.Get2BeScrapRepositorySteelDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGet2BeScrapRepositorySteelInput(ctx context.Context, obj interface{}) (model.Get2BeScrapRepositorySteelInput, error) {
	var it model.Get2BeScrapRepositorySteelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetChangedMaintenanceSteelInput(ctx context.Context, obj interface{}) (model.GetChangedMaintenanceSteelInput, error) {
	var it model.GetChangedMaintenanceSteelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetCompanyUserInput(ctx context.Context, obj interface{}) (model.GetCompanyUserInput, error) {
	var it model.GetCompanyUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "roleId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
			it.RoleID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetEnterMaintenanceSteelDetailInput(ctx context.Context, obj interface{}) (model.GetEnterMaintenanceSteelDetailInput, error) {
	var it model.GetEnterMaintenanceSteelDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetEnterRepositorySteelDetailInput(ctx context.Context, obj interface{}) (model.GetEnterRepositorySteelDetailInput, error) {
	var it model.GetEnterRepositorySteelDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetMaxLocationCodeInput(ctx context.Context, obj interface{}) (model.GetMaxLocationCodeInput, error) {
	var it model.GetMaxLocationCodeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetMultipleSteelDetailInput(ctx context.Context, obj interface{}) (model.GetMultipleSteelDetailInput, error) {
	var it model.GetMultipleSteelDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetOneSteelDetailInput(ctx context.Context, obj interface{}) (model.GetOneSteelDetailInput, error) {
	var it model.GetOneSteelDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetOrderListInput(ctx context.Context, obj interface{}) (model.GetOrderListInput, error) {
	var it model.GetOrderListInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "queryType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("queryType"))
			it.QueryType, err = ec.unmarshalOGetOrderListInputType2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOrderListInputType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetOrderSteelDetailInput(ctx context.Context, obj interface{}) (model.GetOrderSteelDetailInput, error) {
	var it model.GetOrderSteelDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetOutOfWorkshopProjectSteelDetail(ctx context.Context, obj interface{}) (model.GetOutOfWorkshopProjectSteelDetail, error) {
	var it model.GetOutOfWorkshopProjectSteelDetail
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetProjectOrder2WorkshopDetailInput(ctx context.Context, obj interface{}) (model.GetProjectOrder2WorkshopDetailInput, error) {
	var it model.GetProjectOrder2WorkshopDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderId"))
			it.OrderID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetProjectSpecificationDetailInput(ctx context.Context, obj interface{}) (model.GetProjectSpecificationDetailInput, error) {
	var it model.GetProjectSpecificationDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetProjectSteel2BeChangeInput(ctx context.Context, obj interface{}) (model.GetProjectSteel2BeChangeInput, error) {
	var it model.GetProjectSteel2BeChangeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetProjectSteelDetailInput(ctx context.Context, obj interface{}) (model.GetProjectSteelDetailInput, error) {
	var it model.GetProjectSteelDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetRepositoryOverviewInput(ctx context.Context, obj interface{}) (model.GetRepositoryOverviewInput, error) {
	var it model.GetRepositoryOverviewInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetRepositorySteelInput(ctx context.Context, obj interface{}) (model.GetRepositorySteelInput, error) {
	var it model.GetRepositorySteelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "reposirotyId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reposirotyId"))
			it.ReposirotyID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetToBeEnterRepositoryDetailInput(ctx context.Context, obj interface{}) (model.GetToBeEnterRepositoryDetailInput, error) {
	var it model.GetToBeEnterRepositoryDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetToBeEnterRepositorySpecificationListInput(ctx context.Context, obj interface{}) (model.GetToBeEnterRepositorySpecificationListInput, error) {
	var it model.GetToBeEnterRepositorySpecificationListInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "projectId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInstallLocationInput(ctx context.Context, obj interface{}) (model.InstallLocationInput, error) {
	var it model.InstallLocationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "locationCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationCode"))
			it.LocationCode, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIsAccessLocationCodeInput(ctx context.Context, obj interface{}) (model.IsAccessLocationCodeInput, error) {
	var it model.IsAccessLocationCodeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationCode"))
			it.LocationCode, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (model.PaginationInput, error) {
	var it model.PaginationInput
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["pageSize"]; !present {
		asMap["pageSize"] = 10
	}
	if _, present := asMap["page"]; !present {
		asMap["page"] = 12
	}

	for k, v := range asMap {
		switch k {
		case "pageSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			it.PageSize, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositoryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositoryId"))
			it.RepositoryID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectOrder2WorkshopDetailInput(ctx context.Context, obj interface{}) (model.ProjectOrder2WorkshopDetailInput, error) {
	var it model.ProjectOrder2WorkshopDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderId"))
			it.OrderID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectOrder2WorkshopInput(ctx context.Context, obj interface{}) (model.ProjectOrder2WorkshopInput, error) {
	var it model.ProjectOrder2WorkshopInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderId"))
			it.OrderID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expressCompanyId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expressCompanyId"))
			it.ExpressCompanyID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "expressNo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expressNo"))
			it.ExpressNo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectSteel2BeChangeInput(ctx context.Context, obj interface{}) (model.ProjectSteel2BeChangeInput, error) {
	var it model.ProjectSteel2BeChangeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetBatchOfMaintenanceSteelInput(ctx context.Context, obj interface{}) (model.SetBatchOfMaintenanceSteelInput, error) {
	var it model.SetBatchOfMaintenanceSteelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "maintenanceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maintenanceId"))
			it.MaintenanceID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetBatchOfRepositorySteelInput(ctx context.Context, obj interface{}) (model.SetBatchOfRepositorySteelInput, error) {
	var it model.SetBatchOfRepositorySteelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "specificationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specificationId"))
			it.SpecificationID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "materialManufacturersId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialManufacturersId"))
			it.MaterialManufacturersID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "manufacturerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manufacturerId"))
			it.ManufacturerID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "producedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("producedAt"))
			it.ProducedAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetBatchOfRepositorySteelScrapInput(ctx context.Context, obj interface{}) (model.SetBatchOfRepositorySteelScrapInput, error) {
	var it model.SetBatchOfRepositorySteelScrapInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetMaintenanceInput(ctx context.Context, obj interface{}) (model.SetMaintenanceInput, error) {
	var it model.SetMaintenanceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetPasswordInput(ctx context.Context, obj interface{}) (model.SetPasswordInput, error) {
	var it model.SetPasswordInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetProjectSteelEnterRepositoryInput(ctx context.Context, obj interface{}) (model.SetProjectSteelEnterRepositoryInput, error) {
	var it model.SetProjectSteelEnterRepositoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetProjectSteelInput(ctx context.Context, obj interface{}) (model.SetProjectSteelInput, error) {
	var it model.SetProjectSteelInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetProjectSteelOutOfWorkshopInput(ctx context.Context, obj interface{}) (model.SetProjectSteelOutOfWorkshopInput, error) {
	var it model.SetProjectSteelOutOfWorkshopInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "projectId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			it.ProjectID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetSteelIntoWorkshopInput(ctx context.Context, obj interface{}) (model.SetSteelIntoWorkshopInput, error) {
	var it model.SetSteelIntoWorkshopInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifierList":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierList"))
			it.IdentifierList, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderId"))
			it.OrderID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetOrderDetailInput(ctx context.Context, obj interface{}) (model.GetOrderDetailInput, error) {
	var it model.GetOrderDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var companyItemImplementors = []string{"CompanyItem"}

func (ec *executionContext) _CompanyItem(ctx context.Context, sel ast.SelectionSet, obj *companies.Companies) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyItem")
		case "id":
			out.Values[i] = ec._CompanyItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._CompanyItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "pinYin":
			out.Values[i] = ec._CompanyItem_pinYin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "symbol":
			out.Values[i] = ec._CompanyItem_symbol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "logoFile":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompanyItem_logoFile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "backgroundFile":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompanyItem_backgroundFile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "isAble":
			out.Values[i] = ec._CompanyItem_isAble(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._CompanyItem_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "wechat":
			out.Values[i] = ec._CompanyItem_wechat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "startedAt":
			out.Values[i] = ec._CompanyItem_startedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "endedAt":
			out.Values[i] = ec._CompanyItem_endedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._CompanyItem_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "adminName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompanyItem_adminName(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "adminPhone":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompanyItem_adminPhone(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "adminWechat":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompanyItem_adminWechat(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "adminAvatar":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompanyItem_adminAvatar(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deviceItemImplementors = []string{"DeviceItem"}

func (ec *executionContext) _DeviceItem(ctx context.Context, sel ast.SelectionSet, obj *devices.Device) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceItem")
		case "id":
			out.Values[i] = ec._DeviceItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "mac":
			out.Values[i] = ec._DeviceItem_mac(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "userInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeviceItem_userInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "isAble":
			out.Values[i] = ec._DeviceItem_isAble(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var errCodesImplementors = []string{"ErrCodes"}

func (ec *executionContext) _ErrCodes(ctx context.Context, sel ast.SelectionSet, obj *model.ErrCodes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, errCodesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ErrCodes")
		case "code":
			out.Values[i] = ec._ErrCodes_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "desc":
			out.Values[i] = ec._ErrCodes_desc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var expressCompanyItemImplementors = []string{"ExpressCompanyItem"}

func (ec *executionContext) _ExpressCompanyItem(ctx context.Context, sel ast.SelectionSet, obj *codeinfo.CodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, expressCompanyItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExpressCompanyItem")
		case "id":
			out.Values[i] = ec._ExpressCompanyItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ExpressCompanyItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":
			out.Values[i] = ec._ExpressCompanyItem_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._ExpressCompanyItem_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var expressItemImplementors = []string{"ExpressItem"}

func (ec *executionContext) _ExpressItem(ctx context.Context, sel ast.SelectionSet, obj *codeinfo.CodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, expressItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExpressItem")
		case "id":
			out.Values[i] = ec._ExpressItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ExpressItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._ExpressItem_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":
			out.Values[i] = ec._ExpressItem_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fileItemImplementors = []string{"FileItem"}

func (ec *executionContext) _FileItem(ctx context.Context, sel ast.SelectionSet, obj *model.FileItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileItem")
		case "id":
			out.Values[i] = ec._FileItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._FileItem_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var get2BeChangedRepositorySteelDetailResImplementors = []string{"Get2BeChangedRepositorySteelDetailRes"}

func (ec *executionContext) _Get2BeChangedRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, obj *steels.Get2BeChangedRepositorySteelDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, get2BeChangedRepositorySteelDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Get2BeChangedRepositorySteelDetailRes")
		case "list":
			out.Values[i] = ec._Get2BeChangedRepositorySteelDetailRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._Get2BeChangedRepositorySteelDetailRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._Get2BeChangedRepositorySteelDetailRes_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var get2BeScrapRepositorySteelDetailResImplementors = []string{"Get2BeScrapRepositorySteelDetailRes"}

func (ec *executionContext) _Get2BeScrapRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, obj *steels.Get2BeScrapRepositorySteelDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, get2BeScrapRepositorySteelDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Get2BeScrapRepositorySteelDetailRes")
		case "list":
			out.Values[i] = ec._Get2BeScrapRepositorySteelDetailRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._Get2BeScrapRepositorySteelDetailRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._Get2BeScrapRepositorySteelDetailRes_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getEnterMaintenanceSteelDetailResImplementors = []string{"GetEnterMaintenanceSteelDetailRes"}

func (ec *executionContext) _GetEnterMaintenanceSteelDetailRes(ctx context.Context, sel ast.SelectionSet, obj *maintenance.GetEnterMaintenanceSteelDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getEnterMaintenanceSteelDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetEnterMaintenanceSteelDetailRes")
		case "list":
			out.Values[i] = ec._GetEnterMaintenanceSteelDetailRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._GetEnterMaintenanceSteelDetailRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._GetEnterMaintenanceSteelDetailRes_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getEnterRepositorySteelDetailResImplementors = []string{"GetEnterRepositorySteelDetailRes"}

func (ec *executionContext) _GetEnterRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, obj *projects.GetEnterRepositorySteelDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getEnterRepositorySteelDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetEnterRepositorySteelDetailRes")
		case "orderSteel":
			out.Values[i] = ec._GetEnterRepositorySteelDetailRes_orderSteel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storedTotal":
			out.Values[i] = ec._GetEnterRepositorySteelDetailRes_storedTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "toBeStoreTotal":
			out.Values[i] = ec._GetEnterRepositorySteelDetailRes_toBeStoreTotal(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getOutOfWorkshopProjectSteelDetailResImplementors = []string{"GetOutOfWorkshopProjectSteelDetailRes"}

func (ec *executionContext) _GetOutOfWorkshopProjectSteelDetailRes(ctx context.Context, sel ast.SelectionSet, obj *projects.GetOutOfWorkshopProjectSteelDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getOutOfWorkshopProjectSteelDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetOutOfWorkshopProjectSteelDetailRes")
		case "orderSteel":
			out.Values[i] = ec._GetOutOfWorkshopProjectSteelDetailRes_orderSteel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "toBeStoreTotal":
			out.Values[i] = ec._GetOutOfWorkshopProjectSteelDetailRes_toBeStoreTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "storeTotal":
			out.Values[i] = ec._GetOutOfWorkshopProjectSteelDetailRes_storeTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getProjectOrder2WorkshopDetailResImplementors = []string{"GetProjectOrder2WorkshopDetailRes"}

func (ec *executionContext) _GetProjectOrder2WorkshopDetailRes(ctx context.Context, sel ast.SelectionSet, obj *projects.GetProjectOrder2WorkshopDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getProjectOrder2WorkshopDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetProjectOrder2WorkshopDetailRes")
		case "list":
			out.Values[i] = ec._GetProjectOrder2WorkshopDetailRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._GetProjectOrder2WorkshopDetailRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalWeight":
			out.Values[i] = ec._GetProjectOrder2WorkshopDetailRes_totalWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getProjectSpecificationDetailResImplementors = []string{"GetProjectSpecificationDetailRes"}

func (ec *executionContext) _GetProjectSpecificationDetailRes(ctx context.Context, sel ast.SelectionSet, obj *projects.GetProjectSpecificationDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getProjectSpecificationDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetProjectSpecificationDetailRes")
		case "list":
			out.Values[i] = ec._GetProjectSpecificationDetailRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._GetProjectSpecificationDetailRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._GetProjectSpecificationDetailRes_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getProjectSteel2BeChangeDetailResImplementors = []string{"GetProjectSteel2BeChangeDetailRes"}

func (ec *executionContext) _GetProjectSteel2BeChangeDetailRes(ctx context.Context, sel ast.SelectionSet, obj *projects.GetProjectSteel2BeChangeDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getProjectSteel2BeChangeDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetProjectSteel2BeChangeDetailRes")
		case "list":
			out.Values[i] = ec._GetProjectSteel2BeChangeDetailRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._GetProjectSteel2BeChangeDetailRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weightTotal":
			out.Values[i] = ec._GetProjectSteel2BeChangeDetailRes_weightTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getProjectSteelDetailResImplementors = []string{"GetProjectSteelDetailRes"}

func (ec *executionContext) _GetProjectSteelDetailRes(ctx context.Context, sel ast.SelectionSet, obj *projects.GetProjectSteelDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getProjectSteelDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetProjectSteelDetailRes")
		case "list":
			out.Values[i] = ec._GetProjectSteelDetailRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._GetProjectSteelDetailRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._GetProjectSteelDetailRes_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getRepositoryOverviewResImplementors = []string{"GetRepositoryOverviewRes"}

func (ec *executionContext) _GetRepositoryOverviewRes(ctx context.Context, sel ast.SelectionSet, obj *repositories.GetRepositoryOverviewRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getRepositoryOverviewResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetRepositoryOverviewRes")
		case "total":
			out.Values[i] = ec._GetRepositoryOverviewRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._GetRepositoryOverviewRes_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getRepositorySteelDetailResImplementors = []string{"GetRepositorySteelDetailRes"}

func (ec *executionContext) _GetRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, obj *steels.GetRepositorySteelDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getRepositorySteelDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetRepositorySteelDetailRes")
		case "list":
			out.Values[i] = ec._GetRepositorySteelDetailRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._GetRepositorySteelDetailRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._GetRepositorySteelDetailRes_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getRepositorySteelListItemResImplementors = []string{"GetRepositorySteelListItemRes"}

func (ec *executionContext) _GetRepositorySteelListItemRes(ctx context.Context, sel ast.SelectionSet, obj *repositories.GetRepositorySteelListItemRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getRepositorySteelListItemResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetRepositorySteelListItemRes")
		case "total":
			out.Values[i] = ec._GetRepositorySteelListItemRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._GetRepositorySteelListItemRes_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "specificationInfo":
			out.Values[i] = ec._GetRepositorySteelListItemRes_specificationInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getRepositorySteelResImplementors = []string{"GetRepositorySteelRes"}

func (ec *executionContext) _GetRepositorySteelRes(ctx context.Context, sel ast.SelectionSet, obj *repositories.GetRepositorySteelRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getRepositorySteelResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetRepositorySteelRes")
		case "list":
			out.Values[i] = ec._GetRepositorySteelRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._GetRepositorySteelRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._GetRepositorySteelRes_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSend2WorkshopOrderListDetailResImplementors = []string{"GetSend2WorkshopOrderListDetailRes"}

func (ec *executionContext) _GetSend2WorkshopOrderListDetailRes(ctx context.Context, sel ast.SelectionSet, obj *projects.GetSend2WorkshopOrderListDetailRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSend2WorkshopOrderListDetailResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSend2WorkshopOrderListDetailRes")
		case "list":
			out.Values[i] = ec._GetSend2WorkshopOrderListDetailRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._GetSend2WorkshopOrderListDetailRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalWeight":
			out.Values[i] = ec._GetSend2WorkshopOrderListDetailRes_totalWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSteelListResImplementors = []string{"GetSteelListRes"}

func (ec *executionContext) _GetSteelListRes(ctx context.Context, sel ast.SelectionSet, obj *steels.GetSteelListRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSteelListResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSteelListRes")
		case "total":
			out.Values[i] = ec._GetSteelListRes_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":
			out.Values[i] = ec._GetSteelListRes_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var graphDescImplementors = []string{"GraphDesc"}

func (ec *executionContext) _GraphDesc(ctx context.Context, sel ast.SelectionSet, obj *model.GraphDesc) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, graphDescImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GraphDesc")
		case "title":
			out.Values[i] = ec._GraphDesc_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "desc":
			out.Values[i] = ec._GraphDesc_desc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "errCodes":
			out.Values[i] = ec._GraphDesc_errCodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var loginResImplementors = []string{"LoginRes"}

func (ec *executionContext) _LoginRes(ctx context.Context, sel ast.SelectionSet, obj *model.LoginRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginRes")
		case "accessToken":
			out.Values[i] = ec._LoginRes_accessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expired":
			out.Values[i] = ec._LoginRes_expired(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":
			out.Values[i] = ec._LoginRes_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roleName":
			out.Values[i] = ec._LoginRes_roleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var maintenanceItemImplementors = []string{"MaintenanceItem"}

func (ec *executionContext) _MaintenanceItem(ctx context.Context, sel ast.SelectionSet, obj *maintenance.Maintenance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, maintenanceItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MaintenanceItem")
		case "id":
			out.Values[i] = ec._MaintenanceItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._MaintenanceItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "address":
			out.Values[i] = ec._MaintenanceItem_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "remark":
			out.Values[i] = ec._MaintenanceItem_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isAble":
			out.Values[i] = ec._MaintenanceItem_isAble(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "admin":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MaintenanceItem_admin(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "total":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MaintenanceItem_total(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "weightTotal":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MaintenanceItem_weightTotal(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var maintenanceRecordItemImplementors = []string{"MaintenanceRecordItem"}

func (ec *executionContext) _MaintenanceRecordItem(ctx context.Context, sel ast.SelectionSet, obj *maintenance_record.MaintenanceRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, maintenanceRecordItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MaintenanceRecordItem")
		case "id":
			out.Values[i] = ec._MaintenanceRecordItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "maintenance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MaintenanceRecordItem_maintenance(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "steel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MaintenanceRecordItem_steel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "stateInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MaintenanceRecordItem_stateInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "useDays":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MaintenanceRecordItem_useDays(ctx, field, obj)
				return res
			})
		case "outedAt":
			out.Values[i] = ec._MaintenanceRecordItem_outedAt(ctx, field, obj)
		case "enteredAt":
			out.Values[i] = ec._MaintenanceRecordItem_enteredAt(ctx, field, obj)
		case "outRepositoryAt":
			out.Values[i] = ec._MaintenanceRecordItem_outRepositoryAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "enterRepositoryAt":
			out.Values[i] = ec._MaintenanceRecordItem_enterRepositoryAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var manufacturerItemImplementors = []string{"ManufacturerItem"}

func (ec *executionContext) _ManufacturerItem(ctx context.Context, sel ast.SelectionSet, obj *codeinfo.CodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, manufacturerItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManufacturerItem")
		case "id":
			out.Values[i] = ec._ManufacturerItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ManufacturerItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._ManufacturerItem_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":
			out.Values[i] = ec._ManufacturerItem_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var materialManufacturerItemImplementors = []string{"MaterialManufacturerItem"}

func (ec *executionContext) _MaterialManufacturerItem(ctx context.Context, sel ast.SelectionSet, obj *codeinfo.CodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, materialManufacturerItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MaterialManufacturerItem")
		case "id":
			out.Values[i] = ec._MaterialManufacturerItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._MaterialManufacturerItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._MaterialManufacturerItem_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":
			out.Values[i] = ec._MaterialManufacturerItem_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var msgItemImplementors = []string{"MsgItem"}

func (ec *executionContext) _MsgItem(ctx context.Context, sel ast.SelectionSet, obj *msg.Msg) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, msgItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MsgItem")
		case "id":
			out.Values[i] = ec._MsgItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRead":
			out.Values[i] = ec._MsgItem_isRead(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":
			out.Values[i] = ec._MsgItem_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MsgItem_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "login":
			out.Values[i] = ec._Mutation_login(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCompany":
			out.Values[i] = ec._Mutation_createCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editCompany":
			out.Values[i] = ec._Mutation_editCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCompany":
			out.Values[i] = ec._Mutation_deleteCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCompanyUser":
			out.Values[i] = ec._Mutation_createCompanyUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editCompanyUser":
			out.Values[i] = ec._Mutation_editCompanyUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCompanyUser":
			out.Values[i] = ec._Mutation_deleteCompanyUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editDevice":
			out.Values[i] = ec._Mutation_editDevice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createExpress":
			out.Values[i] = ec._Mutation_createExpress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editExpress":
			out.Values[i] = ec._Mutation_editExpress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteExpress":
			out.Values[i] = ec._Mutation_deleteExpress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createMaintenance":
			out.Values[i] = ec._Mutation_createMaintenance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editMaintenance":
			out.Values[i] = ec._Mutation_editMaintenance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delMaintenance":
			out.Values[i] = ec._Mutation_delMaintenance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setEnterMaintenance":
			out.Values[i] = ec._Mutation_setEnterMaintenance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createManufacturer":
			out.Values[i] = ec._Mutation_createManufacturer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editManufacturer":
			out.Values[i] = ec._Mutation_editManufacturer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteManufacturer":
			out.Values[i] = ec._Mutation_deleteManufacturer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createMaterialManufacturer":
			out.Values[i] = ec._Mutation_createMaterialManufacturer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editMaterialManufacturer":
			out.Values[i] = ec._Mutation_editMaterialManufacturer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteMaterialManufacturer":
			out.Values[i] = ec._Mutation_deleteMaterialManufacturer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setPassword":
			out.Values[i] = ec._Mutation_setPassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setSteelEnterWorkshop":
			out.Values[i] = ec._Mutation_setSteelEnterWorkshop(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrder":
			out.Values[i] = ec._Mutation_createOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "confirmOrRejectOrder":
			out.Values[i] = ec._Mutation_confirmOrRejectOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setProjectOrder2Workshop":
			out.Values[i] = ec._Mutation_setProjectOrder2Workshop(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editPrice":
			out.Values[i] = ec._Mutation_editPrice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProject":
			out.Values[i] = ec._Mutation_createProject(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "installSteel":
			out.Values[i] = ec._Mutation_installSteel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setProjectSteelState":
			out.Values[i] = ec._Mutation_setProjectSteelState(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setProjectSteelOutOfWorkshop":
			out.Values[i] = ec._Mutation_setProjectSteelOutOfWorkshop(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setProjectSteelEnterRepository":
			out.Values[i] = ec._Mutation_setProjectSteelEnterRepository(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRepository":
			out.Values[i] = ec._Mutation_createRepository(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRepository":
			out.Values[i] = ec._Mutation_deleteRepository(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setBatchOfRepositorySteel":
			out.Values[i] = ec._Mutation_setBatchOfRepositorySteel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setBatchOfRepositorySteelScrap":
			out.Values[i] = ec._Mutation_setBatchOfRepositorySteelScrap(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setBatchOfMaintenanceSteel":
			out.Values[i] = ec._Mutation_setBatchOfMaintenanceSteel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createSpecification":
			out.Values[i] = ec._Mutation_createSpecification(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editSpecification":
			out.Values[i] = ec._Mutation_editSpecification(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteSpecification":
			out.Values[i] = ec._Mutation_deleteSpecification(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createSteel":
			out.Values[i] = ec._Mutation_createSteel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "singleUpload":
			out.Values[i] = ec._Mutation_singleUpload(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderExpressItemImplementors = []string{"OrderExpressItem"}

func (ec *executionContext) _OrderExpressItem(ctx context.Context, sel ast.SelectionSet, obj *order_express.OrderExpress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderExpressItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderExpressItem")
		case "id":
			out.Values[i] = ec._OrderExpressItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "expressCompany":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderExpressItem_expressCompany(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "expressNo":
			out.Values[i] = ec._OrderExpressItem_expressNo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sender":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderExpressItem_sender(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "receiver":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderExpressItem_receiver(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "direction":
			out.Values[i] = ec._OrderExpressItem_direction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "receiveAt":
			out.Values[i] = ec._OrderExpressItem_receiveAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._OrderExpressItem_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderItemImplementors = []string{"OrderItem"}

func (ec *executionContext) _OrderItem(ctx context.Context, sel ast.SelectionSet, obj *orders.Order) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderItem")
		case "id":
			out.Values[i] = ec._OrderItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "project":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderItem_project(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "state":
			out.Values[i] = ec._OrderItem_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "partList":
			out.Values[i] = ec._OrderItem_partList(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderItem_createUser(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "confirmedUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderItem_confirmedUser(ctx, field, obj)
				return res
			})
		case "expressList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderItem_expressList(ctx, field, obj)
				return res
			})
		case "remark":
			out.Values[i] = ec._OrderItem_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "orderNo":
			out.Values[i] = ec._OrderItem_orderNo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "total":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderItem_total(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "weight":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderItem_weight(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "repository":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderItem_repository(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "orderSpecificationList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderItem_orderSpecificationList(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._OrderItem_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "confirmedAt":
			out.Values[i] = ec._OrderItem_confirmedAt(ctx, field, obj)
		case "expectedReturnAt":
			out.Values[i] = ec._OrderItem_expectedReturnAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderSpecificationItemImplementors = []string{"OrderSpecificationItem"}

func (ec *executionContext) _OrderSpecificationItem(ctx context.Context, sel ast.SelectionSet, obj *order_specification.OrderSpecification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderSpecificationItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderSpecificationItem")
		case "id":
			out.Values[i] = ec._OrderSpecificationItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "order":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationItem_order(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "specification":
			out.Values[i] = ec._OrderSpecificationItem_specification(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "specificationInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationItem_specificationInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "total":
			out.Values[i] = ec._OrderSpecificationItem_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalSend":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationItem_totalSend(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "totalToBeSend":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationItem_totalToBeSend(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "storeTotal":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationItem_storeTotal(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "workshopReceiveTotal":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationItem_workshopReceiveTotal(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "weight":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationItem_weight(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderSpecificationSteelItemImplementors = []string{"OrderSpecificationSteelItem"}

func (ec *executionContext) _OrderSpecificationSteelItem(ctx context.Context, sel ast.SelectionSet, obj *order_specification_steel.OrderSpecificationSteel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderSpecificationSteelItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderSpecificationSteelItem")
		case "id":
			out.Values[i] = ec._OrderSpecificationSteelItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "stateInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationSteelItem_stateInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "steel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationSteelItem_steel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "orderSpecification":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationSteelItem_orderSpecification(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "toWorkshopExpress":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationSteelItem_toWorkshopExpress(ctx, field, obj)
				return res
			})
		case "toRepositoryExpress":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationSteelItem_toRepositoryExpress(ctx, field, obj)
				return res
			})
		case "locationCode":
			out.Values[i] = ec._OrderSpecificationSteelItem_locationCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "enterRepositoryUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrderSpecificationSteelItem_enterRepositoryUser(ctx, field, obj)
				return res
			})
		case "installationAt":
			out.Values[i] = ec._OrderSpecificationSteelItem_installationAt(ctx, field, obj)
		case "enterWorkshopAt":
			out.Values[i] = ec._OrderSpecificationSteelItem_enterWorkshopAt(ctx, field, obj)
		case "outWorkshopAt":
			out.Values[i] = ec._OrderSpecificationSteelItem_outWorkshopAt(ctx, field, obj)
		case "outRepositoryAt":
			out.Values[i] = ec._OrderSpecificationSteelItem_outRepositoryAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "EnterRepositoryAt":
			out.Values[i] = ec._OrderSpecificationSteelItem_EnterRepositoryAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var projectItemImplementors = []string{"ProjectItem"}

func (ec *executionContext) _ProjectItem(ctx context.Context, sel ast.SelectionSet, obj *projects.Projects) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectItem")
		case "id":
			out.Values[i] = ec._ProjectItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ProjectItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "city":
			out.Values[i] = ec._ProjectItem_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "leaderList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProjectItem_leaderList(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "address":
			out.Values[i] = ec._ProjectItem_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "startedAt":
			out.Values[i] = ec._ProjectItem_startedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "endedAt":
			out.Values[i] = ec._ProjectItem_endedAt(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._ProjectItem_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "company":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProjectItem_company(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "errorCodeDesc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_errorCodeDesc(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getAllCompany":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllCompany(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getCompanyUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCompanyUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getDeviceList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getExpressList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getExpressList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getMaintenanceList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMaintenanceList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getEnterMaintenanceSteel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEnterMaintenanceSteel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getEnterMaintenanceSteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEnterMaintenanceSteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getMaintenanceStateForChanged":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMaintenanceStateForChanged(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getChangedMaintenanceSteel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getChangedMaintenanceSteel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getManufacturers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getManufacturers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getMaterialManufacturers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMaterialManufacturers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getMyInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMyInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getMsgList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMsgList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOrderList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOrderList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getTobeSendWorkshopOrderList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTobeSendWorkshopOrderList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOrderDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOrderDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getProjectOrder2WorkshopDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectOrder2WorkshopDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getSend2WorkshopOrderList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSend2WorkshopOrderList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getSend2WorkshopOrderListDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSend2WorkshopOrderListDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getProjectSteelStateList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectSteelStateList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getPrice":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPrice(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getProjectLis":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectLis(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getProjectSpecificationDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectSpecificationDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getProjectSteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectSteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getMaxLocationCode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMaxLocationCode(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "isAccessLocationCode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_isAccessLocationCode(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getProjectSteel2BeChangeDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectSteel2BeChangeDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getProjectSteel2BeChange":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectSteel2BeChange(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOutOfWorkshopProjectList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOutOfWorkshopProjectList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOutOfWorkshopProjectSteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOutOfWorkshopProjectSteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOrderSteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOrderSteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getProjectStateListForChanged":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProjectStateListForChanged(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getEnterRepositoryProjectList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEnterRepositoryProjectList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getEnterRepositorySteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEnterRepositorySteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getToBeEnterRepositoryStateList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getToBeEnterRepositoryStateList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getToBeEnterRepositorySpecificationList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getToBeEnterRepositorySpecificationList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getToBeEnterRepositoryDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getToBeEnterRepositoryDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getRepositoryList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRepositoryList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getRepositoryOverview":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRepositoryOverview(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getAllStateList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllStateList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getRepositorySteel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRepositorySteel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getRepositorySteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRepositorySteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "get2BeChangedRepositorySteel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get2BeChangedRepositorySteel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "get2BeChangedRepositorySteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get2BeChangedRepositorySteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "get2BeScrapRepositorySteel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get2BeScrapRepositorySteel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "get2BeScrapRepositorySteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get2BeScrapRepositorySteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "get2BeMaintainSteel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get2BeMaintainSteel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "get2BeMaintainSteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_get2BeMaintainSteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getRoleList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRoleList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getSpecification":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSpecification(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getSteelList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSteelList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOneSteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOneSteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getMultipleSteelDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMultipleSteelDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryItemImplementors = []string{"RepositoryItem"}

func (ec *executionContext) _RepositoryItem(ctx context.Context, sel ast.SelectionSet, obj *repositories.Repositories) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryItem")
		case "id":
			out.Values[i] = ec._RepositoryItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._RepositoryItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "pinYin":
			out.Values[i] = ec._RepositoryItem_pinYin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "city":
			out.Values[i] = ec._RepositoryItem_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "address":
			out.Values[i] = ec._RepositoryItem_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "total":
			out.Values[i] = ec._RepositoryItem_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "weight":
			out.Values[i] = ec._RepositoryItem_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "remark":
			out.Values[i] = ec._RepositoryItem_remark(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isAble":
			out.Values[i] = ec._RepositoryItem_isAble(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "leaders":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RepositoryItem_leaders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryLeaderItemImplementors = []string{"RepositoryLeaderItem"}

func (ec *executionContext) _RepositoryLeaderItem(ctx context.Context, sel ast.SelectionSet, obj *model.RepositoryLeaderItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryLeaderItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryLeaderItem")
		case "id":
			out.Values[i] = ec._RepositoryLeaderItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._RepositoryLeaderItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone":
			out.Values[i] = ec._RepositoryLeaderItem_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "wechat":
			out.Values[i] = ec._RepositoryLeaderItem_wechat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleItemImplementors = []string{"RoleItem"}

func (ec *executionContext) _RoleItem(ctx context.Context, sel ast.SelectionSet, obj *roles.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleItem")
		case "id":
			out.Values[i] = ec._RoleItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._RoleItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tag":
			out.Values[i] = ec._RoleItem_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var specificationItemImplementors = []string{"SpecificationItem"}

func (ec *executionContext) _SpecificationItem(ctx context.Context, sel ast.SelectionSet, obj *specificationinfo.SpecificationInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, specificationItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpecificationItem")
		case "id":
			out.Values[i] = ec._SpecificationItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._SpecificationItem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "length":
			out.Values[i] = ec._SpecificationItem_length(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "weight":
			out.Values[i] = ec._SpecificationItem_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isDefault":
			out.Values[i] = ec._SpecificationItem_isDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "specification":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpecificationItem_specification(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stateItemImplementors = []string{"StateItem"}

func (ec *executionContext) _StateItem(ctx context.Context, sel ast.SelectionSet, obj *steels.StateItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stateItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StateItem")
		case "state":
			out.Values[i] = ec._StateItem_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "desc":
			out.Values[i] = ec._StateItem_desc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var steelInProjectImplementors = []string{"SteelInProject"}

func (ec *executionContext) _SteelInProject(ctx context.Context, sel ast.SelectionSet, obj *order_specification_steel.OrderSpecificationSteel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, steelInProjectImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SteelInProject")
		case "id":
			out.Values[i] = ec._SteelInProject_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "steel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelInProject_steel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "locationCode":
			out.Values[i] = ec._SteelInProject_locationCode(ctx, field, obj)
		case "order":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelInProject_order(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "installationAt":
			out.Values[i] = ec._SteelInProject_installationAt(ctx, field, obj)
		case "enterWorkshopAt":
			out.Values[i] = ec._SteelInProject_enterWorkshopAt(ctx, field, obj)
		case "outWorkshopAt":
			out.Values[i] = ec._SteelInProject_outWorkshopAt(ctx, field, obj)
		case "outRepositoryAt":
			out.Values[i] = ec._SteelInProject_outRepositoryAt(ctx, field, obj)
		case "enterRepositoryAt":
			out.Values[i] = ec._SteelInProject_enterRepositoryAt(ctx, field, obj)
		case "useDays":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelInProject_useDays(ctx, field, obj)
				return res
			})
		case "projectName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelInProject_projectName(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var steelItemImplementors = []string{"SteelItem"}

func (ec *executionContext) _SteelItem(ctx context.Context, sel ast.SelectionSet, obj *steels.Steels) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, steelItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SteelItem")
		case "id":
			out.Values[i] = ec._SteelItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "identifier":
			out.Values[i] = ec._SteelItem_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelItem_createUser(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "state":
			out.Values[i] = ec._SteelItem_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "stateInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelItem_stateInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "companyId":
			out.Values[i] = ec._SteelItem_companyId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "repository":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelItem_repository(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "materialManufacturer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelItem_materialManufacturer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "manufacturer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelItem_manufacturer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "turnover":
			out.Values[i] = ec._SteelItem_turnover(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "usageYearRate":
			out.Values[i] = ec._SteelItem_usageYearRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalUsageRate":
			out.Values[i] = ec._SteelItem_totalUsageRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "producedDate":
			out.Values[i] = ec._SteelItem_producedDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "specifcation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelItem_specifcation(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "steelInProject":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelItem_steelInProject(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "steelInMaintenance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SteelItem_steelInMaintenance(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "code":
			out.Values[i] = ec._SteelItem_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._SteelItem_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userItemImplementors = []string{"UserItem"}

func (ec *executionContext) _UserItem(ctx context.Context, sel ast.SelectionSet, obj *users.Users) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserItem")
		case "id":
			out.Values[i] = ec._UserItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "role":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserItem_role(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "name":
			out.Values[i] = ec._UserItem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._UserItem_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "wechat":
			out.Values[i] = ec._UserItem_wechat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "avatar":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserItem_avatar(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "isAble":
			out.Values[i] = ec._UserItem_isAble(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "company":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserItem_company(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCompanyItem2httpᚑapiᚋappᚋmodelsᚋcompaniesᚐCompanies(ctx context.Context, sel ast.SelectionSet, v companies.Companies) graphql.Marshaler {
	return ec._CompanyItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋcompaniesᚐCompanies(ctx context.Context, sel ast.SelectionSet, v []*companies.Companies) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompanyItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcompaniesᚐCompanies(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCompanyItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcompaniesᚐCompanies(ctx context.Context, sel ast.SelectionSet, v *companies.Companies) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompanyItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfirmOrderInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐConfirmOrderInput(ctx context.Context, v interface{}) (model.ConfirmOrderInput, error) {
	res, err := ec.unmarshalInputConfirmOrderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCompanyInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateCompanyInput(ctx context.Context, v interface{}) (model.CreateCompanyInput, error) {
	res, err := ec.unmarshalInputCreateCompanyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCompanyUserInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateCompanyUserInput(ctx context.Context, v interface{}) (model.CreateCompanyUserInput, error) {
	res, err := ec.unmarshalInputCreateCompanyUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateExpressInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateExpressInput(ctx context.Context, v interface{}) (model.CreateExpressInput, error) {
	res, err := ec.unmarshalInputCreateExpressInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateInputUserRole2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateInputUserRole(ctx context.Context, v interface{}) (model.CreateInputUserRole, error) {
	var res model.CreateInputUserRole
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateInputUserRole2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateInputUserRole(ctx context.Context, sel ast.SelectionSet, v model.CreateInputUserRole) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCreateMaintenanceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateMaintenanceInput(ctx context.Context, v interface{}) (model.CreateMaintenanceInput, error) {
	res, err := ec.unmarshalInputCreateMaintenanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateManufacturerInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateManufacturerInput(ctx context.Context, v interface{}) (model.CreateManufacturerInput, error) {
	res, err := ec.unmarshalInputCreateManufacturerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMaterialManufacturerInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateMaterialManufacturerInput(ctx context.Context, v interface{}) (model.CreateMaterialManufacturerInput, error) {
	res, err := ec.unmarshalInputCreateMaterialManufacturerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateOrderInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateOrderInput(ctx context.Context, v interface{}) (model.CreateOrderInput, error) {
	res, err := ec.unmarshalInputCreateOrderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateOrderSteelInput2ᚕᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateOrderSteelInputᚄ(ctx context.Context, v interface{}) ([]*model.CreateOrderSteelInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.CreateOrderSteelInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCreateOrderSteelInput2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateOrderSteelInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCreateOrderSteelInput2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateOrderSteelInput(ctx context.Context, v interface{}) (*model.CreateOrderSteelInput, error) {
	res, err := ec.unmarshalInputCreateOrderSteelInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateProjectInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateProjectInput(ctx context.Context, v interface{}) (model.CreateProjectInput, error) {
	res, err := ec.unmarshalInputCreateProjectInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateRepositoryInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateRepositoryInput(ctx context.Context, v interface{}) (model.CreateRepositoryInput, error) {
	res, err := ec.unmarshalInputCreateRepositoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSpecificationInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateSpecificationInput(ctx context.Context, v interface{}) (model.CreateSpecificationInput, error) {
	res, err := ec.unmarshalInputCreateSpecificationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐCreateSteelInput(ctx context.Context, v interface{}) (model.CreateSteelInput, error) {
	res, err := ec.unmarshalInputCreateSteelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDelMaintenanceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐDelMaintenanceInput(ctx context.Context, v interface{}) (model.DelMaintenanceInput, error) {
	res, err := ec.unmarshalInputDelMaintenanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeviceItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋdevicesᚐDevice(ctx context.Context, sel ast.SelectionSet, v []*devices.Device) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceItem2ᚖhttpᚑapiᚋappᚋmodelsᚋdevicesᚐDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNEditCompanyInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditCompanyInput(ctx context.Context, v interface{}) (model.EditCompanyInput, error) {
	res, err := ec.unmarshalInputEditCompanyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEditDeviceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditDeviceInput(ctx context.Context, v interface{}) (model.EditDeviceInput, error) {
	res, err := ec.unmarshalInputEditDeviceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEditExpressInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditExpressInput(ctx context.Context, v interface{}) (model.EditExpressInput, error) {
	res, err := ec.unmarshalInputEditExpressInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEditMaintenanceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditMaintenanceInput(ctx context.Context, v interface{}) (model.EditMaintenanceInput, error) {
	res, err := ec.unmarshalInputEditMaintenanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEditManufacturerInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditManufacturerInput(ctx context.Context, v interface{}) (model.EditManufacturerInput, error) {
	res, err := ec.unmarshalInputEditManufacturerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEditMaterialManufacturerInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditMaterialManufacturerInput(ctx context.Context, v interface{}) (model.EditMaterialManufacturerInput, error) {
	res, err := ec.unmarshalInputEditMaterialManufacturerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEditSpecificationInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditSpecificationInput(ctx context.Context, v interface{}) (model.EditSpecificationInput, error) {
	res, err := ec.unmarshalInputEditSpecificationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterMaintenanceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEnterMaintenanceInput(ctx context.Context, v interface{}) (model.EnterMaintenanceInput, error) {
	res, err := ec.unmarshalInputEnterMaintenanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNErrCodes2ᚕᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐErrCodes(ctx context.Context, sel ast.SelectionSet, v []*model.ErrCodes) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOErrCodes2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐErrCodes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNExpressCompanyItem2httpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v codeinfo.CodeInfo) graphql.Marshaler {
	return ec._ExpressCompanyItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNExpressCompanyItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v *codeinfo.CodeInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ExpressCompanyItem(ctx, sel, v)
}

func (ec *executionContext) marshalNExpressItem2httpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v codeinfo.CodeInfo) graphql.Marshaler {
	return ec._ExpressItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNExpressItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v []*codeinfo.CodeInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOExpressItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNExpressItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v *codeinfo.CodeInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ExpressItem(ctx, sel, v)
}

func (ec *executionContext) marshalNFileItem2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐFileItem(ctx context.Context, sel ast.SelectionSet, v model.FileItem) graphql.Marshaler {
	return ec._FileItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNFileItem2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐFileItem(ctx context.Context, sel ast.SelectionSet, v *model.FileItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FileItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNGet2BeChangedRepositorySteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeChangedRepositorySteelDetailInput(ctx context.Context, v interface{}) (model.Get2BeChangedRepositorySteelDetailInput, error) {
	res, err := ec.unmarshalInputGet2BeChangedRepositorySteelDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGet2BeChangedRepositorySteelDetailRes2httpᚑapiᚋappᚋmodelsᚋsteelsᚐGet2BeChangedRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, v steels.Get2BeChangedRepositorySteelDetailRes) graphql.Marshaler {
	return ec._Get2BeChangedRepositorySteelDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGet2BeChangedRepositorySteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐGet2BeChangedRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, v *steels.Get2BeChangedRepositorySteelDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Get2BeChangedRepositorySteelDetailRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGet2BeChangedRepositorySteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeChangedRepositorySteelInput(ctx context.Context, v interface{}) (model.Get2BeChangedRepositorySteelInput, error) {
	res, err := ec.unmarshalInputGet2BeChangedRepositorySteelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGet2BeMaintainSteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeMaintainSteelDetailInput(ctx context.Context, v interface{}) (model.Get2BeMaintainSteelDetailInput, error) {
	res, err := ec.unmarshalInputGet2BeMaintainSteelDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGet2BeMaintainSteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeMaintainSteelInput(ctx context.Context, v interface{}) (model.Get2BeMaintainSteelInput, error) {
	res, err := ec.unmarshalInputGet2BeMaintainSteelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGet2BeScrapRepositorySteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeScrapRepositorySteelDetailInput(ctx context.Context, v interface{}) (model.Get2BeScrapRepositorySteelDetailInput, error) {
	res, err := ec.unmarshalInputGet2BeScrapRepositorySteelDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGet2BeScrapRepositorySteelDetailRes2httpᚑapiᚋappᚋmodelsᚋsteelsᚐGet2BeScrapRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, v steels.Get2BeScrapRepositorySteelDetailRes) graphql.Marshaler {
	return ec._Get2BeScrapRepositorySteelDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGet2BeScrapRepositorySteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐGet2BeScrapRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, v *steels.Get2BeScrapRepositorySteelDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Get2BeScrapRepositorySteelDetailRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGet2BeScrapRepositorySteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGet2BeScrapRepositorySteelInput(ctx context.Context, v interface{}) (model.Get2BeScrapRepositorySteelInput, error) {
	res, err := ec.unmarshalInputGet2BeScrapRepositorySteelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetChangedMaintenanceSteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetChangedMaintenanceSteelInput(ctx context.Context, v interface{}) (model.GetChangedMaintenanceSteelInput, error) {
	res, err := ec.unmarshalInputGetChangedMaintenanceSteelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetEnterMaintenanceSteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetEnterMaintenanceSteelDetailInput(ctx context.Context, v interface{}) (model.GetEnterMaintenanceSteelDetailInput, error) {
	res, err := ec.unmarshalInputGetEnterMaintenanceSteelDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetEnterMaintenanceSteelDetailRes2httpᚑapiᚋappᚋmodelsᚋmaintenanceᚐGetEnterMaintenanceSteelDetailRes(ctx context.Context, sel ast.SelectionSet, v maintenance.GetEnterMaintenanceSteelDetailRes) graphql.Marshaler {
	return ec._GetEnterMaintenanceSteelDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetEnterMaintenanceSteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenanceᚐGetEnterMaintenanceSteelDetailRes(ctx context.Context, sel ast.SelectionSet, v *maintenance.GetEnterMaintenanceSteelDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetEnterMaintenanceSteelDetailRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetEnterRepositorySteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetEnterRepositorySteelDetailInput(ctx context.Context, v interface{}) (model.GetEnterRepositorySteelDetailInput, error) {
	res, err := ec.unmarshalInputGetEnterRepositorySteelDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetEnterRepositorySteelDetailRes2httpᚑapiᚋappᚋmodelsᚋprojectsᚐGetEnterRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, v projects.GetEnterRepositorySteelDetailRes) graphql.Marshaler {
	return ec._GetEnterRepositorySteelDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetEnterRepositorySteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetEnterRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, v *projects.GetEnterRepositorySteelDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetEnterRepositorySteelDetailRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetMaxLocationCodeInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetMaxLocationCodeInput(ctx context.Context, v interface{}) (model.GetMaxLocationCodeInput, error) {
	res, err := ec.unmarshalInputGetMaxLocationCodeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetOneSteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOneSteelDetailInput(ctx context.Context, v interface{}) (model.GetOneSteelDetailInput, error) {
	res, err := ec.unmarshalInputGetOneSteelDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetOrderListInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOrderListInput(ctx context.Context, v interface{}) (model.GetOrderListInput, error) {
	res, err := ec.unmarshalInputGetOrderListInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetOrderSteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOrderSteelDetailInput(ctx context.Context, v interface{}) (model.GetOrderSteelDetailInput, error) {
	res, err := ec.unmarshalInputGetOrderSteelDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetOutOfWorkshopProjectSteelDetail2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOutOfWorkshopProjectSteelDetail(ctx context.Context, v interface{}) (model.GetOutOfWorkshopProjectSteelDetail, error) {
	res, err := ec.unmarshalInputGetOutOfWorkshopProjectSteelDetail(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetOutOfWorkshopProjectSteelDetailRes2httpᚑapiᚋappᚋmodelsᚋprojectsᚐGetOutOfWorkshopProjectSteelDetailRes(ctx context.Context, sel ast.SelectionSet, v projects.GetOutOfWorkshopProjectSteelDetailRes) graphql.Marshaler {
	return ec._GetOutOfWorkshopProjectSteelDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetOutOfWorkshopProjectSteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetOutOfWorkshopProjectSteelDetailRes(ctx context.Context, sel ast.SelectionSet, v *projects.GetOutOfWorkshopProjectSteelDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetOutOfWorkshopProjectSteelDetailRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetProjectOrder2WorkshopDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetProjectOrder2WorkshopDetailInput(ctx context.Context, v interface{}) (model.GetProjectOrder2WorkshopDetailInput, error) {
	res, err := ec.unmarshalInputGetProjectOrder2WorkshopDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetProjectOrder2WorkshopDetailRes2httpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectOrder2WorkshopDetailRes(ctx context.Context, sel ast.SelectionSet, v projects.GetProjectOrder2WorkshopDetailRes) graphql.Marshaler {
	return ec._GetProjectOrder2WorkshopDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetProjectOrder2WorkshopDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectOrder2WorkshopDetailRes(ctx context.Context, sel ast.SelectionSet, v *projects.GetProjectOrder2WorkshopDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetProjectOrder2WorkshopDetailRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetProjectSpecificationDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetProjectSpecificationDetailInput(ctx context.Context, v interface{}) (model.GetProjectSpecificationDetailInput, error) {
	res, err := ec.unmarshalInputGetProjectSpecificationDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetProjectSpecificationDetailRes2httpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectSpecificationDetailRes(ctx context.Context, sel ast.SelectionSet, v projects.GetProjectSpecificationDetailRes) graphql.Marshaler {
	return ec._GetProjectSpecificationDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetProjectSpecificationDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectSpecificationDetailRes(ctx context.Context, sel ast.SelectionSet, v *projects.GetProjectSpecificationDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetProjectSpecificationDetailRes(ctx, sel, v)
}

func (ec *executionContext) marshalNGetProjectSteel2BeChangeDetailRes2httpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectSteel2BeChangeDetailRes(ctx context.Context, sel ast.SelectionSet, v projects.GetProjectSteel2BeChangeDetailRes) graphql.Marshaler {
	return ec._GetProjectSteel2BeChangeDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetProjectSteel2BeChangeDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectSteel2BeChangeDetailRes(ctx context.Context, sel ast.SelectionSet, v *projects.GetProjectSteel2BeChangeDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetProjectSteel2BeChangeDetailRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetProjectSteel2BeChangeInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetProjectSteel2BeChangeInput(ctx context.Context, v interface{}) (model.GetProjectSteel2BeChangeInput, error) {
	res, err := ec.unmarshalInputGetProjectSteel2BeChangeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetProjectSteelDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetProjectSteelDetailInput(ctx context.Context, v interface{}) (model.GetProjectSteelDetailInput, error) {
	res, err := ec.unmarshalInputGetProjectSteelDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetProjectSteelDetailRes2httpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectSteelDetailRes(ctx context.Context, sel ast.SelectionSet, v projects.GetProjectSteelDetailRes) graphql.Marshaler {
	return ec._GetProjectSteelDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetProjectSteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetProjectSteelDetailRes(ctx context.Context, sel ast.SelectionSet, v *projects.GetProjectSteelDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetProjectSteelDetailRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetRepositoryOverviewInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetRepositoryOverviewInput(ctx context.Context, v interface{}) (model.GetRepositoryOverviewInput, error) {
	res, err := ec.unmarshalInputGetRepositoryOverviewInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetRepositoryOverviewRes2httpᚑapiᚋappᚋmodelsᚋrepositoriesᚐGetRepositoryOverviewRes(ctx context.Context, sel ast.SelectionSet, v repositories.GetRepositoryOverviewRes) graphql.Marshaler {
	return ec._GetRepositoryOverviewRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetRepositoryOverviewRes2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐGetRepositoryOverviewRes(ctx context.Context, sel ast.SelectionSet, v *repositories.GetRepositoryOverviewRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetRepositoryOverviewRes(ctx, sel, v)
}

func (ec *executionContext) marshalNGetRepositorySteelDetailRes2httpᚑapiᚋappᚋmodelsᚋsteelsᚐGetRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, v steels.GetRepositorySteelDetailRes) graphql.Marshaler {
	return ec._GetRepositorySteelDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetRepositorySteelDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐGetRepositorySteelDetailRes(ctx context.Context, sel ast.SelectionSet, v *steels.GetRepositorySteelDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetRepositorySteelDetailRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetRepositorySteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetRepositorySteelInput(ctx context.Context, v interface{}) (model.GetRepositorySteelInput, error) {
	res, err := ec.unmarshalInputGetRepositorySteelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetRepositorySteelListItemRes2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐGetRepositorySteelListItemResᚄ(ctx context.Context, sel ast.SelectionSet, v []*repositories.GetRepositorySteelListItemRes) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetRepositorySteelListItemRes2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐGetRepositorySteelListItemRes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNGetRepositorySteelListItemRes2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐGetRepositorySteelListItemRes(ctx context.Context, sel ast.SelectionSet, v *repositories.GetRepositorySteelListItemRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetRepositorySteelListItemRes(ctx, sel, v)
}

func (ec *executionContext) marshalNGetRepositorySteelRes2httpᚑapiᚋappᚋmodelsᚋrepositoriesᚐGetRepositorySteelRes(ctx context.Context, sel ast.SelectionSet, v repositories.GetRepositorySteelRes) graphql.Marshaler {
	return ec._GetRepositorySteelRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetRepositorySteelRes2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐGetRepositorySteelRes(ctx context.Context, sel ast.SelectionSet, v *repositories.GetRepositorySteelRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetRepositorySteelRes(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSend2WorkshopOrderListDetailRes2httpᚑapiᚋappᚋmodelsᚋprojectsᚐGetSend2WorkshopOrderListDetailRes(ctx context.Context, sel ast.SelectionSet, v projects.GetSend2WorkshopOrderListDetailRes) graphql.Marshaler {
	return ec._GetSend2WorkshopOrderListDetailRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSend2WorkshopOrderListDetailRes2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐGetSend2WorkshopOrderListDetailRes(ctx context.Context, sel ast.SelectionSet, v *projects.GetSend2WorkshopOrderListDetailRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetSend2WorkshopOrderListDetailRes(ctx, sel, v)
}

func (ec *executionContext) marshalNGetSteelListRes2httpᚑapiᚋappᚋmodelsᚋsteelsᚐGetSteelListRes(ctx context.Context, sel ast.SelectionSet, v steels.GetSteelListRes) graphql.Marshaler {
	return ec._GetSteelListRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetSteelListRes2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐGetSteelListRes(ctx context.Context, sel ast.SelectionSet, v *steels.GetSteelListRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetSteelListRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetToBeEnterRepositoryDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetToBeEnterRepositoryDetailInput(ctx context.Context, v interface{}) (model.GetToBeEnterRepositoryDetailInput, error) {
	res, err := ec.unmarshalInputGetToBeEnterRepositoryDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetToBeEnterRepositorySpecificationListInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetToBeEnterRepositorySpecificationListInput(ctx context.Context, v interface{}) (model.GetToBeEnterRepositorySpecificationListInput, error) {
	res, err := ec.unmarshalInputGetToBeEnterRepositorySpecificationListInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGraphDesc2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGraphDesc(ctx context.Context, sel ast.SelectionSet, v model.GraphDesc) graphql.Marshaler {
	return ec._GraphDesc(ctx, sel, &v)
}

func (ec *executionContext) marshalNGraphDesc2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGraphDesc(ctx context.Context, sel ast.SelectionSet, v *model.GraphDesc) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GraphDesc(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInstallLocationInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐInstallLocationInput(ctx context.Context, v interface{}) (model.InstallLocationInput, error) {
	res, err := ec.unmarshalInputInstallLocationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNInt2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNIsAccessLocationCodeInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐIsAccessLocationCodeInput(ctx context.Context, v interface{}) (model.IsAccessLocationCodeInput, error) {
	res, err := ec.unmarshalInputIsAccessLocationCodeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLoginRes2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐLoginRes(ctx context.Context, sel ast.SelectionSet, v model.LoginRes) graphql.Marshaler {
	return ec._LoginRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginRes2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐLoginRes(ctx context.Context, sel ast.SelectionSet, v *model.LoginRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LoginRes(ctx, sel, v)
}

func (ec *executionContext) marshalNMaintenanceItem2httpᚑapiᚋappᚋmodelsᚋmaintenanceᚐMaintenance(ctx context.Context, sel ast.SelectionSet, v maintenance.Maintenance) graphql.Marshaler {
	return ec._MaintenanceItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNMaintenanceItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋmaintenanceᚐMaintenance(ctx context.Context, sel ast.SelectionSet, v []*maintenance.Maintenance) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMaintenanceItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenanceᚐMaintenance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMaintenanceItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenanceᚐMaintenance(ctx context.Context, sel ast.SelectionSet, v *maintenance.Maintenance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MaintenanceItem(ctx, sel, v)
}

func (ec *executionContext) marshalNMaintenanceRecordItem2httpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecord(ctx context.Context, sel ast.SelectionSet, v maintenance_record.MaintenanceRecord) graphql.Marshaler {
	return ec._MaintenanceRecordItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNMaintenanceRecordItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecord(ctx context.Context, sel ast.SelectionSet, v []*maintenance_record.MaintenanceRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMaintenanceRecordItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMaintenanceRecordItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*maintenance_record.MaintenanceRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMaintenanceRecordItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMaintenanceRecordItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecord(ctx context.Context, sel ast.SelectionSet, v *maintenance_record.MaintenanceRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MaintenanceRecordItem(ctx, sel, v)
}

func (ec *executionContext) marshalNManufacturerItem2httpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v codeinfo.CodeInfo) graphql.Marshaler {
	return ec._ManufacturerItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNManufacturerItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v []*codeinfo.CodeInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v *codeinfo.CodeInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ManufacturerItem(ctx, sel, v)
}

func (ec *executionContext) marshalNMaterialManufacturerItem2httpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v codeinfo.CodeInfo) graphql.Marshaler {
	return ec._MaterialManufacturerItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNMaterialManufacturerItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v []*codeinfo.CodeInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMaterialManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMaterialManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v *codeinfo.CodeInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MaterialManufacturerItem(ctx, sel, v)
}

func (ec *executionContext) marshalNMsgItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋmsgᚐMsg(ctx context.Context, sel ast.SelectionSet, v []*msg.Msg) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMsgItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmsgᚐMsg(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNOrderExpressDirection2httpᚑapiᚋappᚋmodelsᚋorder_expressᚐOrderExpressDirection(ctx context.Context, v interface{}) (order_express.OrderExpressDirection, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := order_express.OrderExpressDirection(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderExpressDirection2httpᚑapiᚋappᚋmodelsᚋorder_expressᚐOrderExpressDirection(ctx context.Context, sel ast.SelectionSet, v order_express.OrderExpressDirection) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNOrderItem2httpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx context.Context, sel ast.SelectionSet, v orders.Order) graphql.Marshaler {
	return ec._OrderItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrderItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx context.Context, sel ast.SelectionSet, v []*orders.Order) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrderItem2ᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrderItem2ᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx context.Context, sel ast.SelectionSet, v *orders.Order) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrderItem(ctx, sel, v)
}

func (ec *executionContext) marshalNOrderSpecificationItem2httpᚑapiᚋappᚋmodelsᚋorder_specificationᚐOrderSpecification(ctx context.Context, sel ast.SelectionSet, v order_specification.OrderSpecification) graphql.Marshaler {
	return ec._OrderSpecificationItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrderSpecificationItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specificationᚐOrderSpecification(ctx context.Context, sel ast.SelectionSet, v []*order_specification.OrderSpecification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrderSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specificationᚐOrderSpecification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrderSpecificationItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specificationᚐOrderSpecificationᚄ(ctx context.Context, sel ast.SelectionSet, v []*order_specification.OrderSpecification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrderSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specificationᚐOrderSpecification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrderSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specificationᚐOrderSpecification(ctx context.Context, sel ast.SelectionSet, v *order_specification.OrderSpecification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrderSpecificationItem(ctx, sel, v)
}

func (ec *executionContext) marshalNOrderSpecificationSteelItem2httpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx context.Context, sel ast.SelectionSet, v order_specification_steel.OrderSpecificationSteel) graphql.Marshaler {
	return ec._OrderSpecificationSteelItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrderSpecificationSteelItem2ᚕhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteelᚄ(ctx context.Context, sel ast.SelectionSet, v []order_specification_steel.OrderSpecificationSteel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrderSpecificationSteelItem2httpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrderSpecificationSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx context.Context, sel ast.SelectionSet, v []*order_specification_steel.OrderSpecificationSteel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrderSpecificationSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrderSpecificationSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteelᚄ(ctx context.Context, sel ast.SelectionSet, v []*order_specification_steel.OrderSpecificationSteel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrderSpecificationSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrderSpecificationSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx context.Context, sel ast.SelectionSet, v *order_specification_steel.OrderSpecificationSteel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrderSpecificationSteelItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaginationInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐPaginationInput(ctx context.Context, v interface{}) (model.PaginationInput, error) {
	res, err := ec.unmarshalInputPaginationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectItem2httpᚑapiᚋappᚋmodelsᚋprojectsᚐProjects(ctx context.Context, sel ast.SelectionSet, v projects.Projects) graphql.Marshaler {
	return ec._ProjectItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjects(ctx context.Context, sel ast.SelectionSet, v []*projects.Projects) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectItem2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjects(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProjectItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjectsᚄ(ctx context.Context, sel ast.SelectionSet, v []*projects.Projects) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectItem2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjects(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProjectItem2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjects(ctx context.Context, sel ast.SelectionSet, v *projects.Projects) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProjectItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectOrder2WorkshopDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐProjectOrder2WorkshopDetailInput(ctx context.Context, v interface{}) (model.ProjectOrder2WorkshopDetailInput, error) {
	res, err := ec.unmarshalInputProjectOrder2WorkshopDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectOrder2WorkshopInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐProjectOrder2WorkshopInput(ctx context.Context, v interface{}) (model.ProjectOrder2WorkshopInput, error) {
	res, err := ec.unmarshalInputProjectOrder2WorkshopInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectSteel2BeChangeInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐProjectSteel2BeChangeInput(ctx context.Context, v interface{}) (model.ProjectSteel2BeChangeInput, error) {
	res, err := ec.unmarshalInputProjectSteel2BeChangeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRepositoryItem2httpᚑapiᚋappᚋmodelsᚋrepositoriesᚐRepositories(ctx context.Context, sel ast.SelectionSet, v repositories.Repositories) graphql.Marshaler {
	return ec._RepositoryItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNRepositoryItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐRepositories(ctx context.Context, sel ast.SelectionSet, v []*repositories.Repositories) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORepositoryItem2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐRepositories(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRepositoryItem2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐRepositories(ctx context.Context, sel ast.SelectionSet, v *repositories.Repositories) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RepositoryItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRole2httpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRole(ctx context.Context, v interface{}) (roles.GraphqlRole, error) {
	var res roles.GraphqlRole
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRole2httpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRole(ctx context.Context, sel ast.SelectionSet, v roles.GraphqlRole) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx context.Context, v interface{}) ([]roles.GraphqlRole, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]roles.GraphqlRole, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRole2httpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRole(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNRole2ᚕhttpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []roles.GraphqlRole) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2httpᚑapiᚋappᚋmodelsᚋrolesᚐGraphqlRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRoleItem2httpᚑapiᚋappᚋmodelsᚋrolesᚐRole(ctx context.Context, sel ast.SelectionSet, v roles.Role) graphql.Marshaler {
	return ec._RoleItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNRoleItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋrolesᚐRole(ctx context.Context, sel ast.SelectionSet, v []*roles.Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORoleItem2ᚖhttpᚑapiᚋappᚋmodelsᚋrolesᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRoleItem2ᚖhttpᚑapiᚋappᚋmodelsᚋrolesᚐRole(ctx context.Context, sel ast.SelectionSet, v *roles.Role) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RoleItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSetBatchOfMaintenanceSteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetBatchOfMaintenanceSteelInput(ctx context.Context, v interface{}) (model.SetBatchOfMaintenanceSteelInput, error) {
	res, err := ec.unmarshalInputSetBatchOfMaintenanceSteelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetBatchOfRepositorySteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetBatchOfRepositorySteelInput(ctx context.Context, v interface{}) (model.SetBatchOfRepositorySteelInput, error) {
	res, err := ec.unmarshalInputSetBatchOfRepositorySteelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetBatchOfRepositorySteelScrapInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetBatchOfRepositorySteelScrapInput(ctx context.Context, v interface{}) (model.SetBatchOfRepositorySteelScrapInput, error) {
	res, err := ec.unmarshalInputSetBatchOfRepositorySteelScrapInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetMaintenanceInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetMaintenanceInput(ctx context.Context, v interface{}) (model.SetMaintenanceInput, error) {
	res, err := ec.unmarshalInputSetMaintenanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetProjectSteelEnterRepositoryInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetProjectSteelEnterRepositoryInput(ctx context.Context, v interface{}) (model.SetProjectSteelEnterRepositoryInput, error) {
	res, err := ec.unmarshalInputSetProjectSteelEnterRepositoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetProjectSteelInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetProjectSteelInput(ctx context.Context, v interface{}) (model.SetProjectSteelInput, error) {
	res, err := ec.unmarshalInputSetProjectSteelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetProjectSteelOutOfWorkshopInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetProjectSteelOutOfWorkshopInput(ctx context.Context, v interface{}) (model.SetProjectSteelOutOfWorkshopInput, error) {
	res, err := ec.unmarshalInputSetProjectSteelOutOfWorkshopInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetSteelIntoWorkshopInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetSteelIntoWorkshopInput(ctx context.Context, v interface{}) (model.SetSteelIntoWorkshopInput, error) {
	res, err := ec.unmarshalInputSetSteelIntoWorkshopInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSpecificationItem2httpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx context.Context, sel ast.SelectionSet, v specificationinfo.SpecificationInfo) graphql.Marshaler {
	return ec._SpecificationItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNSpecificationItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx context.Context, sel ast.SelectionSet, v []*specificationinfo.SpecificationInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSpecificationItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*specificationinfo.SpecificationInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx context.Context, sel ast.SelectionSet, v *specificationinfo.SpecificationInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SpecificationItem(ctx, sel, v)
}

func (ec *executionContext) marshalNStateItem2httpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItem(ctx context.Context, sel ast.SelectionSet, v steels.StateItem) graphql.Marshaler {
	return ec._StateItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNStateItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*steels.StateItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStateItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNStateItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐStateItem(ctx context.Context, sel ast.SelectionSet, v *steels.StateItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StateItem(ctx, sel, v)
}

func (ec *executionContext) marshalNSteelInProject2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx context.Context, sel ast.SelectionSet, v []*order_specification_steel.OrderSpecificationSteel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSteelInProject2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSteelItem2httpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx context.Context, sel ast.SelectionSet, v steels.Steels) graphql.Marshaler {
	return ec._SteelItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx context.Context, sel ast.SelectionSet, v []*steels.Steels) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSteelItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteelsᚄ(ctx context.Context, sel ast.SelectionSet, v []*steels.Steels) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx context.Context, sel ast.SelectionSet, v *steels.Steels) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SteelItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUserItem2httpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx context.Context, sel ast.SelectionSet, v users.Users) graphql.Marshaler {
	return ec._UserItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx context.Context, sel ast.SelectionSet, v []*users.Users) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUserItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsersᚄ(ctx context.Context, sel ast.SelectionSet, v []*users.Users) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx context.Context, sel ast.SelectionSet, v *users.Users) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserItem(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNgetOrderDetailInput2httpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOrderDetailInput(ctx context.Context, v interface{}) (model.GetOrderDetailInput, error) {
	res, err := ec.unmarshalInputgetOrderDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCompanyItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcompaniesᚐCompanies(ctx context.Context, sel ast.SelectionSet, v *companies.Companies) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompanyItem(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceItem2ᚖhttpᚑapiᚋappᚋmodelsᚋdevicesᚐDevice(ctx context.Context, sel ast.SelectionSet, v *devices.Device) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEditCompanyUserInput2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐEditCompanyUserInput(ctx context.Context, v interface{}) (*model.EditCompanyUserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEditCompanyUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOErrCodes2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐErrCodes(ctx context.Context, sel ast.SelectionSet, v *model.ErrCodes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ErrCodes(ctx, sel, v)
}

func (ec *executionContext) marshalOExpressItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v *codeinfo.CodeInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExpressItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGetCompanyUserInput2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetCompanyUserInput(ctx context.Context, v interface{}) (*model.GetCompanyUserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGetCompanyUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGetMultipleSteelDetailInput2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetMultipleSteelDetailInput(ctx context.Context, v interface{}) (*model.GetMultipleSteelDetailInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGetMultipleSteelDetailInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGetOrderListInputType2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOrderListInputType(ctx context.Context, v interface{}) (*model.GetOrderListInputType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.GetOrderListInputType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGetOrderListInputType2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐGetOrderListInputType(ctx context.Context, sel ast.SelectionSet, v *model.GetOrderListInputType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	return graphql.MarshalInt64(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) marshalOMaintenanceItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenanceᚐMaintenance(ctx context.Context, sel ast.SelectionSet, v *maintenance.Maintenance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MaintenanceItem(ctx, sel, v)
}

func (ec *executionContext) marshalOMaintenanceRecordItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmaintenance_recordᚐMaintenanceRecord(ctx context.Context, sel ast.SelectionSet, v *maintenance_record.MaintenanceRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MaintenanceRecordItem(ctx, sel, v)
}

func (ec *executionContext) marshalOManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v *codeinfo.CodeInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ManufacturerItem(ctx, sel, v)
}

func (ec *executionContext) marshalOMaterialManufacturerItem2ᚖhttpᚑapiᚋappᚋmodelsᚋcodeinfoᚐCodeInfo(ctx context.Context, sel ast.SelectionSet, v *codeinfo.CodeInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MaterialManufacturerItem(ctx, sel, v)
}

func (ec *executionContext) marshalOMsgItem2ᚖhttpᚑapiᚋappᚋmodelsᚋmsgᚐMsg(ctx context.Context, sel ast.SelectionSet, v *msg.Msg) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MsgItem(ctx, sel, v)
}

func (ec *executionContext) marshalOOrderExpressItem2ᚕᚖhttpᚑapiᚋappᚋmodelsᚋorder_expressᚐOrderExpress(ctx context.Context, sel ast.SelectionSet, v []*order_express.OrderExpress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrderExpressItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_expressᚐOrderExpress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOrderExpressItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_expressᚐOrderExpress(ctx context.Context, sel ast.SelectionSet, v *order_express.OrderExpress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrderExpressItem(ctx, sel, v)
}

func (ec *executionContext) marshalOOrderItem2ᚖhttpᚑapiᚋappᚋmodelsᚋordersᚐOrder(ctx context.Context, sel ast.SelectionSet, v *orders.Order) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrderItem(ctx, sel, v)
}

func (ec *executionContext) marshalOOrderSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specificationᚐOrderSpecification(ctx context.Context, sel ast.SelectionSet, v *order_specification.OrderSpecification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrderSpecificationItem(ctx, sel, v)
}

func (ec *executionContext) marshalOOrderSpecificationSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx context.Context, sel ast.SelectionSet, v *order_specification_steel.OrderSpecificationSteel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrderSpecificationSteelItem(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectItem2ᚖhttpᚑapiᚋappᚋmodelsᚋprojectsᚐProjects(ctx context.Context, sel ast.SelectionSet, v *projects.Projects) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectItem(ctx, sel, v)
}

func (ec *executionContext) marshalORepositoryItem2ᚖhttpᚑapiᚋappᚋmodelsᚋrepositoriesᚐRepositories(ctx context.Context, sel ast.SelectionSet, v *repositories.Repositories) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepositoryItem(ctx, sel, v)
}

func (ec *executionContext) marshalORoleItem2ᚖhttpᚑapiᚋappᚋmodelsᚋrolesᚐRole(ctx context.Context, sel ast.SelectionSet, v *roles.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RoleItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSetPasswordInput2ᚖhttpᚑapiᚋappᚋhttpᚋgraphᚋmodelᚐSetPasswordInput(ctx context.Context, v interface{}) (*model.SetPasswordInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSetPasswordInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSpecificationItem2ᚖhttpᚑapiᚋappᚋmodelsᚋspecificationinfoᚐSpecificationInfo(ctx context.Context, sel ast.SelectionSet, v *specificationinfo.SpecificationInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SpecificationItem(ctx, sel, v)
}

func (ec *executionContext) marshalOSteelInProject2ᚖhttpᚑapiᚋappᚋmodelsᚋorder_specification_steelᚐOrderSpecificationSteel(ctx context.Context, sel ast.SelectionSet, v *order_specification_steel.OrderSpecificationSteel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SteelInProject(ctx, sel, v)
}

func (ec *executionContext) marshalOSteelItem2ᚖhttpᚑapiᚋappᚋmodelsᚋsteelsᚐSteels(ctx context.Context, sel ast.SelectionSet, v *steels.Steels) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SteelItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) marshalOUserItem2ᚖhttpᚑapiᚋappᚋmodelsᚋusersᚐUsers(ctx context.Context, sel ast.SelectionSet, v *users.Users) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserItem(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
